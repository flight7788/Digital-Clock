

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Aug 07 00:33:52 2022

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68  0000                     
    69                           ; Version 2.05
    70                           ; Generated 20/12/2018 GMT
    71                           ; 
    72                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F4550 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103  0000                     
   104                           	psect	idataCOMRAM
   105  001A3C                     __pidataCOMRAM:
   106                           	opt callstack 0
   107                           
   108                           ;initializer for Task_SetBrightness@brightness
   109  001A3C  08                 	db	8
   110                           
   111                           	psect	idataBANK0
   112  001A12                     __pidataBANK0:
   113                           	opt callstack 0
   114                           
   115                           ;initializer for _MyDisplay
   116  001A12  09                 	db	9
   117  001A13  09                 	db	9
   118  001A14  09                 	db	9
   119  001A15  09                 	db	9
   120  001A16  01                 	db	1
   121  001A17  02                 	db	2
   122  001A18  09                 	db	9
   123  001A19  08                 	db	8
   124  001A1A  00                 	db	0
   125  001A1B  00                 	db	0
   126  001A1C  00                 	db	0
   127  001A1D  00                 	db	0
   128                           
   129                           	psect	smallconst
   130  000800                     __psmallconst:
   131                           	opt callstack 0
   132  000800  00                 	db	0
   133  000801                     _NumOut_Table:
   134                           	opt callstack 0
   135  000801  C0                 	db	192
   136  000802  F9                 	db	249
   137  000803  A4                 	db	164
   138  000804  B0                 	db	176
   139  000805  99                 	db	153
   140  000806  92                 	db	146
   141  000807  82                 	db	130
   142  000808  F8                 	db	248
   143  000809  80                 	db	128
   144  00080A  90                 	db	144
   145  00080B  BF                 	db	191
   146  00080C  FF                 	db	255
   147  00080D  C6                 	db	198
   148  00080E                     __end_of_NumOut_Table:
   149                           	opt callstack 0
   150  0000                     _TMR1	set	4046
   151  0000                     _TMR0	set	4054
   152  0000                     _LATD	set	3980
   153  0000                     _LATBbits	set	3978
   154  0000                     _SSPBUF	set	4041
   155  0000                     _SSPCON2bits	set	4037
   156  0000                     _SSPSTAT	set	4039
   157  0000                     _SSPCON2	set	4037
   158  0000                     _SSPADD	set	4040
   159  0000                     _SSPCON1bits	set	4038
   160  0000                     _SSPSTATbits	set	4039
   161  0000                     _TRISBbits	set	3987
   162  0000                     _T1CONbits	set	4045
   163  0000                     _INTCON2bits	set	4081
   164  0000                     _RCONbits	set	4048
   165  0000                     _TRISE	set	3990
   166  0000                     _TRISD	set	3989
   167  0000                     _TRISC	set	3988
   168  0000                     _TRISB	set	3987
   169  0000                     _ADCON1	set	4033
   170  0000                     _PORTEbits	set	3972
   171  0000                     _T0CONbits	set	4053
   172  0000                     _OSCCONbits	set	4051
   173  0000                     _INTCONbits	set	4082
   174                           
   175                           ; #config settings
   176  00080E  00                 	db	0	; dummy byte at the end
   177  0000                     
   178                           	psect	cinit
   179  0013D8                     __pcinit:
   180                           	opt callstack 0
   181  0013D8                     start_initialization:
   182                           	opt callstack 0
   183  0013D8                     __initialization:
   184                           	opt callstack 0
   185                           
   186                           ; Initialize objects allocated to BANK0 (12 bytes)
   187                           ; load TBLPTR registers with __pidataBANK0
   188  0013D8  0E12               	movlw	low __pidataBANK0
   189  0013DA  6EF6               	movwf	tblptrl,c
   190  0013DC  0E1A               	movlw	high __pidataBANK0
   191  0013DE  6EF7               	movwf	tblptrh,c
   192  0013E0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   193  0013E2  6EF8               	movwf	tblptru,c
   194  0013E4  EE00  F08F         	lfsr	0,__pdataBANK0
   195  0013E8  EE10 F00C          	lfsr	1,12
   196  0013EC                     copy_data0:
   197  0013EC  0009               	tblrd		*+
   198  0013EE  CFF5 FFEE          	movff	tablat,postinc0
   199  0013F2  50E5               	movf	postdec1,w,c
   200  0013F4  50E1               	movf	fsr1l,w,c
   201  0013F6  E1FA               	bnz	copy_data0
   202                           
   203                           ; Initialize objects allocated to COMRAM (1 bytes)
   204                           ; load TBLPTR registers with __pidataCOMRAM
   205  0013F8  0E3C               	movlw	low __pidataCOMRAM
   206  0013FA  6EF6               	movwf	tblptrl,c
   207  0013FC  0E1A               	movlw	high __pidataCOMRAM
   208  0013FE  6EF7               	movwf	tblptrh,c
   209  001400  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   210  001402  6EF8               	movwf	tblptru,c
   211  001404  0009               	tblrd		*+	;fetch initializer
   212  001406  CFF5 F03E          	movff	tablat,__pdataCOMRAM
   213                           
   214                           ; Clear objects allocated to BANK0 (15 bytes)
   215  00140A  EE00  F080         	lfsr	0,__pbssBANK0
   216  00140E  0E0F               	movlw	15
   217  001410                     clear_0:
   218  001410  6AEE               	clrf	postinc0,c
   219  001412  06E8               	decf	wreg,f,c
   220  001414  E1FD               	bnz	clear_0
   221                           
   222                           ; Clear objects allocated to COMRAM (20 bytes)
   223  001416  EE00  F02A         	lfsr	0,__pbssCOMRAM
   224  00141A  0E14               	movlw	20
   225  00141C                     clear_1:
   226  00141C  6AEE               	clrf	postinc0,c
   227  00141E  06E8               	decf	wreg,f,c
   228  001420  E1FD               	bnz	clear_1
   229  001422                     end_of_initialization:
   230                           	opt callstack 0
   231  001422                     __end_of__initialization:
   232                           	opt callstack 0
   233  001422  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   234  001424  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   235  001426  0E00               	movlw	low (__Lmediumconst shr (0+16))
   236  001428  6EF8               	movwf	tblptru,c
   237  00142A  0100               	movlb	0
   238  00142C  EF63  F006         	goto	_main	;jump to C main() function
   239                           
   240                           	psect	bssCOMRAM
   241  00002A                     __pbssCOMRAM:
   242                           	opt callstack 0
   243  00002A                     MySystick_ms@cnt:
   244                           	opt callstack 0
   245  00002A                     	ds	2
   246  00002C                     GetRisingEdge_SW2@old_cnt:
   247                           	opt callstack 0
   248  00002C                     	ds	2
   249  00002E                     PressOverTime_SW1@old_cnt:
   250                           	opt callstack 0
   251  00002E                     	ds	2
   252  000030                     PressOverTime_SW2@old_cnt:
   253                           	opt callstack 0
   254  000030                     	ds	2
   255  000032                     Task_ShowTime@Point_blink:
   256                           	opt callstack 0
   257  000032                     	ds	1
   258  000033                     Task_ShowTime@old_sec:
   259                           	opt callstack 0
   260  000033                     	ds	1
   261  000034                     Task_SetRTC@Blink:
   262                           	opt callstack 0
   263  000034                     	ds	1
   264  000035                     Display_ISR@BrightCnt:
   265                           	opt callstack 0
   266  000035                     	ds	1
   267  000036                     Display_ISR@digit:
   268                           	opt callstack 0
   269  000036                     	ds	1
   270  000037                     GetRisingEdge_SW1@Ready_f:
   271                           	opt callstack 0
   272  000037                     	ds	1
   273  000038                     GetRisingEdge_SW1@exist:
   274                           	opt callstack 0
   275  000038                     	ds	1
   276  000039                     GetRisingEdge_SW2@Ready_f:
   277                           	opt callstack 0
   278  000039                     	ds	1
   279  00003A                     GetRisingEdge_SW2@exist:
   280                           	opt callstack 0
   281  00003A                     	ds	1
   282  00003B                     PressOverTime_SW1@status:
   283                           	opt callstack 0
   284  00003B                     	ds	1
   285  00003C                     PressOverTime_SW2@status:
   286                           	opt callstack 0
   287  00003C                     	ds	1
   288  00003D                     _Mode:
   289                           	opt callstack 0
   290  00003D                     	ds	1
   291                           
   292                           	psect	dataCOMRAM
   293  00003E                     __pdataCOMRAM:
   294                           	opt callstack 0
   295  00003E                     Task_SetBrightness@brightness:
   296                           	opt callstack 0
   297  00003E                     	ds	1
   298                           
   299                           	psect	bssBANK0
   300  000080                     __pbssBANK0:
   301                           	opt callstack 0
   302  000080                     Task_SetRTC@PrevTime:
   303                           	opt callstack 0
   304  000080                     	ds	2
   305  000082                     Task_IncrementVal@PrevTime:
   306                           	opt callstack 0
   307  000082                     	ds	2
   308  000084                     MySystick_ms@old_cnt:
   309                           	opt callstack 0
   310  000084                     	ds	2
   311  000086                     GetRisingEdge_SW1@old_cnt:
   312                           	opt callstack 0
   313  000086                     	ds	2
   314  000088                     _MyRTC:
   315                           	opt callstack 0
   316  000088                     	ds	7
   317                           
   318                           	psect	dataBANK0
   319  00008F                     __pdataBANK0:
   320                           	opt callstack 0
   321  00008F                     _MyDisplay:
   322                           	opt callstack 0
   323  00008F                     	ds	12
   324                           
   325                           	psect	cstackBANK0
   326  000060                     __pcstackBANK0:
   327                           	opt callstack 0
   328  000060                     _Task_SetRTC$1853:
   329                           	opt callstack 0
   330                           
   331                           ; 2 bytes @ 0x0
   332  000060                     	ds	2
   333  000062                     _Task_SetRTC$1130:
   334                           	opt callstack 0
   335                           
   336                           ; 2 bytes @ 0x2
   337  000062                     	ds	2
   338  000064                     _Task_SetRTC$1131:
   339                           	opt callstack 0
   340                           
   341                           ; 2 bytes @ 0x4
   342  000064                     	ds	2
   343  000066                     _Task_SetRTC$1132:
   344                           	opt callstack 0
   345                           
   346                           ; 2 bytes @ 0x6
   347  000066                     	ds	2
   348  000068                     _Task_SetRTC$1133:
   349                           	opt callstack 0
   350                           
   351                           ; 2 bytes @ 0x8
   352  000068                     	ds	2
   353  00006A                     _Task_SetRTC$1134:
   354                           	opt callstack 0
   355                           
   356                           ; 2 bytes @ 0xA
   357  00006A                     	ds	2
   358  00006C                     _Task_SetRTC$1135:
   359                           	opt callstack 0
   360                           
   361                           ; 2 bytes @ 0xC
   362  00006C                     	ds	2
   363  00006E                     _Task_SetRTC$1136:
   364                           	opt callstack 0
   365                           
   366                           ; 2 bytes @ 0xE
   367  00006E                     	ds	2
   368  000070                     _Task_SetRTC$1137:
   369                           	opt callstack 0
   370                           
   371                           ; 2 bytes @ 0x10
   372  000070                     	ds	2
   373  000072                     _Task_SetRTC$1138:
   374                           	opt callstack 0
   375                           
   376                           ; 2 bytes @ 0x12
   377  000072                     	ds	2
   378  000074                     _Task_SetRTC$1139:
   379                           	opt callstack 0
   380                           
   381                           ; 2 bytes @ 0x14
   382  000074                     	ds	2
   383  000076                     _Task_SetRTC$1140:
   384                           	opt callstack 0
   385                           
   386                           ; 2 bytes @ 0x16
   387  000076                     	ds	2
   388  000078                     Task_SetRTC@seq_cnt:
   389                           	opt callstack 0
   390                           
   391                           ; 1 bytes @ 0x18
   392  000078                     	ds	1
   393  000079                     Task_SetRTC@NewSet:
   394                           	opt callstack 0
   395                           
   396                           ; 7 bytes @ 0x19
   397  000079                     	ds	7
   398                           
   399                           	psect	cstackCOMRAM
   400  000001                     __pcstackCOMRAM:
   401                           	opt callstack 0
   402  000001                     ??_Display_ISR:
   403  000001                     
   404                           ; 1 bytes @ 0x0
   405  000001                     	ds	2
   406  000003                     Display_ISR@data:
   407                           	opt callstack 0
   408                           
   409                           ; 1 bytes @ 0x2
   410  000003                     	ds	1
   411  000004                     ??_ISR:
   412                           
   413                           ; 1 bytes @ 0x3
   414  000004                     	ds	6
   415  00000A                     ??_I2C_is_idle:
   416  00000A                     ?_abs:
   417                           	opt callstack 0
   418  00000A                     ?___awdiv:
   419                           	opt callstack 0
   420  00000A                     ?___awmod:
   421                           	opt callstack 0
   422  00000A                     Display_Set_Brightness@digit1_val:
   423                           	opt callstack 0
   424  00000A                     Display_Set_Point@digit1_val:
   425                           	opt callstack 0
   426  00000A                     ___awdiv@dividend:
   427                           	opt callstack 0
   428  00000A                     ___awmod@dividend:
   429                           	opt callstack 0
   430  00000A                     abs@a:
   431                           	opt callstack 0
   432                           
   433                           ; 2 bytes @ 0x9
   434  00000A                     	ds	1
   435  00000B                     Display_Set_Brightness@digit2_val:
   436                           	opt callstack 0
   437  00000B                     Display_Set_Point@digit2_val:
   438                           	opt callstack 0
   439                           
   440                           ; 1 bytes @ 0xA
   441  00000B                     	ds	1
   442  00000C                     ??_abs:
   443  00000C                     Display_Set_Brightness@digit3_val:
   444                           	opt callstack 0
   445  00000C                     Display_Set_Point@digit3_val:
   446                           	opt callstack 0
   447  00000C                     I2C_is_idle@TimeOut:
   448                           	opt callstack 0
   449  00000C                     ___awdiv@divisor:
   450                           	opt callstack 0
   451  00000C                     ___awmod@divisor:
   452                           	opt callstack 0
   453                           
   454                           ; 2 bytes @ 0xB
   455  00000C                     	ds	1
   456  00000D                     Display_Set_Brightness@digit0_val:
   457                           	opt callstack 0
   458  00000D                     Display_Set_Point@digit0_val:
   459                           	opt callstack 0
   460                           
   461                           ; 1 bytes @ 0xC
   462  00000D                     	ds	1
   463  00000E                     ?_MySystick_ms:
   464                           	opt callstack 0
   465  00000E                     I2C_Write@data:
   466                           	opt callstack 0
   467  00000E                     I2C_Read@GenerateAck:
   468                           	opt callstack 0
   469  00000E                     ___awdiv@counter:
   470                           	opt callstack 0
   471  00000E                     ___awmod@counter:
   472                           	opt callstack 0
   473                           
   474                           ; 1 bytes @ 0xD
   475  00000E                     	ds	1
   476  00000F                     I2C_Read@data:
   477                           	opt callstack 0
   478  00000F                     I2C_Mem_Transmit@MemAddress:
   479                           	opt callstack 0
   480  00000F                     ___awdiv@sign:
   481                           	opt callstack 0
   482  00000F                     ___awmod@sign:
   483                           	opt callstack 0
   484                           
   485                           ; 1 bytes @ 0xE
   486  00000F                     	ds	1
   487  000010                     ??_MySystick_ms:
   488  000010                     I2C_Mem_Transmit@data:
   489                           	opt callstack 0
   490  000010                     I2C_Mem_Read@MemAddress:
   491                           	opt callstack 0
   492  000010                     ___awdiv@quotient:
   493                           	opt callstack 0
   494                           
   495                           ; 2 bytes @ 0xF
   496  000010                     	ds	1
   497  000011                     I2C_Mem_Transmit@addr:
   498                           	opt callstack 0
   499  000011                     I2C_Mem_Read@data:
   500                           	opt callstack 0
   501                           
   502                           ; 2 bytes @ 0x10
   503  000011                     	ds	1
   504  000012                     ??_DS3231_SetSec:
   505  000012                     ??_DS3231_SetMin:
   506  000012                     ??_DS3231_SetHour:
   507  000012                     ??_DS3231_SetDate:
   508  000012                     ??_DS3231_SetMonth:
   509  000012                     ??_DS3231_SetYear:
   510  000012                     DS3231_SetWeek@BCD_Data:
   511                           	opt callstack 0
   512  000012                     Display_Set_NumVal@digit1_val:
   513                           	opt callstack 0
   514  000012                     PressOverTime_SW1@time:
   515                           	opt callstack 0
   516  000012                     _GetRisingEdge_SW2$1850:
   517                           	opt callstack 0
   518  000012                     _GetRisingEdge_SW1$1851:
   519                           	opt callstack 0
   520                           
   521                           ; 2 bytes @ 0x11
   522  000012                     	ds	1
   523  000013                     I2C_Mem_Read@addr:
   524                           	opt callstack 0
   525  000013                     DS3231_SetWeek@data:
   526                           	opt callstack 0
   527  000013                     Display_Set_NumVal@digit2_val:
   528                           	opt callstack 0
   529                           
   530                           ; 1 bytes @ 0x12
   531  000013                     	ds	1
   532  000014                     ??_PressOverTime_SW1:
   533  000014                     ??_DS3231_SecRead:
   534  000014                     ??_DS3231_MinRead:
   535  000014                     ??_DS3231_HourRead:
   536  000014                     ??_DS3231_DateRead:
   537  000014                     ??_DS3231_MonthRead:
   538  000014                     ??_DS3231_YearRead:
   539  000014                     DS3231_SetSec@BCD_Data:
   540                           	opt callstack 0
   541  000014                     DS3231_SetMin@BCD_Data:
   542                           	opt callstack 0
   543  000014                     DS3231_SetHour@BCD_Data:
   544                           	opt callstack 0
   545  000014                     DS3231_SetDate@BCD_Data:
   546                           	opt callstack 0
   547  000014                     DS3231_SetMonth@BCD_Data:
   548                           	opt callstack 0
   549  000014                     DS3231_SetYear@BCD_Data:
   550                           	opt callstack 0
   551  000014                     DS3231_WeekRead@data:
   552                           	opt callstack 0
   553  000014                     Display_Set_NumVal@digit3_val:
   554                           	opt callstack 0
   555                           
   556                           ; 1 bytes @ 0x13
   557  000014                     	ds	1
   558  000015                     DS3231_SetSec@data:
   559                           	opt callstack 0
   560  000015                     DS3231_SetMin@data:
   561                           	opt callstack 0
   562  000015                     DS3231_SetHour@data:
   563                           	opt callstack 0
   564  000015                     DS3231_SetDate@data:
   565                           	opt callstack 0
   566  000015                     DS3231_SetMonth@data:
   567                           	opt callstack 0
   568  000015                     DS3231_SetYear@data:
   569                           	opt callstack 0
   570  000015                     DS3231_SecRead@Dec_Data:
   571                           	opt callstack 0
   572  000015                     DS3231_MinRead@Dec_Data:
   573                           	opt callstack 0
   574  000015                     DS3231_HourRead@Dec_Data:
   575                           	opt callstack 0
   576  000015                     DS3231_DateRead@Dec_Data:
   577                           	opt callstack 0
   578  000015                     DS3231_MonthRead@Dec_Data:
   579                           	opt callstack 0
   580  000015                     DS3231_YearRead@Dec_Data:
   581                           	opt callstack 0
   582  000015                     Display_Set_NumVal@digit0_val:
   583                           	opt callstack 0
   584  000015                     _PressOverTime_SW1$1849:
   585                           	opt callstack 0
   586                           
   587                           ; 2 bytes @ 0x14
   588  000015                     	ds	1
   589  000016                     ??_Task_SetBrightness:
   590  000016                     DS3231_SecRead@BCD_Data:
   591                           	opt callstack 0
   592  000016                     DS3231_MinRead@BCD_Data:
   593                           	opt callstack 0
   594  000016                     DS3231_HourRead@BCD_Data:
   595                           	opt callstack 0
   596  000016                     DS3231_DateRead@BCD_Data:
   597                           	opt callstack 0
   598  000016                     DS3231_MonthRead@BCD_Data:
   599                           	opt callstack 0
   600  000016                     DS3231_YearRead@BCD_Data:
   601                           	opt callstack 0
   602  000016                     DS3231_SetAll@time:
   603                           	opt callstack 0
   604  000016                     Task_ShowWeek@CurrentRTC:
   605                           	opt callstack 0
   606  000016                     Task_ShowDate@CurrentRTC:
   607                           	opt callstack 0
   608  000016                     Task_ShowTime@CurrentRTC:
   609                           	opt callstack 0
   610                           
   611                           ; 7 bytes @ 0x15
   612  000016                     	ds	1
   613  000017                     DS3231_ReadAll@time:
   614                           	opt callstack 0
   615  000017                     Task_IncrementVal@targetVal:
   616                           	opt callstack 0
   617                           
   618                           ; 2 bytes @ 0x16
   619  000017                     	ds	1
   620  000018                     
   621                           ; 1 bytes @ 0x17
   622  000018                     	ds	1
   623  000019                     ??_DS3231_ReadAll:
   624  000019                     Task_IncrementVal@minVal:
   625                           	opt callstack 0
   626                           
   627                           ; 1 bytes @ 0x18
   628  000019                     	ds	1
   629  00001A                     Task_IncrementVal@maxVal:
   630                           	opt callstack 0
   631                           
   632                           ; 1 bytes @ 0x19
   633  00001A                     	ds	1
   634  00001B                     ??_Task_IncrementVal:
   635                           
   636                           ; 1 bytes @ 0x1A
   637  00001B                     	ds	1
   638  00001C                     _Task_IncrementVal$1852:
   639                           	opt callstack 0
   640                           
   641                           ; 2 bytes @ 0x1B
   642  00001C                     	ds	1
   643  00001D                     
   644                           ; 1 bytes @ 0x1C
   645  00001D                     	ds	1
   646  00001E                     Task_IncrementVal@Increment:
   647                           	opt callstack 0
   648                           
   649                           ; 1 bytes @ 0x1D
   650  00001E                     	ds	1
   651  00001F                     Task_SetRTC@CurrentRTC:
   652                           	opt callstack 0
   653                           
   654                           ; 7 bytes @ 0x1E
   655  00001F                     	ds	7
   656  000026                     ??_Task_SetRTC:
   657                           
   658                           ; 1 bytes @ 0x25
   659  000026                     	ds	2
   660  000028                     ??_main:
   661                           
   662                           ; 1 bytes @ 0x27
   663  000028                     	ds	2
   664                           
   665 ;;
   666 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   667 ;;
   668 ;; *************** function _main *****************
   669 ;; Defined at:
   670 ;;		line 20 in file "main.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;		None
   675 ;; Return value:  Size  Location     Type
   676 ;;                  1    wreg      void 
   677 ;; Registers used:
   678 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   679 ;; Tracked objects:
   680 ;;		On entry : 0/0
   681 ;;		On exit  : 0/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   684 ;;      Params:         0       0       0       0       0       0       0       0       0
   685 ;;      Locals:         0       0       0       0       0       0       0       0       0
   686 ;;      Temps:          2       0       0       0       0       0       0       0       0
   687 ;;      Totals:         2       0       0       0       0       0       0       0       0
   688 ;;Total ram usage:        2 bytes
   689 ;; Hardware stack levels required when called:    8
   690 ;; This function calls:
   691 ;;		_DS3231_Init
   692 ;;		_DS3231_ReadAll
   693 ;;		_Display_Set_NumVal
   694 ;;		_Display_Set_Point
   695 ;;		_GPIO_Init
   696 ;;		_GetRisingEdge_SW1
   697 ;;		_GetRisingEdge_SW2
   698 ;;		_Interrupt_Init
   699 ;;		_Task_SetBrightness
   700 ;;		_Task_SetRTC
   701 ;;		_Task_ShowDate
   702 ;;		_Task_ShowTime
   703 ;;		_Task_ShowWeek
   704 ;;		_Timer0_Init
   705 ;;		_Timer1_Init
   706 ;; This function is called by:
   707 ;;		Startup code after reset
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           	psect	text0
   712  000CC6                     __ptext0:
   713                           	opt callstack 0
   714  000CC6                     _main:
   715                           	opt callstack 23
   716                           
   717                           ;main.c: 21:     OSCCONbits.SCS = 0;
   718                           
   719                           ;incstack = 0
   720  000CC6  0EFC               	movlw	-4
   721  000CC8  16D3               	andwf	4051,f,c	;volatile
   722                           
   723                           ;main.c: 23:     GPIO_Init();
   724  000CCA  ECEE  F00C         	call	_GPIO_Init	;wreg free
   725                           
   726                           ;main.c: 24:     Interrupt_Init();
   727  000CCE  EC02  F00D         	call	_Interrupt_Init	;wreg free
   728                           
   729                           ;main.c: 25:     Timer0_Init();
   730  000CD2  ECAE  F00C         	call	_Timer0_Init	;wreg free
   731                           
   732                           ;main.c: 26:     Timer1_Init();
   733  000CD6  ECC6  F00C         	call	_Timer1_Init	;wreg free
   734                           
   735                           ;main.c: 27:     DS3231_Init();
   736  000CDA  EC1B  F00D         	call	_DS3231_Init	;wreg free
   737                           
   738                           ;main.c: 29:     T0CONbits.TMR0ON = 1;
   739  000CDE  8ED5               	bsf	4053,7,c	;volatile
   740  000CE0                     l3190:
   741                           
   742                           ;main.c: 33:         DS3231_ReadAll(&MyRTC);
   743  000CE0  0E88               	movlw	low _MyRTC
   744  000CE2  6E17               	movwf	DS3231_ReadAll@time,c
   745  000CE4  0E00               	movlw	high _MyRTC
   746  000CE6  6E18               	movwf	DS3231_ReadAll@time+1,c
   747  000CE8  EC89  F007         	call	_DS3231_ReadAll	;wreg free
   748                           
   749                           ;main.c: 35:         if(GetRisingEdge_SW2()) {
   750  000CEC  ECBA  F009         	call	_GetRisingEdge_SW2	;wreg free
   751  000CF0  0900               	iorlw	0
   752  000CF2  B4D8               	btfsc	status,2,c
   753  000CF4  D006               	goto	l3200
   754                           
   755                           ;main.c: 36:             if(PORTEbits.RE0 == 0) Mode = SetRTC;
   756  000CF6  B084               	btfsc	3972,0,c	;volatile
   757  000CF8  D002               	goto	l3198
   758  000CFA  0E03               	movlw	3
   759  000CFC  D001               	goto	L1
   760  000CFE                     l3198:
   761  000CFE  0E04               	movlw	4
   762  000D00                     L1:
   763  000D00  6E3D               	movwf	_Mode,c
   764  000D02                     l3200:
   765                           
   766                           ;main.c: 40:         if(GetRisingEdge_SW1() && (PORTEbits.RE1 == 1)) {
   767  000D02  EC87  F009         	call	_GetRisingEdge_SW1	;wreg free
   768  000D06  0900               	iorlw	0
   769  000D08  A4D8               	btfss	status,2,c
   770  000D0A  A284               	btfss	3972,1,c	;volatile
   771  000D0C  D062               	goto	l3230
   772                           
   773                           ;main.c: 41:             if(Mode++ >= ShowWeek) Mode = ShowTime;
   774  000D0E  2A3D               	incf	_Mode,f,c
   775  000D10  043D               	decf	_Mode,w,c
   776  000D12  6E28               	movwf	??_main& (0+255),c
   777  000D14  0E01               	movlw	1
   778  000D16  6428               	cpfsgt	??_main,c
   779  000D18  D05C               	goto	l3230
   780  000D1A  0E00               	movlw	0
   781  000D1C  6E3D               	movwf	_Mode,c
   782  000D1E  D059               	goto	l3230
   783  000D20                     l3208:
   784  000D20  EE20  F088         	lfsr	2,_MyRTC
   785  000D24  EE00  F016         	lfsr	0,Task_ShowTime@CurrentRTC
   786  000D28  0E06               	movlw	6
   787  000D2A                     u3101:
   788  000D2A  CFDB FFEB          	movff	plusw2,plusw0
   789  000D2E  06E8               	decf	wreg,f,c
   790  000D30  E2FC               	bc	u3101
   791  000D32  EC19  F008         	call	_Task_ShowTime	;wreg free
   792  000D36  D7D4               	goto	l3190
   793  000D38                     l3210:
   794  000D38  EE20  F088         	lfsr	2,_MyRTC
   795  000D3C  EE00  F016         	lfsr	0,Task_ShowDate@CurrentRTC
   796  000D40  0E06               	movlw	6
   797  000D42                     u3111:
   798  000D42  CFDB FFEB          	movff	plusw2,plusw0
   799  000D46  06E8               	decf	wreg,f,c
   800  000D48  E2FC               	bc	u3111
   801  000D4A  EC50  F009         	call	_Task_ShowDate	;wreg free
   802  000D4E  D7C8               	goto	l3190
   803  000D50                     l3212:
   804  000D50  EE20  F088         	lfsr	2,_MyRTC
   805  000D54  EE00  F016         	lfsr	0,Task_ShowWeek@CurrentRTC
   806  000D58  0E06               	movlw	6
   807  000D5A                     u3121:
   808  000D5A  CFDB FFEB          	movff	plusw2,plusw0
   809  000D5E  06E8               	decf	wreg,f,c
   810  000D60  E2FC               	bc	u3121
   811  000D62  EC79  F00B         	call	_Task_ShowWeek	;wreg free
   812  000D66  D7BC               	goto	l3190
   813  000D68                     l3214:
   814                           
   815                           ;main.c: 51:                     Display_Set_NumVal(Dash, Dash, Dash, Dash);
   816  000D68  0E0A               	movlw	10
   817  000D6A  6E12               	movwf	Display_Set_NumVal@digit1_val,c
   818  000D6C  0E0A               	movlw	10
   819  000D6E  6E13               	movwf	Display_Set_NumVal@digit2_val,c
   820  000D70  0E0A               	movlw	10
   821  000D72  6E14               	movwf	Display_Set_NumVal@digit3_val,c
   822  000D74  0E0A               	movlw	10
   823  000D76  ECDA  F00C         	call	_Display_Set_NumVal
   824                           
   825                           ;main.c: 52:                     Display_Set_Point(0, 0, 0, 0);
   826  000D7A  0E00               	movlw	0
   827  000D7C  6E0A               	movwf	Display_Set_Point@digit1_val,c
   828  000D7E  0E00               	movlw	0
   829  000D80  6E0B               	movwf	Display_Set_Point@digit2_val,c
   830  000D82  0E00               	movlw	0
   831  000D84  6E0C               	movwf	Display_Set_Point@digit3_val,c
   832  000D86  0E00               	movlw	0
   833  000D88  ECD0  F00C         	call	_Display_Set_Point
   834  000D8C                     l3216:
   835                           
   836                           ;main.c: 50:                 while(PORTEbits.RE0 == 0) {
   837  000D8C  A084               	btfss	3972,0,c	;volatile
   838  000D8E  D7EC               	goto	l3214
   839                           
   840                           ;main.c: 54:                 _delay((unsigned long)((1000)*(48000000/4000.0)));
   841  000D90  0E3D               	movlw	61
   842  000D92  6E29               	movwf	(??_main+1)& (0+255),c
   843  000D94  0EE1               	movlw	225
   844  000D96  6E28               	movwf	??_main& (0+255),c
   845  000D98  0E40               	movlw	64
   846  000D9A                     u3207:
   847  000D9A  2EE8               	decfsz	wreg,f,c
   848  000D9C  D7FE               	bra	u3207
   849  000D9E  2E28               	decfsz	??_main& (0+255),f,c
   850  000DA0  D7FC               	bra	u3207
   851  000DA2  2E29               	decfsz	(??_main+1)& (0+255),f,c
   852  000DA4  D7FA               	bra	u3207
   853                           
   854                           ;main.c: 55:                 Task_SetRTC(MyRTC);
   855  000DA6  EE20  F088         	lfsr	2,_MyRTC
   856  000DAA  EE00  F01F         	lfsr	0,Task_SetRTC@CurrentRTC
   857  000DAE  0E06               	movlw	6
   858  000DB0                     u3141:
   859  000DB0  CFDB FFEB          	movff	plusw2,plusw0
   860  000DB4  06E8               	decf	wreg,f,c
   861  000DB6  E2FC               	bc	u3141
   862  000DB8  EC08  F004         	call	_Task_SetRTC	;wreg free
   863  000DBC                     l3222:
   864                           
   865                           ;main.c: 56:                 Mode = ShowTime;
   866  000DBC  0E00               	movlw	0
   867  000DBE  6E3D               	movwf	_Mode,c
   868                           
   869                           ;main.c: 57:                 break;
   870  000DC0  D78F               	goto	l3190
   871  000DC2                     l3224:
   872                           
   873                           ;main.c: 60:                     Task_SetBrightness();
   874  000DC2  ECDD  F008         	call	_Task_SetBrightness	;wreg free
   875  000DC6                     l97:
   876                           
   877                           ;main.c: 59:                 while(!GetRisingEdge_SW2()) {
   878  000DC6  ECBA  F009         	call	_GetRisingEdge_SW2	;wreg free
   879  000DCA  0900               	iorlw	0
   880  000DCC  A4D8               	btfss	status,2,c
   881  000DCE  D7F6               	goto	l3222
   882  000DD0  D7F8               	goto	l3224
   883  000DD2                     l3230:
   884  000DD2  503D               	movf	_Mode,w,c
   885  000DD4  6E28               	movwf	??_main& (0+255),c
   886  000DD6  6A29               	clrf	(??_main+1)& (0+255),c
   887                           
   888                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   889                           ; Switch size 1, requested type "simple"
   890                           ; Number of cases is 1, Range of values is 0 to 0
   891                           ; switch strategies available:
   892                           ; Name         Instructions Cycles
   893                           ; simple_byte            4     3 (average)
   894                           ;	Chosen strategy is simple_byte
   895  000DD8  5029               	movf	??_main+1,w,c
   896  000DDA  0A00               	xorlw	0	; case 0
   897  000DDC  A4D8               	btfss	status,2,c
   898  000DDE  D780               	goto	l3190
   899                           
   900                           ; Switch size 1, requested type "simple"
   901                           ; Number of cases is 5, Range of values is 0 to 4
   902                           ; switch strategies available:
   903                           ; Name         Instructions Cycles
   904                           ; simple_byte           16     9 (average)
   905                           ;	Chosen strategy is simple_byte
   906  000DE0  5028               	movf	??_main,w,c
   907  000DE2  0A00               	xorlw	0	; case 0
   908  000DE4  B4D8               	btfsc	status,2,c
   909  000DE6  D79C               	goto	l3208
   910  000DE8  0A01               	xorlw	1	; case 1
   911  000DEA  B4D8               	btfsc	status,2,c
   912  000DEC  D7A5               	goto	l3210
   913  000DEE  0A03               	xorlw	3	; case 2
   914  000DF0  B4D8               	btfsc	status,2,c
   915  000DF2  D7AE               	goto	l3212
   916  000DF4  0A01               	xorlw	1	; case 3
   917  000DF6  B4D8               	btfsc	status,2,c
   918  000DF8  D7C9               	goto	l3216
   919  000DFA  0A07               	xorlw	7	; case 4
   920  000DFC  B4D8               	btfsc	status,2,c
   921  000DFE  D7E3               	goto	l97
   922  000E00  D76F               	goto	l3190
   923  000E02                     __end_of_main:
   924                           	opt callstack 0
   925                           
   926 ;; *************** function _Timer1_Init *****************
   927 ;; Defined at:
   928 ;;		line 187 in file "main.c"
   929 ;; Parameters:    Size  Location     Type
   930 ;;		None
   931 ;; Auto vars:     Size  Location     Type
   932 ;;		None
   933 ;; Return value:  Size  Location     Type
   934 ;;                  1    wreg      void 
   935 ;; Registers used:
   936 ;;		wreg, status,2
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   942 ;;      Params:         0       0       0       0       0       0       0       0       0
   943 ;;      Locals:         0       0       0       0       0       0       0       0       0
   944 ;;      Temps:          0       0       0       0       0       0       0       0       0
   945 ;;      Totals:         0       0       0       0       0       0       0       0       0
   946 ;;Total ram usage:        0 bytes
   947 ;; Hardware stack levels used:    1
   948 ;; Hardware stack levels required when called:    2
   949 ;; This function calls:
   950 ;;		Nothing
   951 ;; This function is called by:
   952 ;;		_main
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           	psect	text1
   957  00198C                     __ptext1:
   958                           	opt callstack 0
   959  00198C                     _Timer1_Init:
   960                           	opt callstack 28
   961                           
   962                           ;main.c: 188:     T1CONbits.RD16 = 1;
   963                           
   964                           ;incstack = 0
   965  00198C  8ECD               	bsf	4045,7,c	;volatile
   966                           
   967                           ;main.c: 189:     T1CONbits.TMR1CS = 0;
   968  00198E  92CD               	bcf	4045,1,c	;volatile
   969                           
   970                           ;main.c: 190:     T1CONbits.T1CKPS = 3;
   971  001990  0E30               	movlw	48
   972  001992  12CD               	iorwf	4045,f,c	;volatile
   973                           
   974                           ;main.c: 191:     TMR1 = 65535 - 1500;
   975  001994  0EFA               	movlw	250
   976  001996  6ECF               	movwf	4047,c	;volatile
   977  001998  0E23               	movlw	35
   978  00199A  6ECE               	movwf	4046,c	;volatile
   979                           
   980                           ;main.c: 192:     T1CONbits.TMR1ON = 1;
   981  00199C  80CD               	bsf	4045,0,c	;volatile
   982  00199E  0012               	return		;funcret
   983  0019A0                     __end_of_Timer1_Init:
   984                           	opt callstack 0
   985                           
   986 ;; *************** function _Timer0_Init *****************
   987 ;; Defined at:
   988 ;;		line 177 in file "main.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;		None
   991 ;; Auto vars:     Size  Location     Type
   992 ;;		None
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      void 
   995 ;; Registers used:
   996 ;;		wreg, status,2
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1002 ;;      Params:         0       0       0       0       0       0       0       0       0
  1003 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1004 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1005 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1006 ;;Total ram usage:        0 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; Hardware stack levels required when called:    2
  1009 ;; This function calls:
  1010 ;;		Nothing
  1011 ;; This function is called by:
  1012 ;;		_main
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           	psect	text2
  1017  00195C                     __ptext2:
  1018                           	opt callstack 0
  1019  00195C                     _Timer0_Init:
  1020                           	opt callstack 28
  1021                           
  1022                           ;main.c: 178:     T0CONbits.T08BIT = 0;
  1023                           
  1024                           ;incstack = 0
  1025  00195C  9CD5               	bcf	4053,6,c	;volatile
  1026                           
  1027                           ;main.c: 179:     T0CONbits.T0CS = 0;
  1028  00195E  9AD5               	bcf	4053,5,c	;volatile
  1029                           
  1030                           ;main.c: 180:     T0CONbits.T0SE = 0;
  1031  001960  98D5               	bcf	4053,4,c	;volatile
  1032                           
  1033                           ;main.c: 181:     T0CONbits.PSA = 0;
  1034  001962  96D5               	bcf	4053,3,c	;volatile
  1035                           
  1036                           ;main.c: 182:     T0CONbits.T0PS = 0;
  1037  001964  0EF8               	movlw	-8
  1038  001966  16D5               	andwf	4053,f,c	;volatile
  1039                           
  1040                           ;main.c: 183:     TMR0 = 65535 - 1500;
  1041  001968  0EFA               	movlw	250
  1042  00196A  6ED7               	movwf	4055,c	;volatile
  1043  00196C  0E23               	movlw	35
  1044  00196E  6ED6               	movwf	4054,c	;volatile
  1045                           
  1046                           ;main.c: 184:     T0CONbits.TMR0ON = 0;
  1047  001970  9ED5               	bcf	4053,7,c	;volatile
  1048  001972  0012               	return		;funcret
  1049  001974                     __end_of_Timer0_Init:
  1050                           	opt callstack 0
  1051                           
  1052 ;; *************** function _Task_ShowWeek *****************
  1053 ;; Defined at:
  1054 ;;		line 127 in file "Task.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;  CurrentRTC      7   21[COMRAM] struct .
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;		None
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      void 
  1061 ;; Registers used:
  1062 ;;		wreg, status,2, status,0, cstack
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1068 ;;      Params:         7       0       0       0       0       0       0       0       0
  1069 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1071 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1072 ;;Total ram usage:        7 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; Hardware stack levels required when called:    3
  1075 ;; This function calls:
  1076 ;;		_Display_Set_NumVal
  1077 ;;		_Display_Set_Point
  1078 ;;		___awmod
  1079 ;; This function is called by:
  1080 ;;		_main
  1081 ;; This function uses a non-reentrant model
  1082 ;;
  1083                           
  1084                           	psect	text3
  1085  0016F2                     __ptext3:
  1086                           	opt callstack 0
  1087  0016F2                     _Task_ShowWeek:
  1088                           	opt callstack 27
  1089                           
  1090                           ;Task.c: 128:     Display_Set_NumVal(Blank, Dash, CurrentRTC.Week % 10, Dash);
  1091                           
  1092                           ;incstack = 0
  1093  0016F2  0E0A               	movlw	10
  1094  0016F4  6E12               	movwf	Display_Set_NumVal@digit1_val,c
  1095  0016F6  C01B  F00A         	movff	Task_ShowWeek@CurrentRTC+5,___awmod@dividend
  1096  0016FA  6A0B               	clrf	___awmod@dividend+1,c
  1097  0016FC  0E00               	movlw	0
  1098  0016FE  6E0D               	movwf	___awmod@divisor+1,c
  1099  001700  0E0A               	movlw	10
  1100  001702  6E0C               	movwf	___awmod@divisor,c
  1101  001704  EC18  F009         	call	___awmod	;wreg free
  1102  001708  500A               	movf	?___awmod,w,c
  1103  00170A  6E13               	movwf	Display_Set_NumVal@digit2_val,c
  1104  00170C  0E0A               	movlw	10
  1105  00170E  6E14               	movwf	Display_Set_NumVal@digit3_val,c
  1106  001710  0E0B               	movlw	11
  1107  001712  ECDA  F00C         	call	_Display_Set_NumVal
  1108                           
  1109                           ;Task.c: 129:     Display_Set_Point(0, 0, 0, 0);
  1110  001716  0E00               	movlw	0
  1111  001718  6E0A               	movwf	Display_Set_Point@digit1_val,c
  1112  00171A  0E00               	movlw	0
  1113  00171C  6E0B               	movwf	Display_Set_Point@digit2_val,c
  1114  00171E  0E00               	movlw	0
  1115  001720  6E0C               	movwf	Display_Set_Point@digit3_val,c
  1116  001722  0E00               	movlw	0
  1117  001724  ECD0  F00C         	call	_Display_Set_Point
  1118  001728  0012               	return		;funcret
  1119  00172A                     __end_of_Task_ShowWeek:
  1120                           	opt callstack 0
  1121                           
  1122 ;; *************** function _Task_ShowTime *****************
  1123 ;; Defined at:
  1124 ;;		line 140 in file "Task.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;  CurrentRTC      7   21[COMRAM] struct .
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;		None
  1129 ;; Return value:  Size  Location     Type
  1130 ;;                  1    wreg      void 
  1131 ;; Registers used:
  1132 ;;		wreg, status,2, status,0, cstack
  1133 ;; Tracked objects:
  1134 ;;		On entry : 0/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1138 ;;      Params:         7       0       0       0       0       0       0       0       0
  1139 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1140 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1141 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1142 ;;Total ram usage:        7 bytes
  1143 ;; Hardware stack levels used:    1
  1144 ;; Hardware stack levels required when called:    3
  1145 ;; This function calls:
  1146 ;;		_Display_Set_NumVal
  1147 ;;		_Display_Set_Point
  1148 ;;		___awdiv
  1149 ;;		___awmod
  1150 ;; This function is called by:
  1151 ;;		_main
  1152 ;; This function uses a non-reentrant model
  1153 ;;
  1154                           
  1155                           	psect	text4
  1156  001032                     __ptext4:
  1157                           	opt callstack 0
  1158  001032                     _Task_ShowTime:
  1159                           	opt callstack 27
  1160                           
  1161                           ;Task.c: 141:     static uint8_t old_sec = 0;;Task.c: 142:     static _Bool Point_blink 
      +                          = 0;;Task.c: 144:     Display_Set_NumVal(CurrentRTC.Hour / 10,
  1162                           
  1163                           ;incstack = 0
  1164  001032  C016  F00A         	movff	Task_ShowTime@CurrentRTC,___awmod@dividend
  1165  001036  6A0B               	clrf	___awmod@dividend+1,c
  1166  001038  0E00               	movlw	0
  1167  00103A  6E0D               	movwf	___awmod@divisor+1,c
  1168  00103C  0E0A               	movlw	10
  1169  00103E  6E0C               	movwf	___awmod@divisor,c
  1170  001040  EC18  F009         	call	___awmod	;wreg free
  1171  001044  500A               	movf	?___awmod,w,c
  1172  001046  6E12               	movwf	Display_Set_NumVal@digit1_val,c
  1173  001048  C017  F00A         	movff	Task_ShowTime@CurrentRTC+1,___awdiv@dividend
  1174  00104C  6A0B               	clrf	___awdiv@dividend+1,c
  1175  00104E  0E00               	movlw	0
  1176  001050  6E0D               	movwf	___awdiv@divisor+1,c
  1177  001052  0E0A               	movlw	10
  1178  001054  6E0C               	movwf	___awdiv@divisor,c
  1179  001056  EC5D  F008         	call	___awdiv	;wreg free
  1180  00105A  500A               	movf	?___awdiv,w,c
  1181  00105C  6E13               	movwf	Display_Set_NumVal@digit2_val,c
  1182  00105E  C017  F00A         	movff	Task_ShowTime@CurrentRTC+1,___awmod@dividend
  1183  001062  6A0B               	clrf	___awmod@dividend+1,c
  1184  001064  0E00               	movlw	0
  1185  001066  6E0D               	movwf	___awmod@divisor+1,c
  1186  001068  0E0A               	movlw	10
  1187  00106A  6E0C               	movwf	___awmod@divisor,c
  1188  00106C  EC18  F009         	call	___awmod	;wreg free
  1189  001070  500A               	movf	?___awmod,w,c
  1190  001072  6E14               	movwf	Display_Set_NumVal@digit3_val,c
  1191  001074  C016  F00A         	movff	Task_ShowTime@CurrentRTC,___awdiv@dividend
  1192  001078  6A0B               	clrf	___awdiv@dividend+1,c
  1193  00107A  0E00               	movlw	0
  1194  00107C  6E0D               	movwf	___awdiv@divisor+1,c
  1195  00107E  0E0A               	movlw	10
  1196  001080  6E0C               	movwf	___awdiv@divisor,c
  1197  001082  EC5D  F008         	call	___awdiv	;wreg free
  1198  001086  500A               	movf	?___awdiv,w,c
  1199  001088  ECDA  F00C         	call	_Display_Set_NumVal
  1200                           
  1201                           ;Task.c: 148:     Display_Set_Point(0, Point_blink, Point_blink, 0);
  1202  00108C  C032  F00A         	movff	Task_ShowTime@Point_blink,Display_Set_Point@digit1_val
  1203  001090  C032  F00B         	movff	Task_ShowTime@Point_blink,Display_Set_Point@digit2_val
  1204  001094  0E00               	movlw	0
  1205  001096  6E0C               	movwf	Display_Set_Point@digit3_val,c
  1206  001098  0E00               	movlw	0
  1207  00109A  ECD0  F00C         	call	_Display_Set_Point
  1208                           
  1209                           ;Task.c: 150:     if(CurrentRTC.Sec != old_sec) {
  1210  00109E  5033               	movf	Task_ShowTime@old_sec,w,c
  1211  0010A0  1818               	xorwf	Task_ShowTime@CurrentRTC+2,w,c
  1212  0010A2  B4D8               	btfsc	status,2,c
  1213  0010A4  0012               	return	
  1214                           
  1215                           ;Task.c: 151:         Point_blink = (Point_blink) ? 0 : 1;
  1216  0010A6  5032               	movf	Task_ShowTime@Point_blink,w,c
  1217  0010A8  A4D8               	btfss	status,2,c
  1218  0010AA  D002               	goto	u2760
  1219  0010AC  0E01               	movlw	1
  1220  0010AE  D001               	goto	u2770
  1221  0010B0                     u2760:
  1222  0010B0  0E00               	movlw	0
  1223  0010B2                     u2770:
  1224  0010B2  6E32               	movwf	Task_ShowTime@Point_blink,c
  1225                           
  1226                           ;Task.c: 152:         old_sec = CurrentRTC.Sec;
  1227  0010B4  C018  F033         	movff	Task_ShowTime@CurrentRTC+2,Task_ShowTime@old_sec
  1228  0010B8  0012               	return		;funcret
  1229  0010BA                     __end_of_Task_ShowTime:
  1230                           	opt callstack 0
  1231                           
  1232 ;; *************** function _Task_ShowDate *****************
  1233 ;; Defined at:
  1234 ;;		line 132 in file "Task.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;  CurrentRTC      7   21[COMRAM] struct .
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;		None
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, status,2, status,0, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1248 ;;      Params:         7       0       0       0       0       0       0       0       0
  1249 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1250 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1251 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1252 ;;Total ram usage:        7 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:    3
  1255 ;; This function calls:
  1256 ;;		_Display_Set_NumVal
  1257 ;;		_Display_Set_Point
  1258 ;;		___awdiv
  1259 ;;		___awmod
  1260 ;; This function is called by:
  1261 ;;		_main
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265                           	psect	text5
  1266  0012A0                     __ptext5:
  1267                           	opt callstack 0
  1268  0012A0                     _Task_ShowDate:
  1269                           	opt callstack 27
  1270                           
  1271                           ;Task.c: 133:     Display_Set_NumVal(CurrentRTC.Month / 10,
  1272                           
  1273                           ;incstack = 0
  1274  0012A0  C01A  F00A         	movff	Task_ShowDate@CurrentRTC+4,___awmod@dividend
  1275  0012A4  6A0B               	clrf	___awmod@dividend+1,c
  1276  0012A6  0E00               	movlw	0
  1277  0012A8  6E0D               	movwf	___awmod@divisor+1,c
  1278  0012AA  0E0A               	movlw	10
  1279  0012AC  6E0C               	movwf	___awmod@divisor,c
  1280  0012AE  EC18  F009         	call	___awmod	;wreg free
  1281  0012B2  500A               	movf	?___awmod,w,c
  1282  0012B4  6E12               	movwf	Display_Set_NumVal@digit1_val,c
  1283  0012B6  C01C  F00A         	movff	Task_ShowDate@CurrentRTC+6,___awdiv@dividend
  1284  0012BA  6A0B               	clrf	___awdiv@dividend+1,c
  1285  0012BC  0E00               	movlw	0
  1286  0012BE  6E0D               	movwf	___awdiv@divisor+1,c
  1287  0012C0  0E0A               	movlw	10
  1288  0012C2  6E0C               	movwf	___awdiv@divisor,c
  1289  0012C4  EC5D  F008         	call	___awdiv	;wreg free
  1290  0012C8  500A               	movf	?___awdiv,w,c
  1291  0012CA  6E13               	movwf	Display_Set_NumVal@digit2_val,c
  1292  0012CC  C01C  F00A         	movff	Task_ShowDate@CurrentRTC+6,___awmod@dividend
  1293  0012D0  6A0B               	clrf	___awmod@dividend+1,c
  1294  0012D2  0E00               	movlw	0
  1295  0012D4  6E0D               	movwf	___awmod@divisor+1,c
  1296  0012D6  0E0A               	movlw	10
  1297  0012D8  6E0C               	movwf	___awmod@divisor,c
  1298  0012DA  EC18  F009         	call	___awmod	;wreg free
  1299  0012DE  500A               	movf	?___awmod,w,c
  1300  0012E0  6E14               	movwf	Display_Set_NumVal@digit3_val,c
  1301  0012E2  C01A  F00A         	movff	Task_ShowDate@CurrentRTC+4,___awdiv@dividend
  1302  0012E6  6A0B               	clrf	___awdiv@dividend+1,c
  1303  0012E8  0E00               	movlw	0
  1304  0012EA  6E0D               	movwf	___awdiv@divisor+1,c
  1305  0012EC  0E0A               	movlw	10
  1306  0012EE  6E0C               	movwf	___awdiv@divisor,c
  1307  0012F0  EC5D  F008         	call	___awdiv	;wreg free
  1308  0012F4  500A               	movf	?___awdiv,w,c
  1309  0012F6  ECDA  F00C         	call	_Display_Set_NumVal
  1310                           
  1311                           ;Task.c: 137:     Display_Set_Point(0, 1, 0, 0);
  1312  0012FA  0E01               	movlw	1
  1313  0012FC  6E0A               	movwf	Display_Set_Point@digit1_val,c
  1314  0012FE  0E00               	movlw	0
  1315  001300  6E0B               	movwf	Display_Set_Point@digit2_val,c
  1316  001302  0E00               	movlw	0
  1317  001304  6E0C               	movwf	Display_Set_Point@digit3_val,c
  1318  001306  0E00               	movlw	0
  1319  001308  ECD0  F00C         	call	_Display_Set_Point
  1320  00130C  0012               	return		;funcret
  1321  00130E                     __end_of_Task_ShowDate:
  1322                           	opt callstack 0
  1323                           
  1324 ;; *************** function _Task_SetRTC *****************
  1325 ;; Defined at:
  1326 ;;		line 37 in file "Task.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;  CurrentRTC      7   30[COMRAM] struct .
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  NewSet          7   25[BANK0 ] struct .
  1331 ;;  seq_cnt         1   24[BANK0 ] unsigned char 
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  1    wreg      void 
  1334 ;; Registers used:
  1335 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1341 ;;      Params:         7       0       0       0       0       0       0       0       0
  1342 ;;      Locals:         0      32       0       0       0       0       0       0       0
  1343 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1344 ;;      Totals:         9      32       0       0       0       0       0       0       0
  1345 ;;Total ram usage:       41 bytes
  1346 ;; Hardware stack levels used:    1
  1347 ;; Hardware stack levels required when called:    7
  1348 ;; This function calls:
  1349 ;;		_DS3231_SetAll
  1350 ;;		_Display_Set_NumVal
  1351 ;;		_Display_Set_Point
  1352 ;;		_GetRisingEdge_SW2
  1353 ;;		_MySystick_ms
  1354 ;;		_Task_IncrementVal
  1355 ;;		___awdiv
  1356 ;;		___awmod
  1357 ;;		_abs
  1358 ;; This function is called by:
  1359 ;;		_main
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           	psect	text6
  1364  000810                     __ptext6:
  1365                           	opt callstack 0
  1366  000810                     _Task_SetRTC:
  1367                           	opt callstack 23
  1368                           
  1369                           ;Task.c: 38:     static int PrevTime = 0;;Task.c: 39:     static _Bool Blink = 0;;Task.c
      +                          : 40:     RTC_t NewSet = CurrentRTC;
  1370                           
  1371                           ;incstack = 0
  1372  000810  EE20  F01F         	lfsr	2,Task_SetRTC@CurrentRTC
  1373  000814  EE10  F079         	lfsr	1,Task_SetRTC@NewSet
  1374  000818  0E06               	movlw	6
  1375  00081A                     u2781:
  1376  00081A  CFDB FFE3          	movff	plusw2,plusw1
  1377  00081E  06E8               	decf	wreg,f,c
  1378  000820  E2FC               	bc	u2781
  1379                           
  1380                           ;Task.c: 41:     uint8_t seq_cnt = 0;
  1381  000822  0E00               	movlw	0
  1382  000824  0100               	movlb	0	; () banked
  1383  000826  6F78               	movwf	Task_SetRTC@seq_cnt& (0+255),b
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;Task.c: 43:     if(NewSet.Hour == 0) NewSet.Hour = 23;
  1387  000828  5179               	movf	Task_SetRTC@NewSet& (0+255),w,b
  1388  00082A  A4D8               	btfss	status,2,c
  1389  00082C  D003               	goto	l3036
  1390                           
  1391                           ; BSR set to: 0
  1392  00082E  0E17               	movlw	23
  1393  000830  6F79               	movwf	Task_SetRTC@NewSet& (0+255),b
  1394  000832  D001               	goto	l3038
  1395  000834                     l3036:
  1396                           
  1397                           ; BSR set to: 0
  1398  000834  0779               	decf	Task_SetRTC@NewSet& (0+255),f,b
  1399  000836                     l3038:
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;Task.c: 45:     NewSet.Sec = 0;
  1403  000836  0E00               	movlw	0
  1404  000838  6F7B               	movwf	(Task_SetRTC@NewSet+2)& (0+255),b
  1405                           
  1406                           ;Task.c: 47:     while(seq_cnt < 6) {
  1407  00083A  D23A               	goto	l3158
  1408  00083C                     l3040:
  1409                           
  1410                           ; BSR set to: 0
  1411                           ;Task.c: 49:         if(abs(MySystick_ms() - PrevTime) >= 150) {
  1412  00083C  EC18  F00A         	call	_MySystick_ms	;wreg free
  1413  000840  0100               	movlb	0	; () banked
  1414  000842  5180               	movf	Task_SetRTC@PrevTime& (0+255),w,b
  1415  000844  5C0E               	subwf	?_MySystick_ms,w,c
  1416  000846  6F60               	movwf	_Task_SetRTC$1853& (0+255),b
  1417  000848  5181               	movf	(Task_SetRTC@PrevTime+1)& (0+255),w,b
  1418  00084A  580F               	subwfb	?_MySystick_ms+1,w,c
  1419  00084C  6F61               	movwf	(_Task_SetRTC$1853+1)& (0+255),b
  1420                           
  1421                           ;Task.c: 49:         if(abs(MySystick_ms() - PrevTime) >= 150) {
  1422  00084E  C060  F00A         	movff	_Task_SetRTC$1853,abs@a
  1423  000852  C061  F00B         	movff	_Task_SetRTC$1853+1,abs@a+1
  1424  000856  ECCA  F00B         	call	_abs	;wreg free
  1425  00085A  BE0B               	btfsc	?_abs+1,7,c
  1426  00085C  D1C8               	goto	l3130
  1427  00085E  500B               	movf	?_abs+1,w,c
  1428  000860  E104               	bnz	u2800
  1429  000862  0E96               	movlw	150
  1430  000864  5C0A               	subwf	?_abs,w,c
  1431  000866  A0D8               	btfss	status,0,c
  1432  000868  D1C2               	goto	l3130
  1433  00086A                     u2800:
  1434                           
  1435                           ;Task.c: 50:             PrevTime = MySystick_ms();
  1436  00086A  EC18  F00A         	call	_MySystick_ms	;wreg free
  1437  00086E  C00E  F080         	movff	?_MySystick_ms,Task_SetRTC@PrevTime
  1438  000872  C00F  F081         	movff	?_MySystick_ms+1,Task_SetRTC@PrevTime+1
  1439                           
  1440                           ;Task.c: 51:             Blink = (Blink) ? 0 : 1;
  1441  000876  5034               	movf	Task_SetRTC@Blink,w,c
  1442  000878  A4D8               	btfss	status,2,c
  1443  00087A  D002               	goto	u2810
  1444  00087C  0E01               	movlw	1
  1445  00087E  D001               	goto	u2820
  1446  000880                     u2810:
  1447  000880  0E00               	movlw	0
  1448  000882                     u2820:
  1449  000882  6E34               	movwf	Task_SetRTC@Blink,c
  1450  000884  D1B4               	goto	l3130
  1451  000886                     l3046:
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;Task.c: 56:                 Task_IncrementVal(&NewSet.Hour, 0, 23);
  1455  000886  0E79               	movlw	low Task_SetRTC@NewSet
  1456  000888  6E17               	movwf	Task_IncrementVal@targetVal,c
  1457  00088A  0E00               	movlw	high Task_SetRTC@NewSet
  1458  00088C  6E18               	movwf	Task_IncrementVal@targetVal+1,c
  1459  00088E  0E00               	movlw	0
  1460  000890  6E19               	movwf	Task_IncrementVal@minVal,c
  1461  000892  0E17               	movlw	23
  1462  000894  6E1A               	movwf	Task_IncrementVal@maxVal,c
  1463  000896  ECD3  F007         	call	_Task_IncrementVal	;wreg free
  1464                           
  1465                           ;Task.c: 57:                 Display_Set_NumVal((Blink) ? (NewSet.Hour / 10) : Blank,
  1466  00089A  5034               	movf	Task_SetRTC@Blink,w,c
  1467  00089C  A4D8               	btfss	status,2,c
  1468  00089E  D006               	goto	l3052
  1469  0008A0  0E00               	movlw	0
  1470  0008A2  0100               	movlb	0	; () banked
  1471  0008A4  6F63               	movwf	(_Task_SetRTC$1130+1)& (0+255),b
  1472  0008A6  0E0B               	movlw	11
  1473  0008A8  6F62               	movwf	_Task_SetRTC$1130& (0+255),b
  1474  0008AA  D00D               	goto	l3054
  1475  0008AC                     l3052:
  1476  0008AC  C079  F00A         	movff	Task_SetRTC@NewSet,___awmod@dividend
  1477  0008B0  6A0B               	clrf	___awmod@dividend+1,c
  1478  0008B2  0E00               	movlw	0
  1479  0008B4  6E0D               	movwf	___awmod@divisor+1,c
  1480  0008B6  0E0A               	movlw	10
  1481  0008B8  6E0C               	movwf	___awmod@divisor,c
  1482  0008BA  EC18  F009         	call	___awmod	;wreg free
  1483  0008BE  C00A  F062         	movff	?___awmod,_Task_SetRTC$1130
  1484  0008C2  C00B  F063         	movff	?___awmod+1,_Task_SetRTC$1130+1
  1485  0008C6                     l3054:
  1486  0008C6  5034               	movf	Task_SetRTC@Blink,w,c
  1487  0008C8  A4D8               	btfss	status,2,c
  1488  0008CA  D006               	goto	l3058
  1489  0008CC  0E00               	movlw	0
  1490  0008CE  0100               	movlb	0	; () banked
  1491  0008D0  6F65               	movwf	(_Task_SetRTC$1131+1)& (0+255),b
  1492  0008D2  0E0B               	movlw	11
  1493  0008D4  6F64               	movwf	_Task_SetRTC$1131& (0+255),b
  1494  0008D6  D00D               	goto	l402
  1495  0008D8                     l3058:
  1496  0008D8  C079  F00A         	movff	Task_SetRTC@NewSet,___awdiv@dividend
  1497  0008DC  6A0B               	clrf	___awdiv@dividend+1,c
  1498  0008DE  0E00               	movlw	0
  1499  0008E0  6E0D               	movwf	___awdiv@divisor+1,c
  1500  0008E2  0E0A               	movlw	10
  1501  0008E4  6E0C               	movwf	___awdiv@divisor,c
  1502  0008E6  EC5D  F008         	call	___awdiv	;wreg free
  1503  0008EA  C00A  F064         	movff	?___awdiv,_Task_SetRTC$1131
  1504  0008EE  C00B  F065         	movff	?___awdiv+1,_Task_SetRTC$1131+1
  1505  0008F2                     l402:
  1506  0008F2  C062  F012         	movff	_Task_SetRTC$1130,Display_Set_NumVal@digit1_val
  1507  0008F6  C07A  F00A         	movff	Task_SetRTC@NewSet+1,___awdiv@dividend
  1508  0008FA  6A0B               	clrf	___awdiv@dividend+1,c
  1509  0008FC  0E00               	movlw	0
  1510  0008FE  6E0D               	movwf	___awdiv@divisor+1,c
  1511  000900  0E0A               	movlw	10
  1512  000902  6E0C               	movwf	___awdiv@divisor,c
  1513  000904  EC5D  F008         	call	___awdiv	;wreg free
  1514  000908  500A               	movf	?___awdiv,w,c
  1515  00090A  6E13               	movwf	Display_Set_NumVal@digit2_val,c
  1516  00090C  C07A  F00A         	movff	Task_SetRTC@NewSet+1,___awmod@dividend
  1517  000910  6A0B               	clrf	___awmod@dividend+1,c
  1518  000912  0E00               	movlw	0
  1519  000914  6E0D               	movwf	___awmod@divisor+1,c
  1520  000916  0E0A               	movlw	10
  1521  000918  6E0C               	movwf	___awmod@divisor,c
  1522  00091A  EC18  F009         	call	___awmod	;wreg free
  1523  00091E  500A               	movf	?___awmod,w,c
  1524  000920  6E14               	movwf	Display_Set_NumVal@digit3_val,c
  1525  000922  0100               	movlb	0	; () banked
  1526  000924  5164               	movf	_Task_SetRTC$1131& (0+255),w,b
  1527  000926  ECDA  F00C         	call	_Display_Set_NumVal
  1528                           
  1529                           ;Task.c: 61:                 break;
  1530  00092A  D17C               	goto	l3132
  1531  00092C                     l3060:
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;Task.c: 64:                 Task_IncrementVal(&NewSet.Min, 0, 59);
  1535  00092C  0E7A               	movlw	low (Task_SetRTC@NewSet+1)
  1536  00092E  6E17               	movwf	Task_IncrementVal@targetVal,c
  1537  000930  0E00               	movlw	high (Task_SetRTC@NewSet+1)
  1538  000932  6E18               	movwf	Task_IncrementVal@targetVal+1,c
  1539  000934  0E00               	movlw	0
  1540  000936  6E19               	movwf	Task_IncrementVal@minVal,c
  1541  000938  0E3B               	movlw	59
  1542  00093A  6E1A               	movwf	Task_IncrementVal@maxVal,c
  1543  00093C  ECD3  F007         	call	_Task_IncrementVal	;wreg free
  1544                           
  1545                           ;Task.c: 65:                 Display_Set_NumVal(NewSet.Hour / 10,
  1546  000940  5034               	movf	Task_SetRTC@Blink,w,c
  1547  000942  A4D8               	btfss	status,2,c
  1548  000944  D006               	goto	l3066
  1549  000946  0E00               	movlw	0
  1550  000948  0100               	movlb	0	; () banked
  1551  00094A  6F67               	movwf	(_Task_SetRTC$1132+1)& (0+255),b
  1552  00094C  0E0B               	movlw	11
  1553  00094E  6F66               	movwf	_Task_SetRTC$1132& (0+255),b
  1554  000950  D00D               	goto	l3068
  1555  000952                     l3066:
  1556  000952  C07A  F00A         	movff	Task_SetRTC@NewSet+1,___awmod@dividend
  1557  000956  6A0B               	clrf	___awmod@dividend+1,c
  1558  000958  0E00               	movlw	0
  1559  00095A  6E0D               	movwf	___awmod@divisor+1,c
  1560  00095C  0E0A               	movlw	10
  1561  00095E  6E0C               	movwf	___awmod@divisor,c
  1562  000960  EC18  F009         	call	___awmod	;wreg free
  1563  000964  C00A  F066         	movff	?___awmod,_Task_SetRTC$1132
  1564  000968  C00B  F067         	movff	?___awmod+1,_Task_SetRTC$1132+1
  1565  00096C                     l3068:
  1566  00096C  5034               	movf	Task_SetRTC@Blink,w,c
  1567  00096E  A4D8               	btfss	status,2,c
  1568  000970  D006               	goto	l3072
  1569  000972  0E00               	movlw	0
  1570  000974  0100               	movlb	0	; () banked
  1571  000976  6F69               	movwf	(_Task_SetRTC$1133+1)& (0+255),b
  1572  000978  0E0B               	movlw	11
  1573  00097A  6F68               	movwf	_Task_SetRTC$1133& (0+255),b
  1574  00097C  D00D               	goto	l412
  1575  00097E                     l3072:
  1576  00097E  C07A  F00A         	movff	Task_SetRTC@NewSet+1,___awdiv@dividend
  1577  000982  6A0B               	clrf	___awdiv@dividend+1,c
  1578  000984  0E00               	movlw	0
  1579  000986  6E0D               	movwf	___awdiv@divisor+1,c
  1580  000988  0E0A               	movlw	10
  1581  00098A  6E0C               	movwf	___awdiv@divisor,c
  1582  00098C  EC5D  F008         	call	___awdiv	;wreg free
  1583  000990  C00A  F068         	movff	?___awdiv,_Task_SetRTC$1133
  1584  000994  C00B  F069         	movff	?___awdiv+1,_Task_SetRTC$1133+1
  1585  000998                     l412:
  1586  000998  C079  F00A         	movff	Task_SetRTC@NewSet,___awmod@dividend
  1587  00099C  6A0B               	clrf	___awmod@dividend+1,c
  1588  00099E  0E00               	movlw	0
  1589  0009A0  6E0D               	movwf	___awmod@divisor+1,c
  1590  0009A2  0E0A               	movlw	10
  1591  0009A4  6E0C               	movwf	___awmod@divisor,c
  1592  0009A6  EC18  F009         	call	___awmod	;wreg free
  1593  0009AA  500A               	movf	?___awmod,w,c
  1594  0009AC  6E12               	movwf	Display_Set_NumVal@digit1_val,c
  1595  0009AE  C068  F013         	movff	_Task_SetRTC$1133,Display_Set_NumVal@digit2_val
  1596  0009B2  C066  F014         	movff	_Task_SetRTC$1132,Display_Set_NumVal@digit3_val
  1597  0009B6  C079  F00A         	movff	Task_SetRTC@NewSet,___awdiv@dividend
  1598  0009BA  6A0B               	clrf	___awdiv@dividend+1,c
  1599  0009BC  0E00               	movlw	0
  1600  0009BE  6E0D               	movwf	___awdiv@divisor+1,c
  1601  0009C0  0E0A               	movlw	10
  1602  0009C2  6E0C               	movwf	___awdiv@divisor,c
  1603  0009C4  EC5D  F008         	call	___awdiv	;wreg free
  1604  0009C8  500A               	movf	?___awdiv,w,c
  1605  0009CA  ECDA  F00C         	call	_Display_Set_NumVal
  1606                           
  1607                           ;Task.c: 69:                 break;
  1608  0009CE  D12A               	goto	l3132
  1609  0009D0                     l3074:
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;Task.c: 72:                 Task_IncrementVal(&NewSet.Year, 0, 99);
  1613  0009D0  0E7C               	movlw	low (Task_SetRTC@NewSet+3)
  1614  0009D2  6E17               	movwf	Task_IncrementVal@targetVal,c
  1615  0009D4  0E00               	movlw	high (Task_SetRTC@NewSet+3)
  1616  0009D6  6E18               	movwf	Task_IncrementVal@targetVal+1,c
  1617  0009D8  0E00               	movlw	0
  1618  0009DA  6E19               	movwf	Task_IncrementVal@minVal,c
  1619  0009DC  0E63               	movlw	99
  1620  0009DE  6E1A               	movwf	Task_IncrementVal@maxVal,c
  1621  0009E0  ECD3  F007         	call	_Task_IncrementVal	;wreg free
  1622                           
  1623                           ;Task.c: 73:                 Display_Set_NumVal(2, 0,
  1624  0009E4  5034               	movf	Task_SetRTC@Blink,w,c
  1625  0009E6  A4D8               	btfss	status,2,c
  1626  0009E8  D006               	goto	l3080
  1627  0009EA  0E00               	movlw	0
  1628  0009EC  0100               	movlb	0	; () banked
  1629  0009EE  6F6B               	movwf	(_Task_SetRTC$1134+1)& (0+255),b
  1630  0009F0  0E0B               	movlw	11
  1631  0009F2  6F6A               	movwf	_Task_SetRTC$1134& (0+255),b
  1632  0009F4  D00D               	goto	l3082
  1633  0009F6                     l3080:
  1634  0009F6  C07C  F00A         	movff	Task_SetRTC@NewSet+3,___awmod@dividend
  1635  0009FA  6A0B               	clrf	___awmod@dividend+1,c
  1636  0009FC  0E00               	movlw	0
  1637  0009FE  6E0D               	movwf	___awmod@divisor+1,c
  1638  000A00  0E0A               	movlw	10
  1639  000A02  6E0C               	movwf	___awmod@divisor,c
  1640  000A04  EC18  F009         	call	___awmod	;wreg free
  1641  000A08  C00A  F06A         	movff	?___awmod,_Task_SetRTC$1134
  1642  000A0C  C00B  F06B         	movff	?___awmod+1,_Task_SetRTC$1134+1
  1643  000A10                     l3082:
  1644  000A10  5034               	movf	Task_SetRTC@Blink,w,c
  1645  000A12  A4D8               	btfss	status,2,c
  1646  000A14  D006               	goto	l3086
  1647  000A16  0E00               	movlw	0
  1648  000A18  0100               	movlb	0	; () banked
  1649  000A1A  6F6D               	movwf	(_Task_SetRTC$1135+1)& (0+255),b
  1650  000A1C  0E0B               	movlw	11
  1651  000A1E  6F6C               	movwf	_Task_SetRTC$1135& (0+255),b
  1652  000A20  D00D               	goto	l3088
  1653  000A22                     l3086:
  1654  000A22  C07C  F00A         	movff	Task_SetRTC@NewSet+3,___awdiv@dividend
  1655  000A26  6A0B               	clrf	___awdiv@dividend+1,c
  1656  000A28  0E00               	movlw	0
  1657  000A2A  6E0D               	movwf	___awdiv@divisor+1,c
  1658  000A2C  0E0A               	movlw	10
  1659  000A2E  6E0C               	movwf	___awdiv@divisor,c
  1660  000A30  EC5D  F008         	call	___awdiv	;wreg free
  1661  000A34  C00A  F06C         	movff	?___awdiv,_Task_SetRTC$1135
  1662  000A38  C00B  F06D         	movff	?___awdiv+1,_Task_SetRTC$1135+1
  1663  000A3C                     l3088:
  1664  000A3C  0E00               	movlw	0
  1665  000A3E  6E12               	movwf	Display_Set_NumVal@digit1_val,c
  1666  000A40  C06C  F013         	movff	_Task_SetRTC$1135,Display_Set_NumVal@digit2_val
  1667  000A44  C06A  F014         	movff	_Task_SetRTC$1134,Display_Set_NumVal@digit3_val
  1668  000A48  0E02               	movlw	2
  1669  000A4A  ECDA  F00C         	call	_Display_Set_NumVal
  1670                           
  1671                           ;Task.c: 76:                 break;
  1672  000A4E  D0EA               	goto	l3132
  1673  000A50                     l3090:
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;Task.c: 79:                 Task_IncrementVal(&NewSet.Month, 1, 12);
  1677  000A50  0E7D               	movlw	low (Task_SetRTC@NewSet+4)
  1678  000A52  6E17               	movwf	Task_IncrementVal@targetVal,c
  1679  000A54  0E00               	movlw	high (Task_SetRTC@NewSet+4)
  1680  000A56  6E18               	movwf	Task_IncrementVal@targetVal+1,c
  1681  000A58  0E01               	movlw	1
  1682  000A5A  6E19               	movwf	Task_IncrementVal@minVal,c
  1683  000A5C  0E0C               	movlw	12
  1684  000A5E  6E1A               	movwf	Task_IncrementVal@maxVal,c
  1685  000A60  ECD3  F007         	call	_Task_IncrementVal	;wreg free
  1686                           
  1687                           ;Task.c: 80:                 Display_Set_NumVal((Blink) ? (NewSet.Month / 10) : Blank,
  1688  000A64  5034               	movf	Task_SetRTC@Blink,w,c
  1689  000A66  A4D8               	btfss	status,2,c
  1690  000A68  D006               	goto	l3096
  1691  000A6A  0E00               	movlw	0
  1692  000A6C  0100               	movlb	0	; () banked
  1693  000A6E  6F6F               	movwf	(_Task_SetRTC$1136+1)& (0+255),b
  1694  000A70  0E0B               	movlw	11
  1695  000A72  6F6E               	movwf	_Task_SetRTC$1136& (0+255),b
  1696  000A74  D00D               	goto	l3098
  1697  000A76                     l3096:
  1698  000A76  C07D  F00A         	movff	Task_SetRTC@NewSet+4,___awmod@dividend
  1699  000A7A  6A0B               	clrf	___awmod@dividend+1,c
  1700  000A7C  0E00               	movlw	0
  1701  000A7E  6E0D               	movwf	___awmod@divisor+1,c
  1702  000A80  0E0A               	movlw	10
  1703  000A82  6E0C               	movwf	___awmod@divisor,c
  1704  000A84  EC18  F009         	call	___awmod	;wreg free
  1705  000A88  C00A  F06E         	movff	?___awmod,_Task_SetRTC$1136
  1706  000A8C  C00B  F06F         	movff	?___awmod+1,_Task_SetRTC$1136+1
  1707  000A90                     l3098:
  1708  000A90  5034               	movf	Task_SetRTC@Blink,w,c
  1709  000A92  A4D8               	btfss	status,2,c
  1710  000A94  D006               	goto	l3102
  1711  000A96  0E00               	movlw	0
  1712  000A98  0100               	movlb	0	; () banked
  1713  000A9A  6F71               	movwf	(_Task_SetRTC$1137+1)& (0+255),b
  1714  000A9C  0E0B               	movlw	11
  1715  000A9E  6F70               	movwf	_Task_SetRTC$1137& (0+255),b
  1716  000AA0  D00D               	goto	l430
  1717  000AA2                     l3102:
  1718  000AA2  C07D  F00A         	movff	Task_SetRTC@NewSet+4,___awdiv@dividend
  1719  000AA6  6A0B               	clrf	___awdiv@dividend+1,c
  1720  000AA8  0E00               	movlw	0
  1721  000AAA  6E0D               	movwf	___awdiv@divisor+1,c
  1722  000AAC  0E0A               	movlw	10
  1723  000AAE  6E0C               	movwf	___awdiv@divisor,c
  1724  000AB0  EC5D  F008         	call	___awdiv	;wreg free
  1725  000AB4  C00A  F070         	movff	?___awdiv,_Task_SetRTC$1137
  1726  000AB8  C00B  F071         	movff	?___awdiv+1,_Task_SetRTC$1137+1
  1727  000ABC                     l430:
  1728  000ABC  C06E  F012         	movff	_Task_SetRTC$1136,Display_Set_NumVal@digit1_val
  1729  000AC0  C07F  F00A         	movff	Task_SetRTC@NewSet+6,___awdiv@dividend
  1730  000AC4  6A0B               	clrf	___awdiv@dividend+1,c
  1731  000AC6  0E00               	movlw	0
  1732  000AC8  6E0D               	movwf	___awdiv@divisor+1,c
  1733  000ACA  0E0A               	movlw	10
  1734  000ACC  6E0C               	movwf	___awdiv@divisor,c
  1735  000ACE  EC5D  F008         	call	___awdiv	;wreg free
  1736  000AD2  500A               	movf	?___awdiv,w,c
  1737  000AD4  6E13               	movwf	Display_Set_NumVal@digit2_val,c
  1738  000AD6  C07F  F00A         	movff	Task_SetRTC@NewSet+6,___awmod@dividend
  1739  000ADA  6A0B               	clrf	___awmod@dividend+1,c
  1740  000ADC  0E00               	movlw	0
  1741  000ADE  6E0D               	movwf	___awmod@divisor+1,c
  1742  000AE0  0E0A               	movlw	10
  1743  000AE2  6E0C               	movwf	___awmod@divisor,c
  1744  000AE4  EC18  F009         	call	___awmod	;wreg free
  1745  000AE8  500A               	movf	?___awmod,w,c
  1746  000AEA  6E14               	movwf	Display_Set_NumVal@digit3_val,c
  1747  000AEC  0100               	movlb	0	; () banked
  1748  000AEE  5170               	movf	_Task_SetRTC$1137& (0+255),w,b
  1749  000AF0  ECDA  F00C         	call	_Display_Set_NumVal
  1750                           
  1751                           ;Task.c: 84:                 break;
  1752  000AF4  D097               	goto	l3132
  1753  000AF6                     l3104:
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;Task.c: 87:                 Task_IncrementVal(&NewSet.Date, 1, 31);
  1757  000AF6  0E7F               	movlw	low (Task_SetRTC@NewSet+6)
  1758  000AF8  6E17               	movwf	Task_IncrementVal@targetVal,c
  1759  000AFA  0E00               	movlw	high (Task_SetRTC@NewSet+6)
  1760  000AFC  6E18               	movwf	Task_IncrementVal@targetVal+1,c
  1761  000AFE  0E01               	movlw	1
  1762  000B00  6E19               	movwf	Task_IncrementVal@minVal,c
  1763  000B02  0E1F               	movlw	31
  1764  000B04  6E1A               	movwf	Task_IncrementVal@maxVal,c
  1765  000B06  ECD3  F007         	call	_Task_IncrementVal	;wreg free
  1766                           
  1767                           ;Task.c: 88:                 Display_Set_NumVal(NewSet.Month / 10,
  1768  000B0A  5034               	movf	Task_SetRTC@Blink,w,c
  1769  000B0C  A4D8               	btfss	status,2,c
  1770  000B0E  D006               	goto	l3110
  1771  000B10  0E00               	movlw	0
  1772  000B12  0100               	movlb	0	; () banked
  1773  000B14  6F73               	movwf	(_Task_SetRTC$1138+1)& (0+255),b
  1774  000B16  0E0B               	movlw	11
  1775  000B18  6F72               	movwf	_Task_SetRTC$1138& (0+255),b
  1776  000B1A  D00D               	goto	l3112
  1777  000B1C                     l3110:
  1778  000B1C  C07F  F00A         	movff	Task_SetRTC@NewSet+6,___awmod@dividend
  1779  000B20  6A0B               	clrf	___awmod@dividend+1,c
  1780  000B22  0E00               	movlw	0
  1781  000B24  6E0D               	movwf	___awmod@divisor+1,c
  1782  000B26  0E0A               	movlw	10
  1783  000B28  6E0C               	movwf	___awmod@divisor,c
  1784  000B2A  EC18  F009         	call	___awmod	;wreg free
  1785  000B2E  C00A  F072         	movff	?___awmod,_Task_SetRTC$1138
  1786  000B32  C00B  F073         	movff	?___awmod+1,_Task_SetRTC$1138+1
  1787  000B36                     l3112:
  1788  000B36  5034               	movf	Task_SetRTC@Blink,w,c
  1789  000B38  A4D8               	btfss	status,2,c
  1790  000B3A  D006               	goto	l3116
  1791  000B3C  0E00               	movlw	0
  1792  000B3E  0100               	movlb	0	; () banked
  1793  000B40  6F75               	movwf	(_Task_SetRTC$1139+1)& (0+255),b
  1794  000B42  0E0B               	movlw	11
  1795  000B44  6F74               	movwf	_Task_SetRTC$1139& (0+255),b
  1796  000B46  D00D               	goto	l439
  1797  000B48                     l3116:
  1798  000B48  C07F  F00A         	movff	Task_SetRTC@NewSet+6,___awdiv@dividend
  1799  000B4C  6A0B               	clrf	___awdiv@dividend+1,c
  1800  000B4E  0E00               	movlw	0
  1801  000B50  6E0D               	movwf	___awdiv@divisor+1,c
  1802  000B52  0E0A               	movlw	10
  1803  000B54  6E0C               	movwf	___awdiv@divisor,c
  1804  000B56  EC5D  F008         	call	___awdiv	;wreg free
  1805  000B5A  C00A  F074         	movff	?___awdiv,_Task_SetRTC$1139
  1806  000B5E  C00B  F075         	movff	?___awdiv+1,_Task_SetRTC$1139+1
  1807  000B62                     l439:
  1808  000B62  C07D  F00A         	movff	Task_SetRTC@NewSet+4,___awmod@dividend
  1809  000B66  6A0B               	clrf	___awmod@dividend+1,c
  1810  000B68  0E00               	movlw	0
  1811  000B6A  6E0D               	movwf	___awmod@divisor+1,c
  1812  000B6C  0E0A               	movlw	10
  1813  000B6E  6E0C               	movwf	___awmod@divisor,c
  1814  000B70  EC18  F009         	call	___awmod	;wreg free
  1815  000B74  500A               	movf	?___awmod,w,c
  1816  000B76  6E12               	movwf	Display_Set_NumVal@digit1_val,c
  1817  000B78  C074  F013         	movff	_Task_SetRTC$1139,Display_Set_NumVal@digit2_val
  1818  000B7C  C072  F014         	movff	_Task_SetRTC$1138,Display_Set_NumVal@digit3_val
  1819  000B80  C07D  F00A         	movff	Task_SetRTC@NewSet+4,___awdiv@dividend
  1820  000B84  6A0B               	clrf	___awdiv@dividend+1,c
  1821  000B86  0E00               	movlw	0
  1822  000B88  6E0D               	movwf	___awdiv@divisor+1,c
  1823  000B8A  0E0A               	movlw	10
  1824  000B8C  6E0C               	movwf	___awdiv@divisor,c
  1825  000B8E  EC5D  F008         	call	___awdiv	;wreg free
  1826  000B92  500A               	movf	?___awdiv,w,c
  1827  000B94  ECDA  F00C         	call	_Display_Set_NumVal
  1828                           
  1829                           ;Task.c: 92:                 break;
  1830  000B98  D045               	goto	l3132
  1831  000B9A                     l3118:
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;Task.c: 95:                 Task_IncrementVal(&NewSet.Week, 1, 7);
  1835  000B9A  0E7E               	movlw	low (Task_SetRTC@NewSet+5)
  1836  000B9C  6E17               	movwf	Task_IncrementVal@targetVal,c
  1837  000B9E  0E00               	movlw	high (Task_SetRTC@NewSet+5)
  1838  000BA0  6E18               	movwf	Task_IncrementVal@targetVal+1,c
  1839  000BA2  0E01               	movlw	1
  1840  000BA4  6E19               	movwf	Task_IncrementVal@minVal,c
  1841  000BA6  0E07               	movlw	7
  1842  000BA8  6E1A               	movwf	Task_IncrementVal@maxVal,c
  1843  000BAA  ECD3  F007         	call	_Task_IncrementVal	;wreg free
  1844                           
  1845                           ;Task.c: 96:                 Display_Set_NumVal(Blank, Dash,
  1846  000BAE  5034               	movf	Task_SetRTC@Blink,w,c
  1847  000BB0  A4D8               	btfss	status,2,c
  1848  000BB2  D006               	goto	l3124
  1849  000BB4  0E00               	movlw	0
  1850  000BB6  0100               	movlb	0	; () banked
  1851  000BB8  6F77               	movwf	(_Task_SetRTC$1140+1)& (0+255),b
  1852  000BBA  0E0B               	movlw	11
  1853  000BBC  6F76               	movwf	_Task_SetRTC$1140& (0+255),b
  1854  000BBE  D00D               	goto	l3126
  1855  000BC0                     l3124:
  1856  000BC0  C07E  F00A         	movff	Task_SetRTC@NewSet+5,___awmod@dividend
  1857  000BC4  6A0B               	clrf	___awmod@dividend+1,c
  1858  000BC6  0E00               	movlw	0
  1859  000BC8  6E0D               	movwf	___awmod@divisor+1,c
  1860  000BCA  0E0A               	movlw	10
  1861  000BCC  6E0C               	movwf	___awmod@divisor,c
  1862  000BCE  EC18  F009         	call	___awmod	;wreg free
  1863  000BD2  C00A  F076         	movff	?___awmod,_Task_SetRTC$1140
  1864  000BD6  C00B  F077         	movff	?___awmod+1,_Task_SetRTC$1140+1
  1865  000BDA                     l3126:
  1866  000BDA  0E0A               	movlw	10
  1867  000BDC  6E12               	movwf	Display_Set_NumVal@digit1_val,c
  1868  000BDE  C076  F013         	movff	_Task_SetRTC$1140,Display_Set_NumVal@digit2_val
  1869  000BE2  0E0A               	movlw	10
  1870  000BE4  6E14               	movwf	Display_Set_NumVal@digit3_val,c
  1871  000BE6  0E0B               	movlw	11
  1872  000BE8  ECDA  F00C         	call	_Display_Set_NumVal
  1873                           
  1874                           ;Task.c: 99:                 break;
  1875  000BEC  D01B               	goto	l3132
  1876  000BEE                     l3130:
  1877  000BEE  0100               	movlb	0	; () banked
  1878  000BF0  5178               	movf	Task_SetRTC@seq_cnt& (0+255),w,b
  1879  000BF2  6E26               	movwf	??_Task_SetRTC& (0+255),c
  1880  000BF4  6A27               	clrf	(??_Task_SetRTC+1)& (0+255),c
  1881                           
  1882                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1883                           ; Switch size 1, requested type "simple"
  1884                           ; Number of cases is 1, Range of values is 0 to 0
  1885                           ; switch strategies available:
  1886                           ; Name         Instructions Cycles
  1887                           ; simple_byte            4     3 (average)
  1888                           ;	Chosen strategy is simple_byte
  1889  000BF6  5027               	movf	??_Task_SetRTC+1,w,c
  1890  000BF8  0A00               	xorlw	0	; case 0
  1891  000BFA  A4D8               	btfss	status,2,c
  1892  000BFC  D013               	goto	l3132
  1893                           
  1894                           ; BSR set to: 0
  1895                           ; Switch size 1, requested type "simple"
  1896                           ; Number of cases is 6, Range of values is 0 to 5
  1897                           ; switch strategies available:
  1898                           ; Name         Instructions Cycles
  1899                           ; simple_byte           19    10 (average)
  1900                           ;	Chosen strategy is simple_byte
  1901  000BFE  5026               	movf	??_Task_SetRTC,w,c
  1902  000C00  0A00               	xorlw	0	; case 0
  1903  000C02  B4D8               	btfsc	status,2,c
  1904  000C04  D640               	goto	l3046
  1905  000C06  0A01               	xorlw	1	; case 1
  1906  000C08  B4D8               	btfsc	status,2,c
  1907  000C0A  D690               	goto	l3060
  1908  000C0C  0A03               	xorlw	3	; case 2
  1909  000C0E  B4D8               	btfsc	status,2,c
  1910  000C10  D6DF               	goto	l3074
  1911  000C12  0A01               	xorlw	1	; case 3
  1912  000C14  B4D8               	btfsc	status,2,c
  1913  000C16  D71C               	goto	l3090
  1914  000C18  0A07               	xorlw	7	; case 4
  1915  000C1A  B4D8               	btfsc	status,2,c
  1916  000C1C  D76C               	goto	l3104
  1917  000C1E  0A01               	xorlw	1	; case 5
  1918  000C20  B4D8               	btfsc	status,2,c
  1919  000C22  D7BB               	goto	l3118
  1920  000C24                     l3132:
  1921                           
  1922                           ;Task.c: 105:         if(seq_cnt==0 || seq_cnt==1) {
  1923  000C24  0100               	movlb	0	; () banked
  1924  000C26  5178               	movf	Task_SetRTC@seq_cnt& (0+255),w,b
  1925  000C28  B4D8               	btfsc	status,2,c
  1926  000C2A  D003               	goto	u2950
  1927                           
  1928                           ; BSR set to: 0
  1929  000C2C  0578               	decf	Task_SetRTC@seq_cnt& (0+255),w,b
  1930  000C2E  A4D8               	btfss	status,2,c
  1931  000C30  D00A               	goto	l3138
  1932  000C32                     u2950:
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;Task.c: 106:             Display_Set_Point(0, 1, 1, 0);
  1936  000C32  0E01               	movlw	1
  1937  000C34  6E0A               	movwf	Display_Set_Point@digit1_val,c
  1938  000C36  0E01               	movlw	1
  1939  000C38  6E0B               	movwf	Display_Set_Point@digit2_val,c
  1940  000C3A  0E00               	movlw	0
  1941  000C3C  6E0C               	movwf	Display_Set_Point@digit3_val,c
  1942  000C3E  0E00               	movlw	0
  1943  000C40  ECD0  F00C         	call	_Display_Set_Point
  1944                           
  1945                           ;Task.c: 107:         }
  1946  000C44  D02D               	goto	l451
  1947  000C46                     l3138:
  1948                           
  1949                           ; BSR set to: 0
  1950  000C46  0E02               	movlw	2
  1951  000C48  1978               	xorwf	Task_SetRTC@seq_cnt& (0+255),w,b
  1952  000C4A  A4D8               	btfss	status,2,c
  1953  000C4C  D00A               	goto	l3142
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;Task.c: 110:             Display_Set_Point(0, 0, 0, 0);
  1957  000C4E  0E00               	movlw	0
  1958  000C50  6E0A               	movwf	Display_Set_Point@digit1_val,c
  1959  000C52  0E00               	movlw	0
  1960  000C54  6E0B               	movwf	Display_Set_Point@digit2_val,c
  1961  000C56  0E00               	movlw	0
  1962  000C58  6E0C               	movwf	Display_Set_Point@digit3_val,c
  1963  000C5A  0E00               	movlw	0
  1964  000C5C  ECD0  F00C         	call	_Display_Set_Point
  1965                           
  1966                           ;Task.c: 111:         }
  1967  000C60  D01F               	goto	l451
  1968  000C62                     l3142:
  1969                           
  1970                           ; BSR set to: 0
  1971  000C62  0E03               	movlw	3
  1972  000C64  1978               	xorwf	Task_SetRTC@seq_cnt& (0+255),w,b
  1973  000C66  B4D8               	btfsc	status,2,c
  1974  000C68  D004               	goto	u2980
  1975                           
  1976                           ; BSR set to: 0
  1977  000C6A  0E04               	movlw	4
  1978  000C6C  1978               	xorwf	Task_SetRTC@seq_cnt& (0+255),w,b
  1979  000C6E  A4D8               	btfss	status,2,c
  1980  000C70  D00A               	goto	l3148
  1981  000C72                     u2980:
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;Task.c: 113:             Display_Set_Point(0, 1, 0, 0);
  1985  000C72  0E01               	movlw	1
  1986  000C74  6E0A               	movwf	Display_Set_Point@digit1_val,c
  1987  000C76  0E00               	movlw	0
  1988  000C78  6E0B               	movwf	Display_Set_Point@digit2_val,c
  1989  000C7A  0E00               	movlw	0
  1990  000C7C  6E0C               	movwf	Display_Set_Point@digit3_val,c
  1991  000C7E  0E00               	movlw	0
  1992  000C80  ECD0  F00C         	call	_Display_Set_Point
  1993                           
  1994                           ;Task.c: 114:         }
  1995  000C84  D00D               	goto	l451
  1996  000C86                     l3148:
  1997                           
  1998                           ; BSR set to: 0
  1999  000C86  0E05               	movlw	5
  2000  000C88  1978               	xorwf	Task_SetRTC@seq_cnt& (0+255),w,b
  2001  000C8A  A4D8               	btfss	status,2,c
  2002  000C8C  D009               	goto	l451
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;Task.c: 116:             Display_Set_Point(0, 0, 0, 0);
  2006  000C8E  0E00               	movlw	0
  2007  000C90  6E0A               	movwf	Display_Set_Point@digit1_val,c
  2008  000C92  0E00               	movlw	0
  2009  000C94  6E0B               	movwf	Display_Set_Point@digit2_val,c
  2010  000C96  0E00               	movlw	0
  2011  000C98  6E0C               	movwf	Display_Set_Point@digit3_val,c
  2012  000C9A  0E00               	movlw	0
  2013  000C9C  ECD0  F00C         	call	_Display_Set_Point
  2014  000CA0                     l451:
  2015                           
  2016                           ;Task.c: 119:         if(GetRisingEdge_SW2() && PORTEbits.RE0) {
  2017                           
  2018                           ; BSR set to: 0
  2019  000CA0  ECBA  F009         	call	_GetRisingEdge_SW2	;wreg free
  2020  000CA4  0900               	iorlw	0
  2021  000CA6  A4D8               	btfss	status,2,c
  2022  000CA8  A084               	btfss	3972,0,c	;volatile
  2023  000CAA  D002               	goto	l3158
  2024                           
  2025                           ;Task.c: 120:             seq_cnt++;
  2026  000CAC  0100               	movlb	0	; () banked
  2027  000CAE  2B78               	incf	Task_SetRTC@seq_cnt& (0+255),f,b
  2028  000CB0                     l3158:
  2029                           
  2030                           ;Task.c: 47:     while(seq_cnt < 6) {
  2031  000CB0  0E05               	movlw	5
  2032  000CB2  0100               	movlb	0	; () banked
  2033  000CB4  6578               	cpfsgt	Task_SetRTC@seq_cnt& (0+255),b
  2034  000CB6  D5C2               	goto	l3040
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;Task.c: 124:     DS3231_SetAll(&NewSet);
  2038  000CB8  0E79               	movlw	low Task_SetRTC@NewSet
  2039  000CBA  6E16               	movwf	DS3231_SetAll@time,c
  2040  000CBC  0E00               	movlw	high Task_SetRTC@NewSet
  2041  000CBE  6E17               	movwf	DS3231_SetAll@time+1,c
  2042  000CC0  EC9F  F008         	call	_DS3231_SetAll	;wreg free
  2043  000CC4  0012               	return		;funcret
  2044  000CC6                     __end_of_Task_SetRTC:
  2045                           	opt callstack 0
  2046                           
  2047 ;; *************** function _Task_IncrementVal *****************
  2048 ;; Defined at:
  2049 ;;		line 5 in file "Task.c"
  2050 ;; Parameters:    Size  Location     Type
  2051 ;;  targetVal       2   22[COMRAM] PTR unsigned char 
  2052 ;;		 -> Task_SetRTC@NewSet(7), 
  2053 ;;  minVal          1   24[COMRAM] unsigned char 
  2054 ;;  maxVal          1   25[COMRAM] unsigned char 
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  Increment       1   29[COMRAM] _Bool 
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2066 ;;      Params:         4       0       0       0       0       0       0       0       0
  2067 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2068 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2069 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2070 ;;Total ram usage:        8 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:    5
  2073 ;; This function calls:
  2074 ;;		_GetRisingEdge_SW1
  2075 ;;		_MySystick_ms
  2076 ;;		_PressOverTime_SW1
  2077 ;;		_abs
  2078 ;; This function is called by:
  2079 ;;		_Task_SetRTC
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           	psect	text7
  2084  000FA6                     __ptext7:
  2085                           	opt callstack 0
  2086  000FA6                     _Task_IncrementVal:
  2087                           	opt callstack 24
  2088                           
  2089                           ;Task.c: 6:     static int PrevTime = 0;;Task.c: 7:     _Bool Increment = 0;
  2090                           
  2091                           ;incstack = 0
  2092  000FA6  0E00               	movlw	0
  2093  000FA8  6E1E               	movwf	Task_IncrementVal@Increment,c
  2094                           
  2095                           ;Task.c: 9:     if(abs(MySystick_ms() - PrevTime) >= 200) {
  2096  000FAA  EC18  F00A         	call	_MySystick_ms	;wreg free
  2097  000FAE  0100               	movlb	0	; () banked
  2098  000FB0  5182               	movf	Task_IncrementVal@PrevTime& (0+255),w,b
  2099  000FB2  5C0E               	subwf	?_MySystick_ms,w,c
  2100  000FB4  6E1C               	movwf	_Task_IncrementVal$1852,c
  2101  000FB6  5183               	movf	(Task_IncrementVal@PrevTime+1)& (0+255),w,b
  2102  000FB8  580F               	subwfb	?_MySystick_ms+1,w,c
  2103  000FBA  6E1D               	movwf	_Task_IncrementVal$1852+1,c
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;Task.c: 9:     if(abs(MySystick_ms() - PrevTime) >= 200) {
  2107  000FBC  C01C  F00A         	movff	_Task_IncrementVal$1852,abs@a
  2108  000FC0  C01D  F00B         	movff	_Task_IncrementVal$1852+1,abs@a+1
  2109  000FC4  ECCA  F00B         	call	_abs	;wreg free
  2110  000FC8  BE0B               	btfsc	?_abs+1,7,c
  2111  000FCA  D00E               	goto	l2988
  2112  000FCC  500B               	movf	?_abs+1,w,c
  2113  000FCE  E104               	bnz	u2690
  2114  000FD0  0EC8               	movlw	200
  2115  000FD2  5C0A               	subwf	?_abs,w,c
  2116  000FD4  A0D8               	btfss	status,0,c
  2117  000FD6  D008               	goto	l2988
  2118  000FD8                     u2690:
  2119                           
  2120                           ;Task.c: 10:        PrevTime = MySystick_ms();
  2121  000FD8  EC18  F00A         	call	_MySystick_ms	;wreg free
  2122  000FDC  C00E  F082         	movff	?_MySystick_ms,Task_IncrementVal@PrevTime
  2123  000FE0  C00F  F083         	movff	?_MySystick_ms+1,Task_IncrementVal@PrevTime+1
  2124                           
  2125                           ;Task.c: 11:        Increment = 1;
  2126  000FE4  0E01               	movlw	1
  2127  000FE6  6E1E               	movwf	Task_IncrementVal@Increment,c
  2128  000FE8                     l2988:
  2129                           
  2130                           ;Task.c: 14:     if(GetRisingEdge_SW1()) {
  2131  000FE8  EC87  F009         	call	_GetRisingEdge_SW1	;wreg free
  2132  000FEC  0900               	iorlw	0
  2133  000FEE  B4D8               	btfsc	status,2,c
  2134  000FF0  D013               	goto	l2994
  2135  000FF2                     
  2136                           ;Task.c: 15:         if((*targetVal)++ >= maxVal) *targetVal = minVal;
  2137  000FF2  C017  FFD9         	movff	Task_IncrementVal@targetVal,fsr2l
  2138  000FF6  C018  FFDA         	movff	Task_IncrementVal@targetVal+1,fsr2h
  2139  000FFA  CFDF F01B          	movff	indf2,??_Task_IncrementVal
  2140  000FFE  0E01               	movlw	1
  2141  001000  26DF               	addwf	indf2,f,c
  2142  001002  501A               	movf	Task_IncrementVal@maxVal,w,c
  2143  001004  5C1B               	subwf	??_Task_IncrementVal,w,c
  2144  001006  A0D8               	btfss	status,0,c
  2145  001008  0012               	return	
  2146  00100A  C017  FFD9         	movff	Task_IncrementVal@targetVal,fsr2l
  2147  00100E  C018  FFDA         	movff	Task_IncrementVal@targetVal+1,fsr2h
  2148  001012  C019  FFDF         	movff	Task_IncrementVal@minVal,indf2
  2149  001016  0012               	return	
  2150  001018                     l2994:
  2151  001018  0E02               	movlw	2
  2152  00101A  6E13               	movwf	PressOverTime_SW1@time+1,c
  2153  00101C  0EBC               	movlw	188
  2154  00101E  6E12               	movwf	PressOverTime_SW1@time,c
  2155  001020  ECBD  F00A         	call	_PressOverTime_SW1	;wreg free
  2156  001024  0900               	iorlw	0
  2157  001026  B4D8               	btfsc	status,2,c
  2158  001028  0012               	return	
  2159                           
  2160                           ;Task.c: 18:         if(Increment) {
  2161  00102A  501E               	movf	Task_IncrementVal@Increment,w,c
  2162  00102C  B4D8               	btfsc	status,2,c
  2163  00102E  0012               	return	
  2164  001030  D7E0               	goto	L3
  2165  001032                     __end_of_Task_IncrementVal:
  2166                           	opt callstack 0
  2167                           
  2168 ;; *************** function _PressOverTime_SW1 *****************
  2169 ;; Defined at:
  2170 ;;		line 88 in file "main.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;  time            2   17[COMRAM] int 
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;		None
  2175 ;; Return value:  Size  Location     Type
  2176 ;;                  1    wreg      _Bool 
  2177 ;; Registers used:
  2178 ;;		wreg, status,2, status,0, cstack
  2179 ;; Tracked objects:
  2180 ;;		On entry : 0/0
  2181 ;;		On exit  : 0/0
  2182 ;;		Unchanged: 0/0
  2183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2184 ;;      Params:         2       0       0       0       0       0       0       0       0
  2185 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2186 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2187 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2188 ;;Total ram usage:        5 bytes
  2189 ;; Hardware stack levels used:    1
  2190 ;; Hardware stack levels required when called:    4
  2191 ;; This function calls:
  2192 ;;		_MySystick_ms
  2193 ;;		_abs
  2194 ;; This function is called by:
  2195 ;;		_Task_IncrementVal
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text8
  2200  00157A                     __ptext8:
  2201                           	opt callstack 0
  2202  00157A                     _PressOverTime_SW1:
  2203                           	opt callstack 24
  2204                           
  2205                           ;main.c: 89:     static _Bool status = 0;;main.c: 90:     static int old_cnt = 0;;main.c
      +                          : 92:     if(PORTEbits.RE0 == 0) {
  2206                           
  2207                           ;incstack = 0
  2208  00157A  B084               	btfsc	3972,0,c	;volatile
  2209  00157C  D01A               	goto	l2806
  2210                           
  2211                           ;main.c: 93:         if(abs(MySystick_ms() - old_cnt) >= time) {
  2212  00157E  EC18  F00A         	call	_MySystick_ms	;wreg free
  2213  001582  502E               	movf	PressOverTime_SW1@old_cnt,w,c
  2214  001584  5C0E               	subwf	?_MySystick_ms,w,c
  2215  001586  6E15               	movwf	_PressOverTime_SW1$1849,c
  2216  001588  502F               	movf	PressOverTime_SW1@old_cnt+1,w,c
  2217  00158A  580F               	subwfb	?_MySystick_ms+1,w,c
  2218  00158C  6E16               	movwf	_PressOverTime_SW1$1849+1,c
  2219                           
  2220                           ;main.c: 93:         if(abs(MySystick_ms() - old_cnt) >= time) {
  2221  00158E  C015  F00A         	movff	_PressOverTime_SW1$1849,abs@a
  2222  001592  C016  F00B         	movff	_PressOverTime_SW1$1849+1,abs@a+1
  2223  001596  ECCA  F00B         	call	_abs	;wreg free
  2224  00159A  5012               	movf	PressOverTime_SW1@time,w,c
  2225  00159C  5C0A               	subwf	?_abs,w,c
  2226  00159E  500B               	movf	?_abs+1,w,c
  2227  0015A0  0A80               	xorlw	128
  2228  0015A2  6E14               	movwf	??_PressOverTime_SW1& (0+255),c
  2229  0015A4  5013               	movf	PressOverTime_SW1@time+1,w,c
  2230  0015A6  0A80               	xorlw	128
  2231  0015A8  5814               	subwfb	??_PressOverTime_SW1& (0+255),w,c
  2232  0015AA  A0D8               	btfss	status,0,c
  2233  0015AC  D00A               	goto	l2810
  2234                           
  2235                           ;main.c: 94:             status = 1;
  2236  0015AE  0E01               	movlw	1
  2237  0015B0  D007               	goto	L2
  2238  0015B2                     l2806:
  2239                           
  2240                           ;main.c: 98:         old_cnt = MySystick_ms();
  2241  0015B2  EC18  F00A         	call	_MySystick_ms	;wreg free
  2242  0015B6  C00E  F02E         	movff	?_MySystick_ms,PressOverTime_SW1@old_cnt
  2243  0015BA  C00F  F02F         	movff	?_MySystick_ms+1,PressOverTime_SW1@old_cnt+1
  2244                           
  2245                           ;main.c: 99:         status = 0;
  2246  0015BE  0E00               	movlw	0
  2247  0015C0                     L2:
  2248  0015C0  6E3B               	movwf	PressOverTime_SW1@status,c
  2249  0015C2                     l2810:
  2250                           
  2251                           ;main.c: 101:     return status;
  2252  0015C2  503B               	movf	PressOverTime_SW1@status,w,c
  2253  0015C4  0012               	return		;funcret
  2254  0015C6                     __end_of_PressOverTime_SW1:
  2255                           	opt callstack 0
  2256                           
  2257 ;; *************** function _GetRisingEdge_SW2 *****************
  2258 ;; Defined at:
  2259 ;;		line 104 in file "main.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;		None
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;		None
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      _Bool 
  2266 ;; Registers used:
  2267 ;;		wreg, status,2, status,0, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2273 ;;      Params:         0       0       0       0       0       0       0       0       0
  2274 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2275 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2276 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2277 ;;Total ram usage:        2 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    4
  2280 ;; This function calls:
  2281 ;;		_MySystick_ms
  2282 ;;		_abs
  2283 ;; This function is called by:
  2284 ;;		_main
  2285 ;;		_Task_SetRTC
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           	psect	text9
  2290  001374                     __ptext9:
  2291                           	opt callstack 0
  2292  001374                     _GetRisingEdge_SW2:
  2293                           	opt callstack 25
  2294                           
  2295                           ;main.c: 105:     static _Bool exist = 0;;main.c: 106:     static _Bool Ready_f = 0;;mai
      +                          n.c: 107:     static int old_cnt = 0;;main.c: 109:     if(PORTEbits.RE1 == 0) {
  2296                           
  2297                           ;incstack = 0
  2298  001374  B284               	btfsc	3972,1,c	;volatile
  2299  001376  D004               	goto	l132
  2300                           
  2301                           ;main.c: 110:         exist = 0;
  2302  001378  0E00               	movlw	0
  2303  00137A  6E3A               	movwf	GetRisingEdge_SW2@exist,c
  2304                           
  2305                           ;main.c: 111:         Ready_f = 1;
  2306  00137C  0E01               	movlw	1
  2307  00137E  6E39               	movwf	GetRisingEdge_SW2@Ready_f,c
  2308  001380                     l132:
  2309                           
  2310                           ;main.c: 114:     if(Ready_f) {
  2311  001380  5039               	movf	GetRisingEdge_SW2@Ready_f,w,c
  2312  001382  B4D8               	btfsc	status,2,c
  2313  001384  D027               	goto	l2888
  2314                           
  2315                           ;main.c: 115:         if(abs(MySystick_ms() - old_cnt) >= 100) {
  2316  001386  EC18  F00A         	call	_MySystick_ms	;wreg free
  2317  00138A  502C               	movf	GetRisingEdge_SW2@old_cnt,w,c
  2318  00138C  5C0E               	subwf	?_MySystick_ms,w,c
  2319  00138E  6E12               	movwf	_GetRisingEdge_SW2$1850,c
  2320  001390  502D               	movf	GetRisingEdge_SW2@old_cnt+1,w,c
  2321  001392  580F               	subwfb	?_MySystick_ms+1,w,c
  2322  001394  6E13               	movwf	_GetRisingEdge_SW2$1850+1,c
  2323                           
  2324                           ;main.c: 115:         if(abs(MySystick_ms() - old_cnt) >= 100) {
  2325  001396  C012  F00A         	movff	_GetRisingEdge_SW2$1850,abs@a
  2326  00139A  C013  F00B         	movff	_GetRisingEdge_SW2$1850+1,abs@a+1
  2327  00139E  ECCA  F00B         	call	_abs	;wreg free
  2328  0013A2  BE0B               	btfsc	?_abs+1,7,c
  2329  0013A4  D013               	goto	l134
  2330  0013A6  500B               	movf	?_abs+1,w,c
  2331  0013A8  E104               	bnz	u2660
  2332  0013AA  0E64               	movlw	100
  2333  0013AC  5C0A               	subwf	?_abs,w,c
  2334  0013AE  A0D8               	btfss	status,0,c
  2335  0013B0  D00D               	goto	l134
  2336  0013B2                     u2660:
  2337                           
  2338                           ;main.c: 116:             old_cnt = MySystick_ms();
  2339  0013B2  EC18  F00A         	call	_MySystick_ms	;wreg free
  2340  0013B6  C00E  F02C         	movff	?_MySystick_ms,GetRisingEdge_SW2@old_cnt
  2341  0013BA  C00F  F02D         	movff	?_MySystick_ms+1,GetRisingEdge_SW2@old_cnt+1
  2342                           
  2343                           ;main.c: 117:             Ready_f = 0;
  2344  0013BE  0E00               	movlw	0
  2345  0013C0  6E39               	movwf	GetRisingEdge_SW2@Ready_f,c
  2346                           
  2347                           ;main.c: 118:             if(exist) return 1;
  2348  0013C2  503A               	movf	GetRisingEdge_SW2@exist,w,c
  2349  0013C4  B4D8               	btfsc	status,2,c
  2350  0013C6  D006               	goto	l2888
  2351  0013C8  0E01               	movlw	1
  2352  0013CA  0012               	return	
  2353  0013CC                     l134:
  2354                           
  2355                           ;main.c: 121:             if(PORTEbits.RE1 == 1) exist = 1;
  2356  0013CC  A284               	btfss	3972,1,c	;volatile
  2357  0013CE  D002               	goto	l2888
  2358  0013D0  0E01               	movlw	1
  2359  0013D2  6E3A               	movwf	GetRisingEdge_SW2@exist,c
  2360  0013D4                     l2888:
  2361                           
  2362                           ;main.c: 124:     return 0;
  2363  0013D4  0E00               	movlw	0
  2364  0013D6  0012               	return		;funcret
  2365  0013D8                     __end_of_GetRisingEdge_SW2:
  2366                           	opt callstack 0
  2367                           
  2368 ;; *************** function _DS3231_SetAll *****************
  2369 ;; Defined at:
  2370 ;;		line 131 in file "DS3231.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;  time            2   21[COMRAM] PTR struct .
  2373 ;;		 -> Task_SetRTC@NewSet(7), 
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;		None
  2376 ;; Return value:  Size  Location     Type
  2377 ;;                  1    wreg      void 
  2378 ;; Registers used:
  2379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2380 ;; Tracked objects:
  2381 ;;		On entry : 0/0
  2382 ;;		On exit  : 0/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2385 ;;      Params:         2       0       0       0       0       0       0       0       0
  2386 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2387 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2388 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2389 ;;Total ram usage:        2 bytes
  2390 ;; Hardware stack levels used:    1
  2391 ;; Hardware stack levels required when called:    6
  2392 ;; This function calls:
  2393 ;;		_DS3231_SetDate
  2394 ;;		_DS3231_SetHour
  2395 ;;		_DS3231_SetMin
  2396 ;;		_DS3231_SetMonth
  2397 ;;		_DS3231_SetSec
  2398 ;;		_DS3231_SetWeek
  2399 ;;		_DS3231_SetYear
  2400 ;; This function is called by:
  2401 ;;		_Task_SetRTC
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405                           	psect	text10
  2406  00113E                     __ptext10:
  2407                           	opt callstack 0
  2408  00113E                     _DS3231_SetAll:
  2409                           	opt callstack 23
  2410                           
  2411                           ;DS3231.c: 132:     DS3231_SetSec(time->Sec);
  2412                           
  2413                           ;incstack = 0
  2414  00113E  EE20 F002          	lfsr	2,2
  2415  001142  5016               	movf	DS3231_SetAll@time,w,c
  2416  001144  26D9               	addwf	fsr2l,f,c
  2417  001146  5017               	movf	DS3231_SetAll@time+1,w,c
  2418  001148  22DA               	addwfc	fsr2h,f,c
  2419  00114A  50DF               	movf	indf2,w,c
  2420  00114C  EC09  F00B         	call	_DS3231_SetSec
  2421                           
  2422                           ;DS3231.c: 133:     DS3231_SetMin(time->Min);
  2423  001150  EE20 F001          	lfsr	2,1
  2424  001154  5016               	movf	DS3231_SetAll@time,w,c
  2425  001156  26D9               	addwf	fsr2l,f,c
  2426  001158  5017               	movf	DS3231_SetAll@time+1,w,c
  2427  00115A  22DA               	addwfc	fsr2h,f,c
  2428  00115C  50DF               	movf	indf2,w,c
  2429  00115E  EC2F  F00B         	call	_DS3231_SetMin
  2430                           
  2431                           ;DS3231.c: 134:     DS3231_SetHour(time->Hour);
  2432  001162  C016  FFD9         	movff	DS3231_SetAll@time,fsr2l
  2433  001166  C017  FFDA         	movff	DS3231_SetAll@time+1,fsr2h
  2434  00116A  50DF               	movf	indf2,w,c
  2435  00116C  EC96  F00A         	call	_DS3231_SetHour
  2436                           
  2437                           ;DS3231.c: 135:     DS3231_SetDate(time->Date);
  2438  001170  EE20 F006          	lfsr	2,6
  2439  001174  5016               	movf	DS3231_SetAll@time,w,c
  2440  001176  26D9               	addwf	fsr2l,f,c
  2441  001178  5017               	movf	DS3231_SetAll@time+1,w,c
  2442  00117A  22DA               	addwfc	fsr2h,f,c
  2443  00117C  50DF               	movf	indf2,w,c
  2444  00117E  EC6D  F00A         	call	_DS3231_SetDate
  2445                           
  2446                           ;DS3231.c: 136:     DS3231_SetWeek(time->Week);
  2447  001182  EE20 F005          	lfsr	2,5
  2448  001186  5016               	movf	DS3231_SetAll@time,w,c
  2449  001188  26D9               	addwf	fsr2l,f,c
  2450  00118A  5017               	movf	DS3231_SetAll@time+1,w,c
  2451  00118C  22DA               	addwfc	fsr2h,f,c
  2452  00118E  50DF               	movf	indf2,w,c
  2453  001190  EC70  F00C         	call	_DS3231_SetWeek
  2454                           
  2455                           ;DS3231.c: 137:     DS3231_SetMonth(time->Month);
  2456  001194  EE20 F004          	lfsr	2,4
  2457  001198  5016               	movf	DS3231_SetAll@time,w,c
  2458  00119A  26D9               	addwf	fsr2l,f,c
  2459  00119C  5017               	movf	DS3231_SetAll@time+1,w,c
  2460  00119E  22DA               	addwfc	fsr2h,f,c
  2461  0011A0  50DF               	movf	indf2,w,c
  2462  0011A2  EC44  F00A         	call	_DS3231_SetMonth
  2463                           
  2464                           ;DS3231.c: 138:     DS3231_SetYear(time->Year);
  2465  0011A6  EE20 F003          	lfsr	2,3
  2466  0011AA  5016               	movf	DS3231_SetAll@time,w,c
  2467  0011AC  26D9               	addwf	fsr2l,f,c
  2468  0011AE  5017               	movf	DS3231_SetAll@time+1,w,c
  2469  0011B0  22DA               	addwfc	fsr2h,f,c
  2470  0011B2  50DF               	movf	indf2,w,c
  2471  0011B4  ECE3  F00A         	call	_DS3231_SetYear
  2472  0011B8  0012               	return		;funcret
  2473  0011BA                     __end_of_DS3231_SetAll:
  2474                           	opt callstack 0
  2475                           
  2476 ;; *************** function _DS3231_SetYear *****************
  2477 ;; Defined at:
  2478 ;;		line 57 in file "DS3231.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;  data            1    wreg     unsigned char 
  2481 ;; Auto vars:     Size  Location     Type
  2482 ;;  data            1   20[COMRAM] unsigned char 
  2483 ;;  BCD_Data        1   19[COMRAM] unsigned char 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      void 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2, status,0, cstack
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2493 ;;      Params:         0       0       0       0       0       0       0       0       0
  2494 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2495 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2496 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2497 ;;Total ram usage:        4 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    5
  2500 ;; This function calls:
  2501 ;;		_I2C_Mem_Transmit
  2502 ;;		___awdiv
  2503 ;;		___awmod
  2504 ;; This function is called by:
  2505 ;;		_DS3231_SetAll
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           	psect	text11
  2510  0015C6                     __ptext11:
  2511                           	opt callstack 0
  2512  0015C6                     _DS3231_SetYear:
  2513                           	opt callstack 23
  2514                           
  2515                           ;incstack = 0
  2516                           ;DS3231_SetYear@data stored from wreg
  2517  0015C6  6E15               	movwf	DS3231_SetYear@data,c
  2518                           
  2519                           ;DS3231.c: 59:     if(data < 100) {
  2520  0015C8  0E64               	movlw	100
  2521  0015CA  6015               	cpfslt	DS3231_SetYear@data,c
  2522  0015CC  0012               	return	
  2523                           
  2524                           ;DS3231.c: 60:         BCD_Data = ((data/10)<<4)|(data%10);
  2525  0015CE  C015  F00A         	movff	DS3231_SetYear@data,___awmod@dividend
  2526  0015D2  6A0B               	clrf	___awmod@dividend+1,c
  2527  0015D4  0E00               	movlw	0
  2528  0015D6  6E0D               	movwf	___awmod@divisor+1,c
  2529  0015D8  0E0A               	movlw	10
  2530  0015DA  6E0C               	movwf	___awmod@divisor,c
  2531  0015DC  EC18  F009         	call	___awmod	;wreg free
  2532  0015E0  C00A  F012         	movff	?___awmod,??_DS3231_SetYear
  2533  0015E4  C00B  F013         	movff	?___awmod+1,??_DS3231_SetYear+1
  2534  0015E8  C015  F00A         	movff	DS3231_SetYear@data,___awdiv@dividend
  2535  0015EC  6A0B               	clrf	___awdiv@dividend+1,c
  2536  0015EE  0E00               	movlw	0
  2537  0015F0  6E0D               	movwf	___awdiv@divisor+1,c
  2538  0015F2  0E0A               	movlw	10
  2539  0015F4  6E0C               	movwf	___awdiv@divisor,c
  2540  0015F6  EC5D  F008         	call	___awdiv	;wreg free
  2541  0015FA  380A               	swapf	?___awdiv,w,c
  2542  0015FC  0BF0               	andlw	240
  2543  0015FE  1012               	iorwf	??_DS3231_SetYear,w,c
  2544  001600  6E14               	movwf	DS3231_SetYear@BCD_Data,c
  2545                           
  2546                           ;DS3231.c: 61:         I2C_Mem_Transmit(0xD0, 0x06, BCD_Data);
  2547  001602  0E06               	movlw	6
  2548  001604  6E0F               	movwf	I2C_Mem_Transmit@MemAddress,c
  2549  001606  C014  F010         	movff	DS3231_SetYear@BCD_Data,I2C_Mem_Transmit@data
  2550  00160A  0ED0               	movlw	208
  2551  00160C  EC82  F00C         	call	_I2C_Mem_Transmit
  2552  001610  0012               	return		;funcret
  2553  001612                     __end_of_DS3231_SetYear:
  2554                           	opt callstack 0
  2555                           
  2556 ;; *************** function _DS3231_SetWeek *****************
  2557 ;; Defined at:
  2558 ;;		line 41 in file "DS3231.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;  data            1    wreg     unsigned char 
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;  data            1   18[COMRAM] unsigned char 
  2563 ;;  BCD_Data        1   17[COMRAM] unsigned char 
  2564 ;; Return value:  Size  Location     Type
  2565 ;;                  1    wreg      void 
  2566 ;; Registers used:
  2567 ;;		wreg, status,2, status,0, cstack
  2568 ;; Tracked objects:
  2569 ;;		On entry : 0/0
  2570 ;;		On exit  : 0/0
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2573 ;;      Params:         0       0       0       0       0       0       0       0       0
  2574 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2575 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2576 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2577 ;;Total ram usage:        2 bytes
  2578 ;; Hardware stack levels used:    1
  2579 ;; Hardware stack levels required when called:    5
  2580 ;; This function calls:
  2581 ;;		_I2C_Mem_Transmit
  2582 ;; This function is called by:
  2583 ;;		_DS3231_SetAll
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587                           	psect	text12
  2588  0018E0                     __ptext12:
  2589                           	opt callstack 0
  2590  0018E0                     _DS3231_SetWeek:
  2591                           	opt callstack 23
  2592                           
  2593                           ;incstack = 0
  2594                           ;DS3231_SetWeek@data stored from wreg
  2595  0018E0  6E13               	movwf	DS3231_SetWeek@data,c
  2596                           
  2597                           ;DS3231.c: 43:     if(data>=1 && data<8){
  2598  0018E2  5013               	movf	DS3231_SetWeek@data,w,c
  2599  0018E4  B4D8               	btfsc	status,2,c
  2600  0018E6  0012               	return	
  2601  0018E8  0E08               	movlw	8
  2602  0018EA  6013               	cpfslt	DS3231_SetWeek@data,c
  2603  0018EC  0012               	return	
  2604                           
  2605                           ;DS3231.c: 44:         BCD_Data = data&0x07;
  2606  0018EE  5013               	movf	DS3231_SetWeek@data,w,c
  2607  0018F0  0B07               	andlw	7
  2608  0018F2  6E12               	movwf	DS3231_SetWeek@BCD_Data,c
  2609                           
  2610                           ;DS3231.c: 45:         I2C_Mem_Transmit( 0xD0, 0x03, BCD_Data);
  2611  0018F4  0E03               	movlw	3
  2612  0018F6  6E0F               	movwf	I2C_Mem_Transmit@MemAddress,c
  2613  0018F8  C012  F010         	movff	DS3231_SetWeek@BCD_Data,I2C_Mem_Transmit@data
  2614  0018FC  0ED0               	movlw	208
  2615  0018FE  EC82  F00C         	call	_I2C_Mem_Transmit
  2616  001902  0012               	return		;funcret
  2617  001904                     __end_of_DS3231_SetWeek:
  2618                           	opt callstack 0
  2619                           
  2620 ;; *************** function _DS3231_SetSec *****************
  2621 ;; Defined at:
  2622 ;;		line 9 in file "DS3231.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;  data            1    wreg     unsigned char 
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;  data            1   20[COMRAM] unsigned char 
  2627 ;;  BCD_Data        1   19[COMRAM] unsigned char 
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  1    wreg      void 
  2630 ;; Registers used:
  2631 ;;		wreg, status,2, status,0, cstack
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2637 ;;      Params:         0       0       0       0       0       0       0       0       0
  2638 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2639 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2640 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2641 ;;Total ram usage:        4 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; Hardware stack levels required when called:    5
  2644 ;; This function calls:
  2645 ;;		_I2C_Mem_Transmit
  2646 ;;		___awdiv
  2647 ;;		___awmod
  2648 ;; This function is called by:
  2649 ;;		_DS3231_SetAll
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text13
  2654  001612                     __ptext13:
  2655                           	opt callstack 0
  2656  001612                     _DS3231_SetSec:
  2657                           	opt callstack 23
  2658                           
  2659                           ;incstack = 0
  2660                           ;DS3231_SetSec@data stored from wreg
  2661  001612  6E15               	movwf	DS3231_SetSec@data,c
  2662                           
  2663                           ;DS3231.c: 11:     if(data < 60) {
  2664  001614  0E3C               	movlw	60
  2665  001616  6015               	cpfslt	DS3231_SetSec@data,c
  2666  001618  0012               	return	
  2667                           
  2668                           ;DS3231.c: 12:         BCD_Data = ((data/10)<<4)|(data%10);
  2669  00161A  C015  F00A         	movff	DS3231_SetSec@data,___awmod@dividend
  2670  00161E  6A0B               	clrf	___awmod@dividend+1,c
  2671  001620  0E00               	movlw	0
  2672  001622  6E0D               	movwf	___awmod@divisor+1,c
  2673  001624  0E0A               	movlw	10
  2674  001626  6E0C               	movwf	___awmod@divisor,c
  2675  001628  EC18  F009         	call	___awmod	;wreg free
  2676  00162C  C00A  F012         	movff	?___awmod,??_DS3231_SetSec
  2677  001630  C00B  F013         	movff	?___awmod+1,??_DS3231_SetSec+1
  2678  001634  C015  F00A         	movff	DS3231_SetSec@data,___awdiv@dividend
  2679  001638  6A0B               	clrf	___awdiv@dividend+1,c
  2680  00163A  0E00               	movlw	0
  2681  00163C  6E0D               	movwf	___awdiv@divisor+1,c
  2682  00163E  0E0A               	movlw	10
  2683  001640  6E0C               	movwf	___awdiv@divisor,c
  2684  001642  EC5D  F008         	call	___awdiv	;wreg free
  2685  001646  380A               	swapf	?___awdiv,w,c
  2686  001648  0BF0               	andlw	240
  2687  00164A  1012               	iorwf	??_DS3231_SetSec,w,c
  2688  00164C  6E14               	movwf	DS3231_SetSec@BCD_Data,c
  2689                           
  2690                           ;DS3231.c: 13:         I2C_Mem_Transmit(0xD0, 0x00, BCD_Data);
  2691  00164E  0E00               	movlw	0
  2692  001650  6E0F               	movwf	I2C_Mem_Transmit@MemAddress,c
  2693  001652  C014  F010         	movff	DS3231_SetSec@BCD_Data,I2C_Mem_Transmit@data
  2694  001656  0ED0               	movlw	208
  2695  001658  EC82  F00C         	call	_I2C_Mem_Transmit
  2696  00165C  0012               	return		;funcret
  2697  00165E                     __end_of_DS3231_SetSec:
  2698                           	opt callstack 0
  2699                           
  2700 ;; *************** function _DS3231_SetMonth *****************
  2701 ;; Defined at:
  2702 ;;		line 49 in file "DS3231.c"
  2703 ;; Parameters:    Size  Location     Type
  2704 ;;  data            1    wreg     unsigned char 
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;  data            1   20[COMRAM] unsigned char 
  2707 ;;  BCD_Data        1   19[COMRAM] unsigned char 
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  1    wreg      void 
  2710 ;; Registers used:
  2711 ;;		wreg, status,2, status,0, cstack
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2717 ;;      Params:         0       0       0       0       0       0       0       0       0
  2718 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2719 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2720 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2721 ;;Total ram usage:        4 bytes
  2722 ;; Hardware stack levels used:    1
  2723 ;; Hardware stack levels required when called:    5
  2724 ;; This function calls:
  2725 ;;		_I2C_Mem_Transmit
  2726 ;;		___awdiv
  2727 ;;		___awmod
  2728 ;; This function is called by:
  2729 ;;		_DS3231_SetAll
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           	psect	text14
  2734  001488                     __ptext14:
  2735                           	opt callstack 0
  2736  001488                     _DS3231_SetMonth:
  2737                           	opt callstack 23
  2738                           
  2739                           ;incstack = 0
  2740                           ;DS3231_SetMonth@data stored from wreg
  2741  001488  6E15               	movwf	DS3231_SetMonth@data,c
  2742                           
  2743                           ;DS3231.c: 51:     if(data>=1 && data<13){
  2744  00148A  5015               	movf	DS3231_SetMonth@data,w,c
  2745  00148C  B4D8               	btfsc	status,2,c
  2746  00148E  0012               	return	
  2747  001490  0E0D               	movlw	13
  2748  001492  6015               	cpfslt	DS3231_SetMonth@data,c
  2749  001494  0012               	return	
  2750                           
  2751                           ;DS3231.c: 52:         BCD_Data = ((data/10)<<4)|(data%10);
  2752  001496  C015  F00A         	movff	DS3231_SetMonth@data,___awmod@dividend
  2753  00149A  6A0B               	clrf	___awmod@dividend+1,c
  2754  00149C  0E00               	movlw	0
  2755  00149E  6E0D               	movwf	___awmod@divisor+1,c
  2756  0014A0  0E0A               	movlw	10
  2757  0014A2  6E0C               	movwf	___awmod@divisor,c
  2758  0014A4  EC18  F009         	call	___awmod	;wreg free
  2759  0014A8  C00A  F012         	movff	?___awmod,??_DS3231_SetMonth
  2760  0014AC  C00B  F013         	movff	?___awmod+1,??_DS3231_SetMonth+1
  2761  0014B0  C015  F00A         	movff	DS3231_SetMonth@data,___awdiv@dividend
  2762  0014B4  6A0B               	clrf	___awdiv@dividend+1,c
  2763  0014B6  0E00               	movlw	0
  2764  0014B8  6E0D               	movwf	___awdiv@divisor+1,c
  2765  0014BA  0E0A               	movlw	10
  2766  0014BC  6E0C               	movwf	___awdiv@divisor,c
  2767  0014BE  EC5D  F008         	call	___awdiv	;wreg free
  2768  0014C2  380A               	swapf	?___awdiv,w,c
  2769  0014C4  0BF0               	andlw	240
  2770  0014C6  1012               	iorwf	??_DS3231_SetMonth,w,c
  2771  0014C8  6E14               	movwf	DS3231_SetMonth@BCD_Data,c
  2772                           
  2773                           ;DS3231.c: 53:         I2C_Mem_Transmit( 0xD0, 0x05, BCD_Data);
  2774  0014CA  0E05               	movlw	5
  2775  0014CC  6E0F               	movwf	I2C_Mem_Transmit@MemAddress,c
  2776  0014CE  C014  F010         	movff	DS3231_SetMonth@BCD_Data,I2C_Mem_Transmit@data
  2777  0014D2  0ED0               	movlw	208
  2778  0014D4  EC82  F00C         	call	_I2C_Mem_Transmit
  2779  0014D8  0012               	return		;funcret
  2780  0014DA                     __end_of_DS3231_SetMonth:
  2781                           	opt callstack 0
  2782                           
  2783 ;; *************** function _DS3231_SetMin *****************
  2784 ;; Defined at:
  2785 ;;		line 17 in file "DS3231.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;  data            1    wreg     unsigned char 
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;  data            1   20[COMRAM] unsigned char 
  2790 ;;  BCD_Data        1   19[COMRAM] unsigned char 
  2791 ;; Return value:  Size  Location     Type
  2792 ;;                  1    wreg      void 
  2793 ;; Registers used:
  2794 ;;		wreg, status,2, status,0, cstack
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2800 ;;      Params:         0       0       0       0       0       0       0       0       0
  2801 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2802 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2803 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2804 ;;Total ram usage:        4 bytes
  2805 ;; Hardware stack levels used:    1
  2806 ;; Hardware stack levels required when called:    5
  2807 ;; This function calls:
  2808 ;;		_I2C_Mem_Transmit
  2809 ;;		___awdiv
  2810 ;;		___awmod
  2811 ;; This function is called by:
  2812 ;;		_DS3231_SetAll
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816                           	psect	text15
  2817  00165E                     __ptext15:
  2818                           	opt callstack 0
  2819  00165E                     _DS3231_SetMin:
  2820                           	opt callstack 23
  2821                           
  2822                           ;incstack = 0
  2823                           ;DS3231_SetMin@data stored from wreg
  2824  00165E  6E15               	movwf	DS3231_SetMin@data,c
  2825                           
  2826                           ;DS3231.c: 19:     if(data < 60) {
  2827  001660  0E3C               	movlw	60
  2828  001662  6015               	cpfslt	DS3231_SetMin@data,c
  2829  001664  0012               	return	
  2830                           
  2831                           ;DS3231.c: 20:         BCD_Data = ((data/10)<<4)|(data%10);
  2832  001666  C015  F00A         	movff	DS3231_SetMin@data,___awmod@dividend
  2833  00166A  6A0B               	clrf	___awmod@dividend+1,c
  2834  00166C  0E00               	movlw	0
  2835  00166E  6E0D               	movwf	___awmod@divisor+1,c
  2836  001670  0E0A               	movlw	10
  2837  001672  6E0C               	movwf	___awmod@divisor,c
  2838  001674  EC18  F009         	call	___awmod	;wreg free
  2839  001678  C00A  F012         	movff	?___awmod,??_DS3231_SetMin
  2840  00167C  C00B  F013         	movff	?___awmod+1,??_DS3231_SetMin+1
  2841  001680  C015  F00A         	movff	DS3231_SetMin@data,___awdiv@dividend
  2842  001684  6A0B               	clrf	___awdiv@dividend+1,c
  2843  001686  0E00               	movlw	0
  2844  001688  6E0D               	movwf	___awdiv@divisor+1,c
  2845  00168A  0E0A               	movlw	10
  2846  00168C  6E0C               	movwf	___awdiv@divisor,c
  2847  00168E  EC5D  F008         	call	___awdiv	;wreg free
  2848  001692  380A               	swapf	?___awdiv,w,c
  2849  001694  0BF0               	andlw	240
  2850  001696  1012               	iorwf	??_DS3231_SetMin,w,c
  2851  001698  6E14               	movwf	DS3231_SetMin@BCD_Data,c
  2852                           
  2853                           ;DS3231.c: 21:         I2C_Mem_Transmit( 0xD0, 0x01, BCD_Data);
  2854  00169A  0E01               	movlw	1
  2855  00169C  6E0F               	movwf	I2C_Mem_Transmit@MemAddress,c
  2856  00169E  C014  F010         	movff	DS3231_SetMin@BCD_Data,I2C_Mem_Transmit@data
  2857  0016A2  0ED0               	movlw	208
  2858  0016A4  EC82  F00C         	call	_I2C_Mem_Transmit
  2859  0016A8  0012               	return		;funcret
  2860  0016AA                     __end_of_DS3231_SetMin:
  2861                           	opt callstack 0
  2862                           
  2863 ;; *************** function _DS3231_SetHour *****************
  2864 ;; Defined at:
  2865 ;;		line 25 in file "DS3231.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;  data            1    wreg     unsigned char 
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;  data            1   20[COMRAM] unsigned char 
  2870 ;;  BCD_Data        1   19[COMRAM] unsigned char 
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  1    wreg      void 
  2873 ;; Registers used:
  2874 ;;		wreg, status,2, status,0, cstack
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2880 ;;      Params:         0       0       0       0       0       0       0       0       0
  2881 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2882 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2883 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2884 ;;Total ram usage:        4 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    5
  2887 ;; This function calls:
  2888 ;;		_I2C_Mem_Transmit
  2889 ;;		___awdiv
  2890 ;;		___awmod
  2891 ;; This function is called by:
  2892 ;;		_DS3231_SetAll
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           	psect	text16
  2897  00152C                     __ptext16:
  2898                           	opt callstack 0
  2899  00152C                     _DS3231_SetHour:
  2900                           	opt callstack 23
  2901                           
  2902                           ;incstack = 0
  2903                           ;DS3231_SetHour@data stored from wreg
  2904  00152C  6E15               	movwf	DS3231_SetHour@data,c
  2905                           
  2906                           ;DS3231.c: 27:     if(data < 24) {
  2907  00152E  0E18               	movlw	24
  2908  001530  6015               	cpfslt	DS3231_SetHour@data,c
  2909  001532  0012               	return	
  2910                           
  2911                           ;DS3231.c: 28:         BCD_Data = (((data/10)<<4)|(data%10))&0x3F;
  2912  001534  C015  F00A         	movff	DS3231_SetHour@data,___awmod@dividend
  2913  001538  6A0B               	clrf	___awmod@dividend+1,c
  2914  00153A  0E00               	movlw	0
  2915  00153C  6E0D               	movwf	___awmod@divisor+1,c
  2916  00153E  0E0A               	movlw	10
  2917  001540  6E0C               	movwf	___awmod@divisor,c
  2918  001542  EC18  F009         	call	___awmod	;wreg free
  2919  001546  C00A  F012         	movff	?___awmod,??_DS3231_SetHour
  2920  00154A  C00B  F013         	movff	?___awmod+1,??_DS3231_SetHour+1
  2921  00154E  C015  F00A         	movff	DS3231_SetHour@data,___awdiv@dividend
  2922  001552  6A0B               	clrf	___awdiv@dividend+1,c
  2923  001554  0E00               	movlw	0
  2924  001556  6E0D               	movwf	___awdiv@divisor+1,c
  2925  001558  0E0A               	movlw	10
  2926  00155A  6E0C               	movwf	___awdiv@divisor,c
  2927  00155C  EC5D  F008         	call	___awdiv	;wreg free
  2928  001560  380A               	swapf	?___awdiv,w,c
  2929  001562  0BF0               	andlw	240
  2930  001564  1012               	iorwf	??_DS3231_SetHour,w,c
  2931  001566  0B3F               	andlw	63
  2932  001568  6E14               	movwf	DS3231_SetHour@BCD_Data,c
  2933                           
  2934                           ;DS3231.c: 29:         I2C_Mem_Transmit( 0xD0,0x02, BCD_Data);
  2935  00156A  0E02               	movlw	2
  2936  00156C  6E0F               	movwf	I2C_Mem_Transmit@MemAddress,c
  2937  00156E  C014  F010         	movff	DS3231_SetHour@BCD_Data,I2C_Mem_Transmit@data
  2938  001572  0ED0               	movlw	208
  2939  001574  EC82  F00C         	call	_I2C_Mem_Transmit
  2940  001578  0012               	return		;funcret
  2941  00157A                     __end_of_DS3231_SetHour:
  2942                           	opt callstack 0
  2943                           
  2944 ;; *************** function _DS3231_SetDate *****************
  2945 ;; Defined at:
  2946 ;;		line 33 in file "DS3231.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;  data            1    wreg     unsigned char 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  data            1   20[COMRAM] unsigned char 
  2951 ;;  BCD_Data        1   19[COMRAM] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      void 
  2954 ;; Registers used:
  2955 ;;		wreg, status,2, status,0, cstack
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2961 ;;      Params:         0       0       0       0       0       0       0       0       0
  2962 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2963 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2964 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2965 ;;Total ram usage:        4 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:    5
  2968 ;; This function calls:
  2969 ;;		_I2C_Mem_Transmit
  2970 ;;		___awdiv
  2971 ;;		___awmod
  2972 ;; This function is called by:
  2973 ;;		_DS3231_SetAll
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text17
  2978  0014DA                     __ptext17:
  2979                           	opt callstack 0
  2980  0014DA                     _DS3231_SetDate:
  2981                           	opt callstack 23
  2982                           
  2983                           ;incstack = 0
  2984                           ;DS3231_SetDate@data stored from wreg
  2985  0014DA  6E15               	movwf	DS3231_SetDate@data,c
  2986                           
  2987                           ;DS3231.c: 35:     if(data>=1 && data<32){
  2988  0014DC  5015               	movf	DS3231_SetDate@data,w,c
  2989  0014DE  B4D8               	btfsc	status,2,c
  2990  0014E0  0012               	return	
  2991  0014E2  0E20               	movlw	32
  2992  0014E4  6015               	cpfslt	DS3231_SetDate@data,c
  2993  0014E6  0012               	return	
  2994                           
  2995                           ;DS3231.c: 36:         BCD_Data = ((data/10)<<4)|(data%10);
  2996  0014E8  C015  F00A         	movff	DS3231_SetDate@data,___awmod@dividend
  2997  0014EC  6A0B               	clrf	___awmod@dividend+1,c
  2998  0014EE  0E00               	movlw	0
  2999  0014F0  6E0D               	movwf	___awmod@divisor+1,c
  3000  0014F2  0E0A               	movlw	10
  3001  0014F4  6E0C               	movwf	___awmod@divisor,c
  3002  0014F6  EC18  F009         	call	___awmod	;wreg free
  3003  0014FA  C00A  F012         	movff	?___awmod,??_DS3231_SetDate
  3004  0014FE  C00B  F013         	movff	?___awmod+1,??_DS3231_SetDate+1
  3005  001502  C015  F00A         	movff	DS3231_SetDate@data,___awdiv@dividend
  3006  001506  6A0B               	clrf	___awdiv@dividend+1,c
  3007  001508  0E00               	movlw	0
  3008  00150A  6E0D               	movwf	___awdiv@divisor+1,c
  3009  00150C  0E0A               	movlw	10
  3010  00150E  6E0C               	movwf	___awdiv@divisor,c
  3011  001510  EC5D  F008         	call	___awdiv	;wreg free
  3012  001514  380A               	swapf	?___awdiv,w,c
  3013  001516  0BF0               	andlw	240
  3014  001518  1012               	iorwf	??_DS3231_SetDate,w,c
  3015  00151A  6E14               	movwf	DS3231_SetDate@BCD_Data,c
  3016                           
  3017                           ;DS3231.c: 37:         I2C_Mem_Transmit( 0xD0, 0x04, BCD_Data);
  3018  00151C  0E04               	movlw	4
  3019  00151E  6E0F               	movwf	I2C_Mem_Transmit@MemAddress,c
  3020  001520  C014  F010         	movff	DS3231_SetDate@BCD_Data,I2C_Mem_Transmit@data
  3021  001524  0ED0               	movlw	208
  3022  001526  EC82  F00C         	call	_I2C_Mem_Transmit
  3023  00152A  0012               	return		;funcret
  3024  00152C                     __end_of_DS3231_SetDate:
  3025                           	opt callstack 0
  3026                           
  3027 ;; *************** function _I2C_Mem_Transmit *****************
  3028 ;; Defined at:
  3029 ;;		line 55 in file "I2C.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;  addr            1    wreg     unsigned char 
  3032 ;;  MemAddress      1   14[COMRAM] unsigned char 
  3033 ;;  data            1   15[COMRAM] unsigned char 
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;  addr            1   16[COMRAM] unsigned char 
  3036 ;; Return value:  Size  Location     Type
  3037 ;;                  1    wreg      void 
  3038 ;; Registers used:
  3039 ;;		wreg, status,2, status,0, cstack
  3040 ;; Tracked objects:
  3041 ;;		On entry : 0/0
  3042 ;;		On exit  : 0/0
  3043 ;;		Unchanged: 0/0
  3044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3045 ;;      Params:         2       0       0       0       0       0       0       0       0
  3046 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3048 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3049 ;;Total ram usage:        3 bytes
  3050 ;; Hardware stack levels used:    1
  3051 ;; Hardware stack levels required when called:    4
  3052 ;; This function calls:
  3053 ;;		_I2C_Start
  3054 ;;		_I2C_Stop
  3055 ;;		_I2C_Write
  3056 ;; This function is called by:
  3057 ;;		_DS3231_SetSec
  3058 ;;		_DS3231_SetMin
  3059 ;;		_DS3231_SetHour
  3060 ;;		_DS3231_SetDate
  3061 ;;		_DS3231_SetWeek
  3062 ;;		_DS3231_SetMonth
  3063 ;;		_DS3231_SetYear
  3064 ;; This function uses a non-reentrant model
  3065 ;;
  3066                           
  3067                           	psect	text18
  3068  001904                     __ptext18:
  3069                           	opt callstack 0
  3070  001904                     _I2C_Mem_Transmit:
  3071                           	opt callstack 23
  3072                           
  3073                           ;incstack = 0
  3074                           ;I2C_Mem_Transmit@addr stored from wreg
  3075  001904  6E11               	movwf	I2C_Mem_Transmit@addr,c
  3076                           
  3077                           ;I2C.c: 56:     I2C_Start();
  3078  001906  EC13  F00D         	call	_I2C_Start	;wreg free
  3079                           
  3080                           ;I2C.c: 57:     I2C_Write(addr&0xFE);
  3081  00190A  5011               	movf	I2C_Mem_Transmit@addr,w,c
  3082  00190C  0BFE               	andlw	254
  3083  00190E  ECF8  F00C         	call	_I2C_Write
  3084                           
  3085                           ;I2C.c: 58:     I2C_Write(MemAddress);
  3086  001912  500F               	movf	I2C_Mem_Transmit@MemAddress,w,c
  3087  001914  ECF8  F00C         	call	_I2C_Write
  3088                           
  3089                           ;I2C.c: 59:     I2C_Write(data);
  3090  001918  5010               	movf	I2C_Mem_Transmit@data,w,c
  3091  00191A  ECF8  F00C         	call	_I2C_Write
  3092                           
  3093                           ;I2C.c: 60:     I2C_Stop();
  3094  00191E  EC0F  F00D         	call	_I2C_Stop	;wreg free
  3095  001922  0012               	return		;funcret
  3096  001924                     __end_of_I2C_Mem_Transmit:
  3097                           	opt callstack 0
  3098                           
  3099 ;; *************** function _Task_SetBrightness *****************
  3100 ;; Defined at:
  3101 ;;		line 24 in file "Task.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;		None
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;		None
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      void 
  3108 ;; Registers used:
  3109 ;;		wreg, status,2, status,0, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3115 ;;      Params:         0       0       0       0       0       0       0       0       0
  3116 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3117 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3118 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3119 ;;Total ram usage:        1 bytes
  3120 ;; Hardware stack levels used:    1
  3121 ;; Hardware stack levels required when called:    5
  3122 ;; This function calls:
  3123 ;;		_Display_Set_Brightness
  3124 ;;		_Display_Set_NumVal
  3125 ;;		_Display_Set_Point
  3126 ;;		_GetRisingEdge_SW1
  3127 ;;		___awdiv
  3128 ;;		___awmod
  3129 ;; This function is called by:
  3130 ;;		_main
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text19
  3135  0011BA                     __ptext19:
  3136                           	opt callstack 0
  3137  0011BA                     _Task_SetBrightness:
  3138                           	opt callstack 25
  3139                           
  3140                           ;Task.c: 25:     static uint8_t brightness = 8;;Task.c: 26:     if(GetRisingEdge_SW1()) 
      +                          {
  3141                           
  3142                           ;incstack = 0
  3143  0011BA  EC87  F009         	call	_GetRisingEdge_SW1	;wreg free
  3144  0011BE  0900               	iorlw	0
  3145  0011C0  B4D8               	btfsc	status,2,c
  3146  0011C2  D008               	goto	l3172
  3147                           
  3148                           ;Task.c: 27:         if(brightness++ >= 10) {
  3149  0011C4  2A3E               	incf	Task_SetBrightness@brightness,f,c
  3150  0011C6  043E               	decf	Task_SetBrightness@brightness,w,c
  3151  0011C8  6E16               	movwf	??_Task_SetBrightness& (0+255),c
  3152  0011CA  0E09               	movlw	9
  3153  0011CC  6416               	cpfsgt	??_Task_SetBrightness,c
  3154  0011CE  D002               	goto	l3172
  3155                           
  3156                           ;Task.c: 28:             brightness = 1;
  3157  0011D0  0E01               	movlw	1
  3158  0011D2  6E3E               	movwf	Task_SetBrightness@brightness,c
  3159  0011D4                     l3172:
  3160                           
  3161                           ;Task.c: 31:     Display_Set_Brightness(brightness, brightness,
  3162  0011D4  C03E  F00A         	movff	Task_SetBrightness@brightness,Display_Set_Brightness@digit1_val
  3163  0011D8  C03E  F00B         	movff	Task_SetBrightness@brightness,Display_Set_Brightness@digit2_val
  3164  0011DC  C03E  F00C         	movff	Task_SetBrightness@brightness,Display_Set_Brightness@digit3_val
  3165  0011E0  503E               	movf	Task_SetBrightness@brightness,w,c
  3166  0011E2  ECE4  F00C         	call	_Display_Set_Brightness
  3167                           
  3168                           ;Task.c: 33:     Display_Set_NumVal(str_C, Dash, brightness / 10, brightness % 10);
  3169  0011E6  0E0A               	movlw	10
  3170  0011E8  6E12               	movwf	Display_Set_NumVal@digit1_val,c
  3171  0011EA  C03E  F00A         	movff	Task_SetBrightness@brightness,___awdiv@dividend
  3172  0011EE  6A0B               	clrf	___awdiv@dividend+1,c
  3173  0011F0  0E00               	movlw	0
  3174  0011F2  6E0D               	movwf	___awdiv@divisor+1,c
  3175  0011F4  0E0A               	movlw	10
  3176  0011F6  6E0C               	movwf	___awdiv@divisor,c
  3177  0011F8  EC5D  F008         	call	___awdiv	;wreg free
  3178  0011FC  500A               	movf	?___awdiv,w,c
  3179  0011FE  6E13               	movwf	Display_Set_NumVal@digit2_val,c
  3180  001200  C03E  F00A         	movff	Task_SetBrightness@brightness,___awmod@dividend
  3181  001204  6A0B               	clrf	___awmod@dividend+1,c
  3182  001206  0E00               	movlw	0
  3183  001208  6E0D               	movwf	___awmod@divisor+1,c
  3184  00120A  0E0A               	movlw	10
  3185  00120C  6E0C               	movwf	___awmod@divisor,c
  3186  00120E  EC18  F009         	call	___awmod	;wreg free
  3187  001212  500A               	movf	?___awmod,w,c
  3188  001214  6E14               	movwf	Display_Set_NumVal@digit3_val,c
  3189  001216  0E0C               	movlw	12
  3190  001218  ECDA  F00C         	call	_Display_Set_NumVal
  3191                           
  3192                           ;Task.c: 34:     Display_Set_Point(0, 0, 0, 0);
  3193  00121C  0E00               	movlw	0
  3194  00121E  6E0A               	movwf	Display_Set_Point@digit1_val,c
  3195  001220  0E00               	movlw	0
  3196  001222  6E0B               	movwf	Display_Set_Point@digit2_val,c
  3197  001224  0E00               	movlw	0
  3198  001226  6E0C               	movwf	Display_Set_Point@digit3_val,c
  3199  001228  0E00               	movlw	0
  3200  00122A  ECD0  F00C         	call	_Display_Set_Point
  3201  00122E  0012               	return		;funcret
  3202  001230                     __end_of_Task_SetBrightness:
  3203                           	opt callstack 0
  3204                           
  3205 ;; *************** function ___awmod *****************
  3206 ;; Defined at:
  3207 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;  dividend        2    9[COMRAM] int 
  3210 ;;  divisor         2   11[COMRAM] int 
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;  sign            1   14[COMRAM] unsigned char 
  3213 ;;  counter         1   13[COMRAM] unsigned char 
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  2    9[COMRAM] int 
  3216 ;; Registers used:
  3217 ;;		wreg, status,2, status,0
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3223 ;;      Params:         4       0       0       0       0       0       0       0       0
  3224 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3225 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3226 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3227 ;;Total ram usage:        6 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:    2
  3230 ;; This function calls:
  3231 ;;		Nothing
  3232 ;; This function is called by:
  3233 ;;		_DS3231_SetSec
  3234 ;;		_DS3231_SetMin
  3235 ;;		_DS3231_SetHour
  3236 ;;		_DS3231_SetDate
  3237 ;;		_DS3231_SetMonth
  3238 ;;		_DS3231_SetYear
  3239 ;;		_Task_SetBrightness
  3240 ;;		_Task_SetRTC
  3241 ;;		_Task_ShowWeek
  3242 ;;		_Task_ShowDate
  3243 ;;		_Task_ShowTime
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           	psect	text20
  3248  001230                     __ptext20:
  3249                           	opt callstack 0
  3250  001230                     ___awmod:
  3251                           	opt callstack 27
  3252                           
  3253                           ;incstack = 0
  3254  001230  0E00               	movlw	0
  3255  001232  6E0F               	movwf	___awmod@sign,c
  3256  001234  AE0B               	btfss	___awmod@dividend+1,7,c
  3257  001236  D006               	goto	l2750
  3258  001238  6C0A               	negf	___awmod@dividend,c
  3259  00123A  1E0B               	comf	___awmod@dividend+1,f,c
  3260  00123C  B0D8               	btfsc	status,0,c
  3261  00123E  2A0B               	incf	___awmod@dividend+1,f,c
  3262  001240  0E01               	movlw	1
  3263  001242  6E0F               	movwf	___awmod@sign,c
  3264  001244                     l2750:
  3265  001244  AE0D               	btfss	___awmod@divisor+1,7,c
  3266  001246  D004               	goto	l2754
  3267  001248  6C0C               	negf	___awmod@divisor,c
  3268  00124A  1E0D               	comf	___awmod@divisor+1,f,c
  3269  00124C  B0D8               	btfsc	status,0,c
  3270  00124E  2A0D               	incf	___awmod@divisor+1,f,c
  3271  001250                     l2754:
  3272  001250  500C               	movf	___awmod@divisor,w,c
  3273  001252  100D               	iorwf	___awmod@divisor+1,w,c
  3274  001254  B4D8               	btfsc	status,2,c
  3275  001256  D018               	goto	l2770
  3276  001258  0E01               	movlw	1
  3277  00125A  6E0E               	movwf	___awmod@counter,c
  3278  00125C  D004               	goto	l2760
  3279  00125E                     l2758:
  3280  00125E  90D8               	bcf	status,0,c
  3281  001260  360C               	rlcf	___awmod@divisor,f,c
  3282  001262  360D               	rlcf	___awmod@divisor+1,f,c
  3283  001264  2A0E               	incf	___awmod@counter,f,c
  3284  001266                     l2760:
  3285  001266  AE0D               	btfss	___awmod@divisor+1,7,c
  3286  001268  D7FA               	goto	l2758
  3287  00126A                     u2440:
  3288  00126A  500C               	movf	___awmod@divisor,w,c
  3289  00126C  5C0A               	subwf	___awmod@dividend,w,c
  3290  00126E  500D               	movf	___awmod@divisor+1,w,c
  3291  001270  580B               	subwfb	___awmod@dividend+1,w,c
  3292  001272  A0D8               	btfss	status,0,c
  3293  001274  D004               	goto	l2766
  3294  001276  500C               	movf	___awmod@divisor,w,c
  3295  001278  5E0A               	subwf	___awmod@dividend,f,c
  3296  00127A  500D               	movf	___awmod@divisor+1,w,c
  3297  00127C  5A0B               	subwfb	___awmod@dividend+1,f,c
  3298  00127E                     l2766:
  3299  00127E  90D8               	bcf	status,0,c
  3300  001280  320D               	rrcf	___awmod@divisor+1,f,c
  3301  001282  320C               	rrcf	___awmod@divisor,f,c
  3302  001284  2E0E               	decfsz	___awmod@counter,f,c
  3303  001286  D7F1               	goto	u2440
  3304  001288                     l2770:
  3305  001288  500F               	movf	___awmod@sign,w,c
  3306  00128A  B4D8               	btfsc	status,2,c
  3307  00128C  D004               	goto	l2774
  3308  00128E  6C0A               	negf	___awmod@dividend,c
  3309  001290  1E0B               	comf	___awmod@dividend+1,f,c
  3310  001292  B0D8               	btfsc	status,0,c
  3311  001294  2A0B               	incf	___awmod@dividend+1,f,c
  3312  001296                     l2774:
  3313  001296  C00A  F00A         	movff	___awmod@dividend,?___awmod
  3314  00129A  C00B  F00B         	movff	___awmod@dividend+1,?___awmod+1
  3315  00129E  0012               	return		;funcret
  3316  0012A0                     __end_of___awmod:
  3317                           	opt callstack 0
  3318                           
  3319 ;; *************** function ___awdiv *****************
  3320 ;; Defined at:
  3321 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;  dividend        2    9[COMRAM] int 
  3324 ;;  divisor         2   11[COMRAM] int 
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;  quotient        2   15[COMRAM] int 
  3327 ;;  sign            1   14[COMRAM] unsigned char 
  3328 ;;  counter         1   13[COMRAM] unsigned char 
  3329 ;; Return value:  Size  Location     Type
  3330 ;;                  2    9[COMRAM] int 
  3331 ;; Registers used:
  3332 ;;		wreg, status,2, status,0
  3333 ;; Tracked objects:
  3334 ;;		On entry : 0/0
  3335 ;;		On exit  : 0/0
  3336 ;;		Unchanged: 0/0
  3337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3338 ;;      Params:         4       0       0       0       0       0       0       0       0
  3339 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3341 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3342 ;;Total ram usage:        8 bytes
  3343 ;; Hardware stack levels used:    1
  3344 ;; Hardware stack levels required when called:    2
  3345 ;; This function calls:
  3346 ;;		Nothing
  3347 ;; This function is called by:
  3348 ;;		_DS3231_SetSec
  3349 ;;		_DS3231_SetMin
  3350 ;;		_DS3231_SetHour
  3351 ;;		_DS3231_SetDate
  3352 ;;		_DS3231_SetMonth
  3353 ;;		_DS3231_SetYear
  3354 ;;		_Task_SetBrightness
  3355 ;;		_Task_SetRTC
  3356 ;;		_Task_ShowDate
  3357 ;;		_Task_ShowTime
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text21
  3362  0010BA                     __ptext21:
  3363                           	opt callstack 0
  3364  0010BA                     ___awdiv:
  3365                           	opt callstack 27
  3366                           
  3367                           ;incstack = 0
  3368  0010BA  0E00               	movlw	0
  3369  0010BC  6E0F               	movwf	___awdiv@sign,c
  3370  0010BE  AE0D               	btfss	___awdiv@divisor+1,7,c
  3371  0010C0  D006               	goto	l2706
  3372  0010C2  6C0C               	negf	___awdiv@divisor,c
  3373  0010C4  1E0D               	comf	___awdiv@divisor+1,f,c
  3374  0010C6  B0D8               	btfsc	status,0,c
  3375  0010C8  2A0D               	incf	___awdiv@divisor+1,f,c
  3376  0010CA  0E01               	movlw	1
  3377  0010CC  6E0F               	movwf	___awdiv@sign,c
  3378  0010CE                     l2706:
  3379  0010CE  AE0B               	btfss	___awdiv@dividend+1,7,c
  3380  0010D0  D006               	goto	l2712
  3381  0010D2  6C0A               	negf	___awdiv@dividend,c
  3382  0010D4  1E0B               	comf	___awdiv@dividend+1,f,c
  3383  0010D6  B0D8               	btfsc	status,0,c
  3384  0010D8  2A0B               	incf	___awdiv@dividend+1,f,c
  3385  0010DA  0E01               	movlw	1
  3386  0010DC  1A0F               	xorwf	___awdiv@sign,f,c
  3387  0010DE                     l2712:
  3388  0010DE  0E00               	movlw	0
  3389  0010E0  6E11               	movwf	___awdiv@quotient+1,c
  3390  0010E2  0E00               	movlw	0
  3391  0010E4  6E10               	movwf	___awdiv@quotient,c
  3392  0010E6  500C               	movf	___awdiv@divisor,w,c
  3393  0010E8  100D               	iorwf	___awdiv@divisor+1,w,c
  3394  0010EA  B4D8               	btfsc	status,2,c
  3395  0010EC  D01C               	goto	l2734
  3396  0010EE  0E01               	movlw	1
  3397  0010F0  6E0E               	movwf	___awdiv@counter,c
  3398  0010F2  D004               	goto	l2720
  3399  0010F4                     l2718:
  3400  0010F4  90D8               	bcf	status,0,c
  3401  0010F6  360C               	rlcf	___awdiv@divisor,f,c
  3402  0010F8  360D               	rlcf	___awdiv@divisor+1,f,c
  3403  0010FA  2A0E               	incf	___awdiv@counter,f,c
  3404  0010FC                     l2720:
  3405  0010FC  AE0D               	btfss	___awdiv@divisor+1,7,c
  3406  0010FE  D7FA               	goto	l2718
  3407  001100                     u2380:
  3408  001100  90D8               	bcf	status,0,c
  3409  001102  3610               	rlcf	___awdiv@quotient,f,c
  3410  001104  3611               	rlcf	___awdiv@quotient+1,f,c
  3411  001106  500C               	movf	___awdiv@divisor,w,c
  3412  001108  5C0A               	subwf	___awdiv@dividend,w,c
  3413  00110A  500D               	movf	___awdiv@divisor+1,w,c
  3414  00110C  580B               	subwfb	___awdiv@dividend+1,w,c
  3415  00110E  A0D8               	btfss	status,0,c
  3416  001110  D005               	goto	l2730
  3417  001112  500C               	movf	___awdiv@divisor,w,c
  3418  001114  5E0A               	subwf	___awdiv@dividend,f,c
  3419  001116  500D               	movf	___awdiv@divisor+1,w,c
  3420  001118  5A0B               	subwfb	___awdiv@dividend+1,f,c
  3421  00111A  8010               	bsf	___awdiv@quotient,0,c
  3422  00111C                     l2730:
  3423  00111C  90D8               	bcf	status,0,c
  3424  00111E  320D               	rrcf	___awdiv@divisor+1,f,c
  3425  001120  320C               	rrcf	___awdiv@divisor,f,c
  3426  001122  2E0E               	decfsz	___awdiv@counter,f,c
  3427  001124  D7ED               	goto	u2380
  3428  001126                     l2734:
  3429  001126  500F               	movf	___awdiv@sign,w,c
  3430  001128  B4D8               	btfsc	status,2,c
  3431  00112A  D004               	goto	l2738
  3432  00112C  6C10               	negf	___awdiv@quotient,c
  3433  00112E  1E11               	comf	___awdiv@quotient+1,f,c
  3434  001130  B0D8               	btfsc	status,0,c
  3435  001132  2A11               	incf	___awdiv@quotient+1,f,c
  3436  001134                     l2738:
  3437  001134  C010  F00A         	movff	___awdiv@quotient,?___awdiv
  3438  001138  C011  F00B         	movff	___awdiv@quotient+1,?___awdiv+1
  3439  00113C  0012               	return		;funcret
  3440  00113E                     __end_of___awdiv:
  3441                           	opt callstack 0
  3442                           
  3443 ;; *************** function _GetRisingEdge_SW1 *****************
  3444 ;; Defined at:
  3445 ;;		line 127 in file "main.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;		None
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;		None
  3450 ;; Return value:  Size  Location     Type
  3451 ;;                  1    wreg      _Bool 
  3452 ;; Registers used:
  3453 ;;		wreg, status,2, status,0, cstack
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3459 ;;      Params:         0       0       0       0       0       0       0       0       0
  3460 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3461 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3462 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3463 ;;Total ram usage:        2 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    4
  3466 ;; This function calls:
  3467 ;;		_MySystick_ms
  3468 ;;		_abs
  3469 ;; This function is called by:
  3470 ;;		_main
  3471 ;;		_Task_IncrementVal
  3472 ;;		_Task_SetBrightness
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           	psect	text22
  3477  00130E                     __ptext22:
  3478                           	opt callstack 0
  3479  00130E                     _GetRisingEdge_SW1:
  3480                           	opt callstack 24
  3481                           
  3482                           ;main.c: 128:     static _Bool exist = 0;;main.c: 129:     static _Bool Ready_f = 0;;mai
      +                          n.c: 130:     static int old_cnt = 0;;main.c: 132:     if(PORTEbits.RE0 == 0) {
  3483                           
  3484                           ;incstack = 0
  3485  00130E  B084               	btfsc	3972,0,c	;volatile
  3486  001310  D004               	goto	l147
  3487                           
  3488                           ;main.c: 133:         exist = 0;
  3489  001312  0E00               	movlw	0
  3490  001314  6E38               	movwf	GetRisingEdge_SW1@exist,c
  3491                           
  3492                           ;main.c: 134:         Ready_f = 1;
  3493  001316  0E01               	movlw	1
  3494  001318  6E37               	movwf	GetRisingEdge_SW1@Ready_f,c
  3495  00131A                     l147:
  3496                           
  3497                           ;main.c: 137:     if(Ready_f) {
  3498  00131A  5037               	movf	GetRisingEdge_SW1@Ready_f,w,c
  3499  00131C  B4D8               	btfsc	status,2,c
  3500  00131E  D028               	goto	l2796
  3501                           
  3502                           ;main.c: 138:         if(abs(MySystick_ms() - old_cnt) >= 50) {
  3503  001320  EC18  F00A         	call	_MySystick_ms	;wreg free
  3504  001324  0100               	movlb	0	; () banked
  3505  001326  5186               	movf	GetRisingEdge_SW1@old_cnt& (0+255),w,b
  3506  001328  5C0E               	subwf	?_MySystick_ms,w,c
  3507  00132A  6E12               	movwf	_GetRisingEdge_SW1$1851,c
  3508  00132C  5187               	movf	(GetRisingEdge_SW1@old_cnt+1)& (0+255),w,b
  3509  00132E  580F               	subwfb	?_MySystick_ms+1,w,c
  3510  001330  6E13               	movwf	_GetRisingEdge_SW1$1851+1,c
  3511                           
  3512                           ;main.c: 138:         if(abs(MySystick_ms() - old_cnt) >= 50) {
  3513  001332  C012  F00A         	movff	_GetRisingEdge_SW1$1851,abs@a
  3514  001336  C013  F00B         	movff	_GetRisingEdge_SW1$1851+1,abs@a+1
  3515  00133A  ECCA  F00B         	call	_abs	;wreg free
  3516  00133E  BE0B               	btfsc	?_abs+1,7,c
  3517  001340  D013               	goto	l149
  3518  001342  500B               	movf	?_abs+1,w,c
  3519  001344  E104               	bnz	u2490
  3520  001346  0E32               	movlw	50
  3521  001348  5C0A               	subwf	?_abs,w,c
  3522  00134A  A0D8               	btfss	status,0,c
  3523  00134C  D00D               	goto	l149
  3524  00134E                     u2490:
  3525                           
  3526                           ;main.c: 139:             old_cnt = MySystick_ms();
  3527  00134E  EC18  F00A         	call	_MySystick_ms	;wreg free
  3528  001352  C00E  F086         	movff	?_MySystick_ms,GetRisingEdge_SW1@old_cnt
  3529  001356  C00F  F087         	movff	?_MySystick_ms+1,GetRisingEdge_SW1@old_cnt+1
  3530                           
  3531                           ;main.c: 140:             Ready_f = 0;
  3532  00135A  0E00               	movlw	0
  3533  00135C  6E37               	movwf	GetRisingEdge_SW1@Ready_f,c
  3534                           
  3535                           ;main.c: 141:             if(exist) return 1;
  3536  00135E  5038               	movf	GetRisingEdge_SW1@exist,w,c
  3537  001360  B4D8               	btfsc	status,2,c
  3538  001362  D006               	goto	l2796
  3539  001364  0E01               	movlw	1
  3540  001366  0012               	return	
  3541  001368                     l149:
  3542                           
  3543                           ;main.c: 144:             if(PORTEbits.RE0 == 1) exist = 1;
  3544  001368  A084               	btfss	3972,0,c	;volatile
  3545  00136A  D002               	goto	l2796
  3546  00136C  0E01               	movlw	1
  3547  00136E  6E38               	movwf	GetRisingEdge_SW1@exist,c
  3548  001370                     l2796:
  3549                           
  3550                           ;main.c: 147:     return 0;
  3551  001370  0E00               	movlw	0
  3552  001372  0012               	return		;funcret
  3553  001374                     __end_of_GetRisingEdge_SW1:
  3554                           	opt callstack 0
  3555                           
  3556 ;; *************** function _MySystick_ms *****************
  3557 ;; Defined at:
  3558 ;;		line 150 in file "main.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;		None
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;		None
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  2   13[COMRAM] int 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0, cstack
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3572 ;;      Params:         2       0       0       0       0       0       0       0       0
  3573 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3574 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3575 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3576 ;;Total ram usage:        4 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    3
  3579 ;; This function calls:
  3580 ;;		_abs
  3581 ;; This function is called by:
  3582 ;;		_PressOverTime_SW1
  3583 ;;		_GetRisingEdge_SW2
  3584 ;;		_GetRisingEdge_SW1
  3585 ;;		_Task_IncrementVal
  3586 ;;		_Task_SetRTC
  3587 ;;		_PressOverTime_SW2
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           	psect	text23
  3592  001430                     __ptext23:
  3593                           	opt callstack 0
  3594  001430                     _MySystick_ms:
  3595                           	opt callstack 24
  3596                           
  3597                           ;main.c: 151:     static int cnt = 0;;main.c: 152:     static uint16_t old_cnt = 0;;main
      +                          .c: 153:     if(abs(TMR1 - old_cnt) >= 1500) {
  3598                           
  3599                           ;incstack = 0
  3600  001430  0100               	movlb	0	; () banked
  3601  001432  5184               	movf	MySystick_ms@old_cnt& (0+255),w,b
  3602  001434  5CCE               	subwf	4046,w,c	;volatile
  3603  001436  6E0A               	movwf	abs@a,c
  3604  001438  5185               	movf	(MySystick_ms@old_cnt+1)& (0+255),w,b
  3605  00143A  58CF               	subwfb	4047,w,c	;volatile
  3606  00143C  6E0B               	movwf	abs@a+1,c
  3607  00143E  ECCA  F00B         	call	_abs	;wreg free
  3608  001442  BE0B               	btfsc	?_abs+1,7,c
  3609  001444  D01C               	goto	l2678
  3610  001446  0EDC               	movlw	220
  3611  001448  5C0A               	subwf	?_abs,w,c
  3612  00144A  0E05               	movlw	5
  3613  00144C  580B               	subwfb	?_abs+1,w,c
  3614  00144E  A0D8               	btfss	status,0,c
  3615  001450  D016               	goto	l2678
  3616                           
  3617                           ;main.c: 154:         old_cnt = TMR1;
  3618  001452  CFCE F084          	movff	4046,MySystick_ms@old_cnt	;volatile
  3619  001456  CFCF F085          	movff	4047,MySystick_ms@old_cnt+1	;volatile
  3620                           
  3621                           ;main.c: 155:         if(cnt++ >= 9999) cnt = 0;
  3622  00145A  502A               	movf	MySystick_ms@cnt,w,c
  3623  00145C  6E10               	movwf	??_MySystick_ms& (0+255),c
  3624  00145E  502B               	movf	MySystick_ms@cnt+1,w,c
  3625  001460  6E11               	movwf	(??_MySystick_ms+1)& (0+255),c
  3626  001462  4A2A               	infsnz	MySystick_ms@cnt,f,c
  3627  001464  2A2B               	incf	MySystick_ms@cnt+1,f,c
  3628  001466  BE11               	btfsc	??_MySystick_ms+1,7,c
  3629  001468  D00A               	goto	l2678
  3630  00146A  0E0F               	movlw	15
  3631  00146C  5C10               	subwf	??_MySystick_ms,w,c
  3632  00146E  0E27               	movlw	39
  3633  001470  5811               	subwfb	??_MySystick_ms+1,w,c
  3634  001472  A0D8               	btfss	status,0,c
  3635  001474  D004               	goto	l2678
  3636  001476  0E00               	movlw	0
  3637  001478  6E2B               	movwf	MySystick_ms@cnt+1,c
  3638  00147A  0E00               	movlw	0
  3639  00147C  6E2A               	movwf	MySystick_ms@cnt,c
  3640  00147E                     l2678:
  3641                           
  3642                           ;main.c: 157:     return cnt;
  3643  00147E  C02A  F00E         	movff	MySystick_ms@cnt,?_MySystick_ms
  3644  001482  C02B  F00F         	movff	MySystick_ms@cnt+1,?_MySystick_ms+1
  3645  001486  0012               	return		;funcret
  3646  001488                     __end_of_MySystick_ms:
  3647                           	opt callstack 0
  3648                           
  3649 ;; *************** function _abs *****************
  3650 ;; Defined at:
  3651 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;  a               2    9[COMRAM] int 
  3654 ;; Auto vars:     Size  Location     Type
  3655 ;;		None
  3656 ;; Return value:  Size  Location     Type
  3657 ;;                  2    9[COMRAM] int 
  3658 ;; Registers used:
  3659 ;;		wreg, status,2, status,0
  3660 ;; Tracked objects:
  3661 ;;		On entry : 0/0
  3662 ;;		On exit  : 0/0
  3663 ;;		Unchanged: 0/0
  3664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3665 ;;      Params:         2       0       0       0       0       0       0       0       0
  3666 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3667 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3668 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3669 ;;Total ram usage:        4 bytes
  3670 ;; Hardware stack levels used:    1
  3671 ;; Hardware stack levels required when called:    2
  3672 ;; This function calls:
  3673 ;;		Nothing
  3674 ;; This function is called by:
  3675 ;;		_PressOverTime_SW1
  3676 ;;		_GetRisingEdge_SW2
  3677 ;;		_GetRisingEdge_SW1
  3678 ;;		_MySystick_ms
  3679 ;;		_Task_IncrementVal
  3680 ;;		_Task_SetRTC
  3681 ;;		_PressOverTime_SW2
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           	psect	text24
  3686  001794                     __ptext24:
  3687                           	opt callstack 0
  3688  001794                     _abs:
  3689                           	opt callstack 27
  3690                           
  3691                           ;incstack = 0
  3692  001794  BE0B               	btfsc	abs@a+1,7,c
  3693  001796  D005               	goto	u2280
  3694  001798  500B               	movf	abs@a+1,w,c
  3695  00179A  E110               	bnz	l1151
  3696  00179C  040A               	decf	abs@a,w,c
  3697  00179E  B0D8               	btfsc	status,0,c
  3698  0017A0  D00D               	goto	l1151
  3699  0017A2                     u2280:
  3700  0017A2  C00A  F00C         	movff	abs@a,??_abs
  3701  0017A6  C00B  F00D         	movff	abs@a+1,??_abs+1
  3702  0017AA  1E0C               	comf	??_abs,f,c
  3703  0017AC  1E0D               	comf	??_abs+1,f,c
  3704  0017AE  4A0C               	infsnz	??_abs,f,c
  3705  0017B0  2A0D               	incf	??_abs+1,f,c
  3706  0017B2  C00C  F00A         	movff	??_abs,?_abs
  3707  0017B6  C00D  F00B         	movff	??_abs+1,?_abs+1
  3708  0017BA  0012               	return	
  3709  0017BC                     l1151:
  3710  0017BC  C00A  F00A         	movff	abs@a,?_abs
  3711  0017C0  C00B  F00B         	movff	abs@a+1,?_abs+1
  3712  0017C4  0012               	return		;funcret
  3713  0017C6                     __end_of_abs:
  3714                           	opt callstack 0
  3715                           
  3716 ;; *************** function _Display_Set_Point *****************
  3717 ;; Defined at:
  3718 ;;		line 41 in file "Display.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;  digit0_val      1    wreg     _Bool 
  3721 ;;  digit1_val      1    9[COMRAM] _Bool 
  3722 ;;  digit2_val      1   10[COMRAM] _Bool 
  3723 ;;  digit3_val      1   11[COMRAM] _Bool 
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;  digit0_val      1   12[COMRAM] _Bool 
  3726 ;; Return value:  Size  Location     Type
  3727 ;;                  1    wreg      void 
  3728 ;; Registers used:
  3729 ;;		wreg
  3730 ;; Tracked objects:
  3731 ;;		On entry : 0/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3735 ;;      Params:         3       0       0       0       0       0       0       0       0
  3736 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3737 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3738 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3739 ;;Total ram usage:        4 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; Hardware stack levels required when called:    2
  3742 ;; This function calls:
  3743 ;;		Nothing
  3744 ;; This function is called by:
  3745 ;;		_main
  3746 ;;		_Task_SetBrightness
  3747 ;;		_Task_SetRTC
  3748 ;;		_Task_ShowWeek
  3749 ;;		_Task_ShowDate
  3750 ;;		_Task_ShowTime
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           	psect	text25
  3755  0019A0                     __ptext25:
  3756                           	opt callstack 0
  3757  0019A0                     _Display_Set_Point:
  3758                           	opt callstack 27
  3759                           
  3760                           ;incstack = 0
  3761                           ;Display_Set_Point@digit0_val stored from wreg
  3762  0019A0  6E0D               	movwf	Display_Set_Point@digit0_val,c
  3763                           
  3764                           ;Display.c: 42:         _Bool digit0_val, _Bool digit1_val,;Display.c: 43:         _Bool
      +                           digit2_val, _Bool digit3_val) {;Display.c: 44:     MyDisplay.Point[0] = digit0_val;
  3765  0019A2  C00D  F097         	movff	Display_Set_Point@digit0_val,_MyDisplay+8
  3766                           
  3767                           ;Display.c: 45:     MyDisplay.Point[1] = digit1_val;
  3768  0019A6  C00A  F098         	movff	Display_Set_Point@digit1_val,_MyDisplay+9
  3769                           
  3770                           ;Display.c: 46:     MyDisplay.Point[2] = digit2_val;
  3771  0019AA  C00B  F099         	movff	Display_Set_Point@digit2_val,_MyDisplay+10
  3772                           
  3773                           ;Display.c: 47:     MyDisplay.Point[3] = digit3_val;
  3774  0019AE  C00C  F09A         	movff	Display_Set_Point@digit3_val,_MyDisplay+11
  3775  0019B2  0012               	return		;funcret
  3776  0019B4                     __end_of_Display_Set_Point:
  3777                           	opt callstack 0
  3778                           
  3779 ;; *************** function _Display_Set_NumVal *****************
  3780 ;; Defined at:
  3781 ;;		line 32 in file "Display.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;  digit0_val      1    wreg     unsigned char 
  3784 ;;  digit1_val      1   17[COMRAM] unsigned char 
  3785 ;;  digit2_val      1   18[COMRAM] unsigned char 
  3786 ;;  digit3_val      1   19[COMRAM] unsigned char 
  3787 ;; Auto vars:     Size  Location     Type
  3788 ;;  digit0_val      1   20[COMRAM] unsigned char 
  3789 ;; Return value:  Size  Location     Type
  3790 ;;                  1    wreg      void 
  3791 ;; Registers used:
  3792 ;;		wreg
  3793 ;; Tracked objects:
  3794 ;;		On entry : 0/0
  3795 ;;		On exit  : 0/0
  3796 ;;		Unchanged: 0/0
  3797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3798 ;;      Params:         3       0       0       0       0       0       0       0       0
  3799 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3800 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3801 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3802 ;;Total ram usage:        4 bytes
  3803 ;; Hardware stack levels used:    1
  3804 ;; Hardware stack levels required when called:    2
  3805 ;; This function calls:
  3806 ;;		Nothing
  3807 ;; This function is called by:
  3808 ;;		_main
  3809 ;;		_Task_SetBrightness
  3810 ;;		_Task_SetRTC
  3811 ;;		_Task_ShowWeek
  3812 ;;		_Task_ShowDate
  3813 ;;		_Task_ShowTime
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           	psect	text26
  3818  0019B4                     __ptext26:
  3819                           	opt callstack 0
  3820  0019B4                     _Display_Set_NumVal:
  3821                           	opt callstack 27
  3822                           
  3823                           ;incstack = 0
  3824                           ;Display_Set_NumVal@digit0_val stored from wreg
  3825  0019B4  6E15               	movwf	Display_Set_NumVal@digit0_val,c
  3826                           
  3827                           ;Display.c: 33:         uint8_t digit0_val, uint8_t digit1_val,;Display.c: 34:         u
      +                          int8_t digit2_val, uint8_t digit3_val) {;Display.c: 35:     MyDisplay.NumVal[0] = digit0
      +                          _val;
  3828  0019B6  C015  F093         	movff	Display_Set_NumVal@digit0_val,_MyDisplay+4
  3829                           
  3830                           ;Display.c: 36:     MyDisplay.NumVal[1] = digit1_val;
  3831  0019BA  C012  F094         	movff	Display_Set_NumVal@digit1_val,_MyDisplay+5
  3832                           
  3833                           ;Display.c: 37:     MyDisplay.NumVal[2] = digit2_val;
  3834  0019BE  C013  F095         	movff	Display_Set_NumVal@digit2_val,_MyDisplay+6
  3835                           
  3836                           ;Display.c: 38:     MyDisplay.NumVal[3] = digit3_val;
  3837  0019C2  C014  F096         	movff	Display_Set_NumVal@digit3_val,_MyDisplay+7
  3838  0019C6  0012               	return		;funcret
  3839  0019C8                     __end_of_Display_Set_NumVal:
  3840                           	opt callstack 0
  3841                           
  3842 ;; *************** function _Display_Set_Brightness *****************
  3843 ;; Defined at:
  3844 ;;		line 23 in file "Display.c"
  3845 ;; Parameters:    Size  Location     Type
  3846 ;;  digit0_val      1    wreg     unsigned char 
  3847 ;;  digit1_val      1    9[COMRAM] unsigned char 
  3848 ;;  digit2_val      1   10[COMRAM] unsigned char 
  3849 ;;  digit3_val      1   11[COMRAM] unsigned char 
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  digit0_val      1   12[COMRAM] unsigned char 
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  1    wreg      void 
  3854 ;; Registers used:
  3855 ;;		wreg
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3861 ;;      Params:         3       0       0       0       0       0       0       0       0
  3862 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3863 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3864 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3865 ;;Total ram usage:        4 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; Hardware stack levels required when called:    2
  3868 ;; This function calls:
  3869 ;;		Nothing
  3870 ;; This function is called by:
  3871 ;;		_Task_SetBrightness
  3872 ;; This function uses a non-reentrant model
  3873 ;;
  3874                           
  3875                           	psect	text27
  3876  0019C8                     __ptext27:
  3877                           	opt callstack 0
  3878  0019C8                     _Display_Set_Brightness:
  3879                           	opt callstack 27
  3880                           
  3881                           ;incstack = 0
  3882                           ;Display_Set_Brightness@digit0_val stored from wreg
  3883  0019C8  6E0D               	movwf	Display_Set_Brightness@digit0_val,c
  3884                           
  3885                           ;Display.c: 24:         uint8_t digit0_val, uint8_t digit1_val,;Display.c: 25:         u
      +                          int8_t digit2_val, uint8_t digit3_val) {;Display.c: 26:     MyDisplay.Brightness[0] = di
      +                          git0_val;
  3886  0019CA  C00D  F08F         	movff	Display_Set_Brightness@digit0_val,_MyDisplay
  3887                           
  3888                           ;Display.c: 27:     MyDisplay.Brightness[1] = digit1_val;
  3889  0019CE  C00A  F090         	movff	Display_Set_Brightness@digit1_val,_MyDisplay+1
  3890                           
  3891                           ;Display.c: 28:     MyDisplay.Brightness[2] = digit2_val;
  3892  0019D2  C00B  F091         	movff	Display_Set_Brightness@digit2_val,_MyDisplay+2
  3893                           
  3894                           ;Display.c: 29:     MyDisplay.Brightness[3] = digit3_val;
  3895  0019D6  C00C  F092         	movff	Display_Set_Brightness@digit3_val,_MyDisplay+3
  3896  0019DA  0012               	return		;funcret
  3897  0019DC                     __end_of_Display_Set_Brightness:
  3898                           	opt callstack 0
  3899                           
  3900 ;; *************** function _Interrupt_Init *****************
  3901 ;; Defined at:
  3902 ;;		line 168 in file "main.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;		None
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;		None
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      void 
  3909 ;; Registers used:
  3910 ;;		None
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3916 ;;      Params:         0       0       0       0       0       0       0       0       0
  3917 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3918 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3919 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3920 ;;Total ram usage:        0 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    2
  3923 ;; This function calls:
  3924 ;;		Nothing
  3925 ;; This function is called by:
  3926 ;;		_main
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           	psect	text28
  3931  001A04                     __ptext28:
  3932                           	opt callstack 0
  3933  001A04                     _Interrupt_Init:
  3934                           	opt callstack 28
  3935                           
  3936                           ;main.c: 169:     INTCONbits.PEIE = 1;
  3937                           
  3938                           ;incstack = 0
  3939  001A04  8CF2               	bsf	4082,6,c	;volatile
  3940                           
  3941                           ;main.c: 170:     INTCONbits.GIE = 1;
  3942  001A06  8EF2               	bsf	4082,7,c	;volatile
  3943                           
  3944                           ;main.c: 171:     RCONbits.IPEN = 1;
  3945  001A08  8ED0               	bsf	4048,7,c	;volatile
  3946                           
  3947                           ;main.c: 172:     INTCON2bits.TMR0IP = 1;
  3948  001A0A  84F1               	bsf	4081,2,c	;volatile
  3949                           
  3950                           ;main.c: 173:     INTCONbits.TMR0IF = 0;
  3951  001A0C  94F2               	bcf	4082,2,c	;volatile
  3952                           
  3953                           ;main.c: 174:     INTCONbits.TMR0IE = 1;
  3954  001A0E  8AF2               	bsf	4082,5,c	;volatile
  3955  001A10  0012               	return		;funcret
  3956  001A12                     __end_of_Interrupt_Init:
  3957                           	opt callstack 0
  3958                           
  3959 ;; *************** function _GPIO_Init *****************
  3960 ;; Defined at:
  3961 ;;		line 160 in file "main.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;		None
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;		None
  3966 ;; Return value:  Size  Location     Type
  3967 ;;                  1    wreg      void 
  3968 ;; Registers used:
  3969 ;;		wreg, status,2
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3975 ;;      Params:         0       0       0       0       0       0       0       0       0
  3976 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3977 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3978 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3979 ;;Total ram usage:        0 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; Hardware stack levels required when called:    2
  3982 ;; This function calls:
  3983 ;;		Nothing
  3984 ;; This function is called by:
  3985 ;;		_main
  3986 ;; This function uses a non-reentrant model
  3987 ;;
  3988                           
  3989                           	psect	text29
  3990  0019DC                     __ptext29:
  3991                           	opt callstack 0
  3992  0019DC                     _GPIO_Init:
  3993                           	opt callstack 28
  3994                           
  3995                           ;main.c: 161:     ADCON1 = 0x0B;
  3996                           
  3997                           ;incstack = 0
  3998  0019DC  0E0B               	movlw	11
  3999  0019DE  6EC1               	movwf	4033,c	;volatile
  4000                           
  4001                           ;main.c: 162:     TRISB = 0x00;
  4002  0019E0  0E00               	movlw	0
  4003  0019E2  6E93               	movwf	3987,c	;volatile
  4004                           
  4005                           ;main.c: 163:     TRISC = 0xFF;
  4006  0019E4  6894               	setf	3988,c	;volatile
  4007                           
  4008                           ;main.c: 164:     TRISD = 0X00;
  4009  0019E6  0E00               	movlw	0
  4010  0019E8  6E95               	movwf	3989,c	;volatile
  4011                           
  4012                           ;main.c: 165:     TRISE = 0x0f;
  4013  0019EA  0E0F               	movlw	15
  4014  0019EC  6E96               	movwf	3990,c	;volatile
  4015  0019EE  0012               	return		;funcret
  4016  0019F0                     __end_of_GPIO_Init:
  4017                           	opt callstack 0
  4018                           
  4019 ;; *************** function _DS3231_ReadAll *****************
  4020 ;; Defined at:
  4021 ;;		line 121 in file "DS3231.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  time            2   22[COMRAM] PTR struct .
  4024 ;;		 -> MyRTC(7), 
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;		None
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      void 
  4029 ;; Registers used:
  4030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4036 ;;      Params:         2       0       0       0       0       0       0       0       0
  4037 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4038 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4039 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4040 ;;Total ram usage:        3 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; Hardware stack levels required when called:    6
  4043 ;; This function calls:
  4044 ;;		_DS3231_DateRead
  4045 ;;		_DS3231_HourRead
  4046 ;;		_DS3231_MinRead
  4047 ;;		_DS3231_MonthRead
  4048 ;;		_DS3231_SecRead
  4049 ;;		_DS3231_WeekRead
  4050 ;;		_DS3231_YearRead
  4051 ;; This function is called by:
  4052 ;;		_main
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text30
  4057  000F12                     __ptext30:
  4058                           	opt callstack 0
  4059  000F12                     _DS3231_ReadAll:
  4060                           	opt callstack 24
  4061                           
  4062                           ;DS3231.c: 122:    time->Sec = DS3231_SecRead();
  4063                           
  4064                           ;incstack = 0
  4065  000F12  EC42  F00C         	call	_DS3231_SecRead	;wreg free
  4066  000F16  6E19               	movwf	??_DS3231_ReadAll& (0+255),c
  4067  000F18  EE20 F002          	lfsr	2,2
  4068  000F1C  5017               	movf	DS3231_ReadAll@time,w,c
  4069  000F1E  26D9               	addwf	fsr2l,f,c
  4070  000F20  5018               	movf	DS3231_ReadAll@time+1,w,c
  4071  000F22  22DA               	addwfc	fsr2h,f,c
  4072  000F24  C019  FFDF         	movff	??_DS3231_ReadAll,indf2
  4073                           
  4074                           ;DS3231.c: 123:    time->Min = DS3231_MinRead();
  4075  000F28  EC59  F00C         	call	_DS3231_MinRead	;wreg free
  4076  000F2C  6E19               	movwf	??_DS3231_ReadAll& (0+255),c
  4077  000F2E  EE20 F001          	lfsr	2,1
  4078  000F32  5017               	movf	DS3231_ReadAll@time,w,c
  4079  000F34  26D9               	addwf	fsr2l,f,c
  4080  000F36  5018               	movf	DS3231_ReadAll@time+1,w,c
  4081  000F38  22DA               	addwfc	fsr2h,f,c
  4082  000F3A  C019  FFDF         	movff	??_DS3231_ReadAll,indf2
  4083                           
  4084                           ;DS3231.c: 124:    time->Hour = DS3231_HourRead();
  4085  000F3E  ECFB  F00B         	call	_DS3231_HourRead	;wreg free
  4086  000F42  C017  FFD9         	movff	DS3231_ReadAll@time,fsr2l
  4087  000F46  C018  FFDA         	movff	DS3231_ReadAll@time+1,fsr2h
  4088  000F4A  6EDF               	movwf	indf2,c
  4089                           
  4090                           ;DS3231.c: 125:    time->Date = DS3231_DateRead();
  4091  000F4C  EC13  F00C         	call	_DS3231_DateRead	;wreg free
  4092  000F50  6E19               	movwf	??_DS3231_ReadAll& (0+255),c
  4093  000F52  EE20 F006          	lfsr	2,6
  4094  000F56  5017               	movf	DS3231_ReadAll@time,w,c
  4095  000F58  26D9               	addwf	fsr2l,f,c
  4096  000F5A  5018               	movf	DS3231_ReadAll@time+1,w,c
  4097  000F5C  22DA               	addwfc	fsr2h,f,c
  4098  000F5E  C019  FFDF         	movff	??_DS3231_ReadAll,indf2
  4099                           
  4100                           ;DS3231.c: 126:    time->Week = DS3231_WeekRead();
  4101  000F62  ECA1  F00C         	call	_DS3231_WeekRead	;wreg free
  4102  000F66  6E19               	movwf	??_DS3231_ReadAll& (0+255),c
  4103  000F68  EE20 F005          	lfsr	2,5
  4104  000F6C  5017               	movf	DS3231_ReadAll@time,w,c
  4105  000F6E  26D9               	addwf	fsr2l,f,c
  4106  000F70  5018               	movf	DS3231_ReadAll@time+1,w,c
  4107  000F72  22DA               	addwfc	fsr2h,f,c
  4108  000F74  C019  FFDF         	movff	??_DS3231_ReadAll,indf2
  4109                           
  4110                           ;DS3231.c: 127:    time->Month = DS3231_MonthRead();
  4111  000F78  ECE3  F00B         	call	_DS3231_MonthRead	;wreg free
  4112  000F7C  6E19               	movwf	??_DS3231_ReadAll& (0+255),c
  4113  000F7E  EE20 F004          	lfsr	2,4
  4114  000F82  5017               	movf	DS3231_ReadAll@time,w,c
  4115  000F84  26D9               	addwf	fsr2l,f,c
  4116  000F86  5018               	movf	DS3231_ReadAll@time+1,w,c
  4117  000F88  22DA               	addwfc	fsr2h,f,c
  4118  000F8A  C019  FFDF         	movff	??_DS3231_ReadAll,indf2
  4119                           
  4120                           ;DS3231.c: 128:    time->Year = DS3231_YearRead();
  4121  000F8E  EC2B  F00C         	call	_DS3231_YearRead	;wreg free
  4122  000F92  6E19               	movwf	??_DS3231_ReadAll& (0+255),c
  4123  000F94  EE20 F003          	lfsr	2,3
  4124  000F98  5017               	movf	DS3231_ReadAll@time,w,c
  4125  000F9A  26D9               	addwf	fsr2l,f,c
  4126  000F9C  5018               	movf	DS3231_ReadAll@time+1,w,c
  4127  000F9E  22DA               	addwfc	fsr2h,f,c
  4128  000FA0  C019  FFDF         	movff	??_DS3231_ReadAll,indf2
  4129  000FA4  0012               	return		;funcret
  4130  000FA6                     __end_of_DS3231_ReadAll:
  4131                           	opt callstack 0
  4132                           
  4133 ;; *************** function _DS3231_YearRead *****************
  4134 ;; Defined at:
  4135 ;;		line 107 in file "DS3231.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;  BCD_Data        1   21[COMRAM] unsigned char 
  4140 ;;  Dec_Data        1   20[COMRAM] unsigned char 
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  1    wreg      unsigned char 
  4143 ;; Registers used:
  4144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4150 ;;      Params:         0       0       0       0       0       0       0       0       0
  4151 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4152 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4153 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4154 ;;Total ram usage:        3 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:    5
  4157 ;; This function calls:
  4158 ;;		_I2C_Mem_Read
  4159 ;; This function is called by:
  4160 ;;		_DS3231_ReadAll
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           	psect	text31
  4165  001856                     __ptext31:
  4166                           	opt callstack 0
  4167  001856                     _DS3231_YearRead:
  4168                           	opt callstack 24
  4169                           
  4170                           ;DS3231.c: 108:    uint8_t BCD_Data = 0, Dec_Data = 0;
  4171                           
  4172                           ;incstack = 0
  4173  001856  0E00               	movlw	0
  4174  001858  6E16               	movwf	DS3231_YearRead@BCD_Data,c
  4175                           
  4176                           ;DS3231.c: 109:    I2C_Mem_Read( 0xD0, 0x06, &BCD_Data);
  4177  00185A  0E06               	movlw	6
  4178  00185C  6E10               	movwf	I2C_Mem_Read@MemAddress,c
  4179  00185E  0E16               	movlw	low DS3231_YearRead@BCD_Data
  4180  001860  6E11               	movwf	I2C_Mem_Read@data,c
  4181  001862  0E00               	movlw	high DS3231_YearRead@BCD_Data
  4182  001864  6E12               	movwf	I2C_Mem_Read@data+1,c
  4183  001866  0ED0               	movlw	208
  4184  001868  EC95  F00B         	call	_I2C_Mem_Read
  4185                           
  4186                           ;DS3231.c: 110:    Dec_Data = (BCD_Data&0x0F) + (BCD_Data>>4)*10;
  4187  00186C  C016  F014         	movff	DS3231_YearRead@BCD_Data,??_DS3231_YearRead
  4188  001870  0E0F               	movlw	15
  4189  001872  1614               	andwf	??_DS3231_YearRead,f,c
  4190  001874  3816               	swapf	DS3231_YearRead@BCD_Data,w,c
  4191  001876  0B0F               	andlw	15
  4192  001878  0D0A               	mullw	10
  4193  00187A  50F3               	movf	prodl,w,c
  4194  00187C  2414               	addwf	??_DS3231_YearRead,w,c
  4195  00187E  6E15               	movwf	DS3231_YearRead@Dec_Data,c
  4196                           
  4197                           ;DS3231.c: 111:    return Dec_Data;
  4198  001880  5015               	movf	DS3231_YearRead@Dec_Data,w,c
  4199  001882  0012               	return		;funcret
  4200  001884                     __end_of_DS3231_YearRead:
  4201                           	opt callstack 0
  4202                           
  4203 ;; *************** function _DS3231_WeekRead *****************
  4204 ;; Defined at:
  4205 ;;		line 87 in file "DS3231.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;		None
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;  data            1   19[COMRAM] unsigned char 
  4210 ;; Return value:  Size  Location     Type
  4211 ;;                  1    wreg      unsigned char 
  4212 ;; Registers used:
  4213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4214 ;; Tracked objects:
  4215 ;;		On entry : 0/0
  4216 ;;		On exit  : 0/0
  4217 ;;		Unchanged: 0/0
  4218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4219 ;;      Params:         0       0       0       0       0       0       0       0       0
  4220 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4221 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4222 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4223 ;;Total ram usage:        1 bytes
  4224 ;; Hardware stack levels used:    1
  4225 ;; Hardware stack levels required when called:    5
  4226 ;; This function calls:
  4227 ;;		_I2C_Mem_Read
  4228 ;; This function is called by:
  4229 ;;		_DS3231_ReadAll
  4230 ;; This function uses a non-reentrant model
  4231 ;;
  4232                           
  4233                           	psect	text32
  4234  001942                     __ptext32:
  4235                           	opt callstack 0
  4236  001942                     _DS3231_WeekRead:
  4237                           	opt callstack 24
  4238                           
  4239                           ;DS3231.c: 88:    uint8_t data = 0;
  4240                           
  4241                           ;incstack = 0
  4242  001942  0E00               	movlw	0
  4243  001944  6E14               	movwf	DS3231_WeekRead@data,c
  4244                           
  4245                           ;DS3231.c: 89:    I2C_Mem_Read( 0xD0, 0x03, &data);
  4246  001946  0E03               	movlw	3
  4247  001948  6E10               	movwf	I2C_Mem_Read@MemAddress,c
  4248  00194A  0E14               	movlw	low DS3231_WeekRead@data
  4249  00194C  6E11               	movwf	I2C_Mem_Read@data,c
  4250  00194E  0E00               	movlw	high DS3231_WeekRead@data
  4251  001950  6E12               	movwf	I2C_Mem_Read@data+1,c
  4252  001952  0ED0               	movlw	208
  4253  001954  EC95  F00B         	call	_I2C_Mem_Read
  4254                           
  4255                           ;DS3231.c: 90:    return data;
  4256  001958  5014               	movf	DS3231_WeekRead@data,w,c
  4257  00195A  0012               	return		;funcret
  4258  00195C                     __end_of_DS3231_WeekRead:
  4259                           	opt callstack 0
  4260                           
  4261 ;; *************** function _DS3231_SecRead *****************
  4262 ;; Defined at:
  4263 ;;		line 66 in file "DS3231.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;		None
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;  BCD_Data        1   21[COMRAM] unsigned char 
  4268 ;;  Dec_Data        1   20[COMRAM] unsigned char 
  4269 ;; Return value:  Size  Location     Type
  4270 ;;                  1    wreg      unsigned char 
  4271 ;; Registers used:
  4272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4278 ;;      Params:         0       0       0       0       0       0       0       0       0
  4279 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4280 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4281 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4282 ;;Total ram usage:        3 bytes
  4283 ;; Hardware stack levels used:    1
  4284 ;; Hardware stack levels required when called:    5
  4285 ;; This function calls:
  4286 ;;		_I2C_Mem_Read
  4287 ;; This function is called by:
  4288 ;;		_DS3231_ReadAll
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292                           	psect	text33
  4293  001884                     __ptext33:
  4294                           	opt callstack 0
  4295  001884                     _DS3231_SecRead:
  4296                           	opt callstack 24
  4297                           
  4298                           ;DS3231.c: 67:    uint8_t BCD_Data = 0, Dec_Data = 0;
  4299                           
  4300                           ;incstack = 0
  4301  001884  0E00               	movlw	0
  4302  001886  6E16               	movwf	DS3231_SecRead@BCD_Data,c
  4303                           
  4304                           ;DS3231.c: 68:    I2C_Mem_Read( 0xD0, 0x00, &BCD_Data);
  4305  001888  0E00               	movlw	0
  4306  00188A  6E10               	movwf	I2C_Mem_Read@MemAddress,c
  4307  00188C  0E16               	movlw	low DS3231_SecRead@BCD_Data
  4308  00188E  6E11               	movwf	I2C_Mem_Read@data,c
  4309  001890  0E00               	movlw	high DS3231_SecRead@BCD_Data
  4310  001892  6E12               	movwf	I2C_Mem_Read@data+1,c
  4311  001894  0ED0               	movlw	208
  4312  001896  EC95  F00B         	call	_I2C_Mem_Read
  4313                           
  4314                           ;DS3231.c: 69:    Dec_Data = (BCD_Data&0x0F) + (BCD_Data>>4)*10;
  4315  00189A  C016  F014         	movff	DS3231_SecRead@BCD_Data,??_DS3231_SecRead
  4316  00189E  0E0F               	movlw	15
  4317  0018A0  1614               	andwf	??_DS3231_SecRead,f,c
  4318  0018A2  3816               	swapf	DS3231_SecRead@BCD_Data,w,c
  4319  0018A4  0B0F               	andlw	15
  4320  0018A6  0D0A               	mullw	10
  4321  0018A8  50F3               	movf	prodl,w,c
  4322  0018AA  2414               	addwf	??_DS3231_SecRead,w,c
  4323  0018AC  6E15               	movwf	DS3231_SecRead@Dec_Data,c
  4324                           
  4325                           ;DS3231.c: 70:    return Dec_Data;
  4326  0018AE  5015               	movf	DS3231_SecRead@Dec_Data,w,c
  4327  0018B0  0012               	return		;funcret
  4328  0018B2                     __end_of_DS3231_SecRead:
  4329                           	opt callstack 0
  4330                           
  4331 ;; *************** function _DS3231_MonthRead *****************
  4332 ;; Defined at:
  4333 ;;		line 100 in file "DS3231.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;		None
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  BCD_Data        1   21[COMRAM] unsigned char 
  4338 ;;  Dec_Data        1   20[COMRAM] unsigned char 
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  1    wreg      unsigned char 
  4341 ;; Registers used:
  4342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4348 ;;      Params:         0       0       0       0       0       0       0       0       0
  4349 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4350 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4351 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4352 ;;Total ram usage:        3 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    5
  4355 ;; This function calls:
  4356 ;;		_I2C_Mem_Read
  4357 ;; This function is called by:
  4358 ;;		_DS3231_ReadAll
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text34
  4363  0017C6                     __ptext34:
  4364                           	opt callstack 0
  4365  0017C6                     _DS3231_MonthRead:
  4366                           	opt callstack 24
  4367                           
  4368                           ;DS3231.c: 101:    uint8_t BCD_Data = 0, Dec_Data = 0;
  4369                           
  4370                           ;incstack = 0
  4371  0017C6  0E00               	movlw	0
  4372  0017C8  6E16               	movwf	DS3231_MonthRead@BCD_Data,c
  4373                           
  4374                           ;DS3231.c: 102:    I2C_Mem_Read( 0xD0, 0x05, &BCD_Data);
  4375  0017CA  0E05               	movlw	5
  4376  0017CC  6E10               	movwf	I2C_Mem_Read@MemAddress,c
  4377  0017CE  0E16               	movlw	low DS3231_MonthRead@BCD_Data
  4378  0017D0  6E11               	movwf	I2C_Mem_Read@data,c
  4379  0017D2  0E00               	movlw	high DS3231_MonthRead@BCD_Data
  4380  0017D4  6E12               	movwf	I2C_Mem_Read@data+1,c
  4381  0017D6  0ED0               	movlw	208
  4382  0017D8  EC95  F00B         	call	_I2C_Mem_Read
  4383                           
  4384                           ;DS3231.c: 103:    Dec_Data = (BCD_Data&0x0F) + ((BCD_Data>>4)&0x01)*10;
  4385  0017DC  C016  F014         	movff	DS3231_MonthRead@BCD_Data,??_DS3231_MonthRead
  4386  0017E0  0E0F               	movlw	15
  4387  0017E2  1614               	andwf	??_DS3231_MonthRead,f,c
  4388  0017E4  3816               	swapf	DS3231_MonthRead@BCD_Data,w,c
  4389  0017E6  0B0F               	andlw	15
  4390  0017E8  0B01               	andlw	1
  4391  0017EA  0D0A               	mullw	10
  4392  0017EC  50F3               	movf	prodl,w,c
  4393  0017EE  2414               	addwf	??_DS3231_MonthRead,w,c
  4394  0017F0  6E15               	movwf	DS3231_MonthRead@Dec_Data,c
  4395                           
  4396                           ;DS3231.c: 104:    return Dec_Data;
  4397  0017F2  5015               	movf	DS3231_MonthRead@Dec_Data,w,c
  4398  0017F4  0012               	return		;funcret
  4399  0017F6                     __end_of_DS3231_MonthRead:
  4400                           	opt callstack 0
  4401                           
  4402 ;; *************** function _DS3231_MinRead *****************
  4403 ;; Defined at:
  4404 ;;		line 73 in file "DS3231.c"
  4405 ;; Parameters:    Size  Location     Type
  4406 ;;		None
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;  BCD_Data        1   21[COMRAM] unsigned char 
  4409 ;;  Dec_Data        1   20[COMRAM] unsigned char 
  4410 ;; Return value:  Size  Location     Type
  4411 ;;                  1    wreg      unsigned char 
  4412 ;; Registers used:
  4413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4419 ;;      Params:         0       0       0       0       0       0       0       0       0
  4420 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4421 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4422 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4423 ;;Total ram usage:        3 bytes
  4424 ;; Hardware stack levels used:    1
  4425 ;; Hardware stack levels required when called:    5
  4426 ;; This function calls:
  4427 ;;		_I2C_Mem_Read
  4428 ;; This function is called by:
  4429 ;;		_DS3231_ReadAll
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           	psect	text35
  4434  0018B2                     __ptext35:
  4435                           	opt callstack 0
  4436  0018B2                     _DS3231_MinRead:
  4437                           	opt callstack 24
  4438                           
  4439                           ;DS3231.c: 74:    uint8_t BCD_Data = 0, Dec_Data = 0;
  4440                           
  4441                           ;incstack = 0
  4442  0018B2  0E00               	movlw	0
  4443  0018B4  6E16               	movwf	DS3231_MinRead@BCD_Data,c
  4444                           
  4445                           ;DS3231.c: 75:    I2C_Mem_Read( 0xD0, 0x01, &BCD_Data);
  4446  0018B6  0E01               	movlw	1
  4447  0018B8  6E10               	movwf	I2C_Mem_Read@MemAddress,c
  4448  0018BA  0E16               	movlw	low DS3231_MinRead@BCD_Data
  4449  0018BC  6E11               	movwf	I2C_Mem_Read@data,c
  4450  0018BE  0E00               	movlw	high DS3231_MinRead@BCD_Data
  4451  0018C0  6E12               	movwf	I2C_Mem_Read@data+1,c
  4452  0018C2  0ED0               	movlw	208
  4453  0018C4  EC95  F00B         	call	_I2C_Mem_Read
  4454                           
  4455                           ;DS3231.c: 76:    Dec_Data = (BCD_Data&0x0F) + (BCD_Data>>4)*10;
  4456  0018C8  C016  F014         	movff	DS3231_MinRead@BCD_Data,??_DS3231_MinRead
  4457  0018CC  0E0F               	movlw	15
  4458  0018CE  1614               	andwf	??_DS3231_MinRead,f,c
  4459  0018D0  3816               	swapf	DS3231_MinRead@BCD_Data,w,c
  4460  0018D2  0B0F               	andlw	15
  4461  0018D4  0D0A               	mullw	10
  4462  0018D6  50F3               	movf	prodl,w,c
  4463  0018D8  2414               	addwf	??_DS3231_MinRead,w,c
  4464  0018DA  6E15               	movwf	DS3231_MinRead@Dec_Data,c
  4465                           
  4466                           ;DS3231.c: 77:    return Dec_Data;
  4467  0018DC  5015               	movf	DS3231_MinRead@Dec_Data,w,c
  4468  0018DE  0012               	return		;funcret
  4469  0018E0                     __end_of_DS3231_MinRead:
  4470                           	opt callstack 0
  4471                           
  4472 ;; *************** function _DS3231_HourRead *****************
  4473 ;; Defined at:
  4474 ;;		line 80 in file "DS3231.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;		None
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;  BCD_Data        1   21[COMRAM] unsigned char 
  4479 ;;  Dec_Data        1   20[COMRAM] unsigned char 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  1    wreg      unsigned char 
  4482 ;; Registers used:
  4483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4489 ;;      Params:         0       0       0       0       0       0       0       0       0
  4490 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4491 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4492 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4493 ;;Total ram usage:        3 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    5
  4496 ;; This function calls:
  4497 ;;		_I2C_Mem_Read
  4498 ;; This function is called by:
  4499 ;;		_DS3231_ReadAll
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           	psect	text36
  4504  0017F6                     __ptext36:
  4505                           	opt callstack 0
  4506  0017F6                     _DS3231_HourRead:
  4507                           	opt callstack 24
  4508                           
  4509                           ;DS3231.c: 81:    uint8_t BCD_Data = 0, Dec_Data = 0;
  4510                           
  4511                           ;incstack = 0
  4512  0017F6  0E00               	movlw	0
  4513  0017F8  6E16               	movwf	DS3231_HourRead@BCD_Data,c
  4514                           
  4515                           ;DS3231.c: 82:    I2C_Mem_Read( 0xD0, 0x02, &BCD_Data);
  4516  0017FA  0E02               	movlw	2
  4517  0017FC  6E10               	movwf	I2C_Mem_Read@MemAddress,c
  4518  0017FE  0E16               	movlw	low DS3231_HourRead@BCD_Data
  4519  001800  6E11               	movwf	I2C_Mem_Read@data,c
  4520  001802  0E00               	movlw	high DS3231_HourRead@BCD_Data
  4521  001804  6E12               	movwf	I2C_Mem_Read@data+1,c
  4522  001806  0ED0               	movlw	208
  4523  001808  EC95  F00B         	call	_I2C_Mem_Read
  4524                           
  4525                           ;DS3231.c: 83:    Dec_Data = (BCD_Data&0x0F) + ((BCD_Data>>4)&0x03)*10;
  4526  00180C  C016  F014         	movff	DS3231_HourRead@BCD_Data,??_DS3231_HourRead
  4527  001810  0E0F               	movlw	15
  4528  001812  1614               	andwf	??_DS3231_HourRead,f,c
  4529  001814  3816               	swapf	DS3231_HourRead@BCD_Data,w,c
  4530  001816  0B0F               	andlw	15
  4531  001818  0B03               	andlw	3
  4532  00181A  0D0A               	mullw	10
  4533  00181C  50F3               	movf	prodl,w,c
  4534  00181E  2414               	addwf	??_DS3231_HourRead,w,c
  4535  001820  6E15               	movwf	DS3231_HourRead@Dec_Data,c
  4536                           
  4537                           ;DS3231.c: 84:    return Dec_Data;
  4538  001822  5015               	movf	DS3231_HourRead@Dec_Data,w,c
  4539  001824  0012               	return		;funcret
  4540  001826                     __end_of_DS3231_HourRead:
  4541                           	opt callstack 0
  4542                           
  4543 ;; *************** function _DS3231_DateRead *****************
  4544 ;; Defined at:
  4545 ;;		line 93 in file "DS3231.c"
  4546 ;; Parameters:    Size  Location     Type
  4547 ;;		None
  4548 ;; Auto vars:     Size  Location     Type
  4549 ;;  BCD_Data        1   21[COMRAM] unsigned char 
  4550 ;;  Dec_Data        1   20[COMRAM] unsigned char 
  4551 ;; Return value:  Size  Location     Type
  4552 ;;                  1    wreg      unsigned char 
  4553 ;; Registers used:
  4554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4560 ;;      Params:         0       0       0       0       0       0       0       0       0
  4561 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4562 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4563 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4564 ;;Total ram usage:        3 bytes
  4565 ;; Hardware stack levels used:    1
  4566 ;; Hardware stack levels required when called:    5
  4567 ;; This function calls:
  4568 ;;		_I2C_Mem_Read
  4569 ;; This function is called by:
  4570 ;;		_DS3231_ReadAll
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574                           	psect	text37
  4575  001826                     __ptext37:
  4576                           	opt callstack 0
  4577  001826                     _DS3231_DateRead:
  4578                           	opt callstack 24
  4579                           
  4580                           ;DS3231.c: 94:    uint8_t BCD_Data = 0, Dec_Data = 0;
  4581                           
  4582                           ;incstack = 0
  4583  001826  0E00               	movlw	0
  4584  001828  6E16               	movwf	DS3231_DateRead@BCD_Data,c
  4585                           
  4586                           ;DS3231.c: 95:    I2C_Mem_Read( 0xD0, 0x04, &BCD_Data);
  4587  00182A  0E04               	movlw	4
  4588  00182C  6E10               	movwf	I2C_Mem_Read@MemAddress,c
  4589  00182E  0E16               	movlw	low DS3231_DateRead@BCD_Data
  4590  001830  6E11               	movwf	I2C_Mem_Read@data,c
  4591  001832  0E00               	movlw	high DS3231_DateRead@BCD_Data
  4592  001834  6E12               	movwf	I2C_Mem_Read@data+1,c
  4593  001836  0ED0               	movlw	208
  4594  001838  EC95  F00B         	call	_I2C_Mem_Read
  4595                           
  4596                           ;DS3231.c: 96:    Dec_Data = (BCD_Data&0x0F) + ((BCD_Data>>4)&0x03)*10;
  4597  00183C  C016  F014         	movff	DS3231_DateRead@BCD_Data,??_DS3231_DateRead
  4598  001840  0E0F               	movlw	15
  4599  001842  1614               	andwf	??_DS3231_DateRead,f,c
  4600  001844  3816               	swapf	DS3231_DateRead@BCD_Data,w,c
  4601  001846  0B0F               	andlw	15
  4602  001848  0B03               	andlw	3
  4603  00184A  0D0A               	mullw	10
  4604  00184C  50F3               	movf	prodl,w,c
  4605  00184E  2414               	addwf	??_DS3231_DateRead,w,c
  4606  001850  6E15               	movwf	DS3231_DateRead@Dec_Data,c
  4607                           
  4608                           ;DS3231.c: 97:    return Dec_Data;
  4609  001852  5015               	movf	DS3231_DateRead@Dec_Data,w,c
  4610  001854  0012               	return		;funcret
  4611  001856                     __end_of_DS3231_DateRead:
  4612                           	opt callstack 0
  4613                           
  4614 ;; *************** function _I2C_Mem_Read *****************
  4615 ;; Defined at:
  4616 ;;		line 63 in file "I2C.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;  addr            1    wreg     unsigned char 
  4619 ;;  MemAddress      1   15[COMRAM] unsigned char 
  4620 ;;  data            2   16[COMRAM] PTR unsigned char 
  4621 ;;		 -> DS3231_TemperureRead@DATA_H(1), DS3231_TemperureRead@DATA_L(1), DS3231_YearRead@BCD_Data(1), DS3231_MonthRead@BC
      +D_Data(1), 
  4622 ;;		 -> DS3231_DateRead@BCD_Data(1), DS3231_WeekRead@data(1), DS3231_HourRead@BCD_Data(1), DS3231_MinRead@BCD_Data(1), 
  4623 ;;		 -> DS3231_SecRead@BCD_Data(1), 
  4624 ;; Auto vars:     Size  Location     Type
  4625 ;;  addr            1   18[COMRAM] unsigned char 
  4626 ;; Return value:  Size  Location     Type
  4627 ;;                  1    wreg      void 
  4628 ;; Registers used:
  4629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4630 ;; Tracked objects:
  4631 ;;		On entry : 0/0
  4632 ;;		On exit  : 0/0
  4633 ;;		Unchanged: 0/0
  4634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4635 ;;      Params:         3       0       0       0       0       0       0       0       0
  4636 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4637 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4638 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4639 ;;Total ram usage:        4 bytes
  4640 ;; Hardware stack levels used:    1
  4641 ;; Hardware stack levels required when called:    4
  4642 ;; This function calls:
  4643 ;;		_I2C_Read
  4644 ;;		_I2C_RepStart
  4645 ;;		_I2C_Start
  4646 ;;		_I2C_Stop
  4647 ;;		_I2C_Write
  4648 ;; This function is called by:
  4649 ;;		_DS3231_SecRead
  4650 ;;		_DS3231_MinRead
  4651 ;;		_DS3231_HourRead
  4652 ;;		_DS3231_WeekRead
  4653 ;;		_DS3231_DateRead
  4654 ;;		_DS3231_MonthRead
  4655 ;;		_DS3231_YearRead
  4656 ;;		_DS3231_TemperureRead
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           	psect	text38
  4661  00172A                     __ptext38:
  4662                           	opt callstack 0
  4663  00172A                     _I2C_Mem_Read:
  4664                           	opt callstack 24
  4665                           
  4666                           ;incstack = 0
  4667                           ;I2C_Mem_Read@addr stored from wreg
  4668  00172A  6E13               	movwf	I2C_Mem_Read@addr,c
  4669                           
  4670                           ;I2C.c: 64:     I2C_Start();
  4671  00172C  EC13  F00D         	call	_I2C_Start	;wreg free
  4672                           
  4673                           ;I2C.c: 65:     I2C_Write(addr&0xFE);
  4674  001730  5013               	movf	I2C_Mem_Read@addr,w,c
  4675  001732  0BFE               	andlw	254
  4676  001734  ECF8  F00C         	call	_I2C_Write
  4677                           
  4678                           ;I2C.c: 66:     I2C_Write(MemAddress);
  4679  001738  5010               	movf	I2C_Mem_Read@MemAddress,w,c
  4680  00173A  ECF8  F00C         	call	_I2C_Write
  4681                           
  4682                           ;I2C.c: 67:     I2C_RepStart();
  4683  00173E  EC17  F00D         	call	_I2C_RepStart	;wreg free
  4684                           
  4685                           ;I2C.c: 68:     I2C_Write(addr|0x01);
  4686  001742  5013               	movf	I2C_Mem_Read@addr,w,c
  4687  001744  0901               	iorlw	1
  4688  001746  ECF8  F00C         	call	_I2C_Write
  4689                           
  4690                           ;I2C.c: 69:     *data = I2C_Read(0);
  4691  00174A  0E00               	movlw	0
  4692  00174C  EC92  F00C         	call	_I2C_Read
  4693  001750  C011  FFD9         	movff	I2C_Mem_Read@data,fsr2l
  4694  001754  C012  FFDA         	movff	I2C_Mem_Read@data+1,fsr2h
  4695  001758  6EDF               	movwf	indf2,c
  4696                           
  4697                           ;I2C.c: 70:     I2C_Stop();
  4698  00175A  EC0F  F00D         	call	_I2C_Stop	;wreg free
  4699  00175E  0012               	return		;funcret
  4700  001760                     __end_of_I2C_Mem_Read:
  4701                           	opt callstack 0
  4702                           
  4703 ;; *************** function _I2C_Write *****************
  4704 ;; Defined at:
  4705 ;;		line 38 in file "I2C.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;  data            1    wreg     unsigned char 
  4708 ;; Auto vars:     Size  Location     Type
  4709 ;;  data            1   13[COMRAM] unsigned char 
  4710 ;; Return value:  Size  Location     Type
  4711 ;;                  1    wreg      void 
  4712 ;; Registers used:
  4713 ;;		wreg, status,2, status,0, cstack
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4719 ;;      Params:         0       0       0       0       0       0       0       0       0
  4720 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4721 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4722 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4723 ;;Total ram usage:        1 bytes
  4724 ;; Hardware stack levels used:    1
  4725 ;; Hardware stack levels required when called:    3
  4726 ;; This function calls:
  4727 ;;		_I2C_is_idle
  4728 ;; This function is called by:
  4729 ;;		_I2C_Mem_Transmit
  4730 ;;		_I2C_Mem_Read
  4731 ;;		_I2C_Master_Receive
  4732 ;;		_I2C_Master_Transmit
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text39
  4737  0019F0                     __ptext39:
  4738                           	opt callstack 0
  4739  0019F0                     _I2C_Write:
  4740                           	opt callstack 23
  4741                           
  4742                           ;incstack = 0
  4743                           ;I2C_Write@data stored from wreg
  4744  0019F0  6E0E               	movwf	I2C_Write@data,c
  4745                           
  4746                           ;I2C.c: 39:     I2C_is_idle();
  4747  0019F2  ECB0  F00B         	call	_I2C_is_idle	;wreg free
  4748                           
  4749                           ;I2C.c: 40:     SSPBUF = data;
  4750  0019F6  C00E  FFC9         	movff	I2C_Write@data,4041	;volatile
  4751  0019FA                     l212:
  4752  0019FA  B0C7               	btfsc	4039,0,c	;volatile
  4753  0019FC  D7FE               	goto	l212
  4754  0019FE                     u2290:
  4755  0019FE  ACC5               	btfss	4037,6,c	;volatile
  4756  001A00  0012               	return	
  4757  001A02  D7FD               	goto	u2290
  4758  001A04                     __end_of_I2C_Write:
  4759                           	opt callstack 0
  4760                           
  4761 ;; *************** function _I2C_Stop *****************
  4762 ;; Defined at:
  4763 ;;		line 33 in file "I2C.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;		None
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;		None
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  1    wreg      void 
  4770 ;; Registers used:
  4771 ;;		wreg, status,2, status,0, cstack
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4777 ;;      Params:         0       0       0       0       0       0       0       0       0
  4778 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4779 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4780 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4781 ;;Total ram usage:        0 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:    3
  4784 ;; This function calls:
  4785 ;;		_I2C_is_idle
  4786 ;; This function is called by:
  4787 ;;		_I2C_Mem_Transmit
  4788 ;;		_I2C_Mem_Read
  4789 ;;		_I2C_Master_Receive
  4790 ;;		_I2C_Master_Transmit
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text40
  4795  001A1E                     __ptext40:
  4796                           	opt callstack 0
  4797  001A1E                     _I2C_Stop:
  4798                           	opt callstack 23
  4799                           
  4800                           ;I2C.c: 34:     I2C_is_idle();
  4801                           
  4802                           ;incstack = 0
  4803  001A1E  ECB0  F00B         	call	_I2C_is_idle	;wreg free
  4804                           
  4805                           ;I2C.c: 35:     SSPCON2bits.PEN = 1;
  4806  001A22  84C5               	bsf	4037,2,c	;volatile
  4807  001A24  0012               	return		;funcret
  4808  001A26                     __end_of_I2C_Stop:
  4809                           	opt callstack 0
  4810                           
  4811 ;; *************** function _I2C_Start *****************
  4812 ;; Defined at:
  4813 ;;		line 23 in file "I2C.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;		None
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;		None
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      void 
  4820 ;; Registers used:
  4821 ;;		wreg, status,2, status,0, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4827 ;;      Params:         0       0       0       0       0       0       0       0       0
  4828 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4829 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4830 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4831 ;;Total ram usage:        0 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    3
  4834 ;; This function calls:
  4835 ;;		_I2C_is_idle
  4836 ;; This function is called by:
  4837 ;;		_I2C_Mem_Transmit
  4838 ;;		_I2C_Mem_Read
  4839 ;;		_I2C_Master_Receive
  4840 ;;		_I2C_Master_Transmit
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           	psect	text41
  4845  001A26                     __ptext41:
  4846                           	opt callstack 0
  4847  001A26                     _I2C_Start:
  4848                           	opt callstack 23
  4849                           
  4850                           ;I2C.c: 24:     I2C_is_idle();
  4851                           
  4852                           ;incstack = 0
  4853  001A26  ECB0  F00B         	call	_I2C_is_idle	;wreg free
  4854                           
  4855                           ;I2C.c: 25:     SSPCON2bits.SEN = 1;
  4856  001A2A  80C5               	bsf	4037,0,c	;volatile
  4857  001A2C  0012               	return		;funcret
  4858  001A2E                     __end_of_I2C_Start:
  4859                           	opt callstack 0
  4860                           
  4861 ;; *************** function _I2C_RepStart *****************
  4862 ;; Defined at:
  4863 ;;		line 28 in file "I2C.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;		None
  4866 ;; Auto vars:     Size  Location     Type
  4867 ;;		None
  4868 ;; Return value:  Size  Location     Type
  4869 ;;                  1    wreg      void 
  4870 ;; Registers used:
  4871 ;;		wreg, status,2, status,0, cstack
  4872 ;; Tracked objects:
  4873 ;;		On entry : 0/0
  4874 ;;		On exit  : 0/0
  4875 ;;		Unchanged: 0/0
  4876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4877 ;;      Params:         0       0       0       0       0       0       0       0       0
  4878 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4879 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4880 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4881 ;;Total ram usage:        0 bytes
  4882 ;; Hardware stack levels used:    1
  4883 ;; Hardware stack levels required when called:    3
  4884 ;; This function calls:
  4885 ;;		_I2C_is_idle
  4886 ;; This function is called by:
  4887 ;;		_I2C_Mem_Read
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891                           	psect	text42
  4892  001A2E                     __ptext42:
  4893                           	opt callstack 0
  4894  001A2E                     _I2C_RepStart:
  4895                           	opt callstack 24
  4896                           
  4897                           ;I2C.c: 29:     I2C_is_idle();
  4898                           
  4899                           ;incstack = 0
  4900  001A2E  ECB0  F00B         	call	_I2C_is_idle	;wreg free
  4901                           
  4902                           ;I2C.c: 30:     SSPCON2bits.RSEN = 1;
  4903  001A32  82C5               	bsf	4037,1,c	;volatile
  4904  001A34  0012               	return		;funcret
  4905  001A36                     __end_of_I2C_RepStart:
  4906                           	opt callstack 0
  4907                           
  4908 ;; *************** function _I2C_Read *****************
  4909 ;; Defined at:
  4910 ;;		line 45 in file "I2C.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;  GenerateAck     1    wreg     _Bool 
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;  GenerateAck     1   13[COMRAM] _Bool 
  4915 ;;  data            1   14[COMRAM] unsigned char 
  4916 ;; Return value:  Size  Location     Type
  4917 ;;                  1    wreg      unsigned char 
  4918 ;; Registers used:
  4919 ;;		wreg, status,2, status,0, cstack
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4925 ;;      Params:         0       0       0       0       0       0       0       0       0
  4926 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4927 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4928 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4929 ;;Total ram usage:        2 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:    3
  4932 ;; This function calls:
  4933 ;;		_I2C_is_idle
  4934 ;; This function is called by:
  4935 ;;		_I2C_Mem_Read
  4936 ;;		_I2C_Master_Receive
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           	psect	text43
  4941  001924                     __ptext43:
  4942                           	opt callstack 0
  4943  001924                     _I2C_Read:
  4944                           	opt callstack 24
  4945                           
  4946                           ;incstack = 0
  4947                           ;I2C_Read@GenerateAck stored from wreg
  4948  001924  6E0E               	movwf	I2C_Read@GenerateAck,c
  4949                           
  4950                           ;I2C.c: 47:     I2C_is_idle();
  4951  001926  ECB0  F00B         	call	_I2C_is_idle	;wreg free
  4952                           
  4953                           ;I2C.c: 48:     SSPCON2bits.RCEN = 1;
  4954  00192A  86C5               	bsf	4037,3,c	;volatile
  4955  00192C                     l221:
  4956  00192C  A0C7               	btfss	4039,0,c	;volatile
  4957  00192E  D7FE               	goto	l221
  4958                           
  4959                           ;I2C.c: 50:     data = SSPBUF;
  4960  001930  CFC9 F00F          	movff	4041,I2C_Read@data	;volatile
  4961                           
  4962                           ;I2C.c: 51:     SSPCON2bits.ACKEN = GenerateAck;
  4963  001934  B00E               	btfsc	I2C_Read@GenerateAck,0,c
  4964  001936  D002               	bra	u2345
  4965  001938  98C5               	bcf	4037,4,c	;volatile
  4966  00193A  D001               	bra	u2346
  4967  00193C                     u2345:
  4968  00193C  88C5               	bsf	4037,4,c	;volatile
  4969  00193E                     u2346:
  4970                           
  4971                           ;I2C.c: 52:     return data;
  4972  00193E  500F               	movf	I2C_Read@data,w,c
  4973  001940  0012               	return		;funcret
  4974  001942                     __end_of_I2C_Read:
  4975                           	opt callstack 0
  4976                           
  4977 ;; *************** function _I2C_is_idle *****************
  4978 ;; Defined at:
  4979 ;;		line 14 in file "I2C.c"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;		None
  4982 ;; Auto vars:     Size  Location     Type
  4983 ;;  TimeOut         2   11[COMRAM] unsigned short 
  4984 ;; Return value:  Size  Location     Type
  4985 ;;                  1    wreg      void 
  4986 ;; Registers used:
  4987 ;;		wreg, status,2, status,0
  4988 ;; Tracked objects:
  4989 ;;		On entry : 0/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4993 ;;      Params:         0       0       0       0       0       0       0       0       0
  4994 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4995 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4996 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4997 ;;Total ram usage:        4 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; Hardware stack levels required when called:    2
  5000 ;; This function calls:
  5001 ;;		Nothing
  5002 ;; This function is called by:
  5003 ;;		_I2C_Start
  5004 ;;		_I2C_RepStart
  5005 ;;		_I2C_Stop
  5006 ;;		_I2C_Write
  5007 ;;		_I2C_Read
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text44
  5012  001760                     __ptext44:
  5013                           	opt callstack 0
  5014  001760                     _I2C_is_idle:
  5015                           	opt callstack 23
  5016                           
  5017                           ;I2C.c: 15:     uint16_t TimeOut = 0;
  5018                           
  5019                           ;incstack = 0
  5020  001760  0E00               	movlw	0
  5021  001762  6E0D               	movwf	I2C_is_idle@TimeOut+1,c
  5022  001764  0E00               	movlw	0
  5023  001766  6E0C               	movwf	I2C_is_idle@TimeOut,c
  5024                           
  5025                           ;I2C.c: 16:     while((SSPCON2 & 0x1F) || (SSPSTAT & 0x04) ) {
  5026  001768  D00B               	goto	l2650
  5027  00176A                     l2646:
  5028                           
  5029                           ;I2C.c: 17:         if(TimeOut++ >= 0xff) {
  5030  00176A  500C               	movf	I2C_is_idle@TimeOut,w,c
  5031  00176C  6E0A               	movwf	??_I2C_is_idle& (0+255),c
  5032  00176E  500D               	movf	I2C_is_idle@TimeOut+1,w,c
  5033  001770  6E0B               	movwf	(??_I2C_is_idle+1)& (0+255),c
  5034  001772  4A0C               	infsnz	I2C_is_idle@TimeOut,f,c
  5035  001774  2A0D               	incf	I2C_is_idle@TimeOut+1,f,c
  5036  001776  500B               	movf	??_I2C_is_idle+1,w,c
  5037  001778  E10C               	bnz	l200
  5038  00177A  280A               	incf	??_I2C_is_idle,w,c
  5039  00177C  B0D8               	btfsc	status,0,c
  5040  00177E  0012               	return	
  5041  001780                     l2650:
  5042                           
  5043                           ;I2C.c: 16:     while((SSPCON2 & 0x1F) || (SSPSTAT & 0x04) ) {
  5044  001780  CFC5 F00A          	movff	4037,??_I2C_is_idle	;volatile
  5045  001784  0E1F               	movlw	31
  5046  001786  160A               	andwf	??_I2C_is_idle,f,c
  5047  001788  A4D8               	btfss	status,2,c
  5048  00178A  D7EF               	goto	l2646
  5049  00178C  A4C7               	btfss	4039,2,c	;volatile
  5050  00178E  0012               	return	
  5051  001790  D7EC               	goto	l2646
  5052  001792                     l200:
  5053  001792  0012               	return		;funcret
  5054  001794                     __end_of_I2C_is_idle:
  5055                           	opt callstack 0
  5056                           
  5057 ;; *************** function _DS3231_Init *****************
  5058 ;; Defined at:
  5059 ;;		line 5 in file "DS3231.c"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;		None
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;		None
  5064 ;; Return value:  Size  Location     Type
  5065 ;;                  1    wreg      void 
  5066 ;; Registers used:
  5067 ;;		wreg, status,2, cstack
  5068 ;; Tracked objects:
  5069 ;;		On entry : 0/0
  5070 ;;		On exit  : 0/0
  5071 ;;		Unchanged: 0/0
  5072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5073 ;;      Params:         0       0       0       0       0       0       0       0       0
  5074 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5075 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5076 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5077 ;;Total ram usage:        0 bytes
  5078 ;; Hardware stack levels used:    1
  5079 ;; Hardware stack levels required when called:    3
  5080 ;; This function calls:
  5081 ;;		_I2C_Init
  5082 ;; This function is called by:
  5083 ;;		_main
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           	psect	text45
  5088  001A36                     __ptext45:
  5089                           	opt callstack 0
  5090  001A36                     _DS3231_Init:
  5091                           	opt callstack 27
  5092                           
  5093                           ;DS3231.c: 6:     I2C_Init();
  5094                           
  5095                           ;incstack = 0
  5096  001A36  ECBA  F00C         	call	_I2C_Init	;wreg free
  5097  001A3A  0012               	return		;funcret
  5098  001A3C                     __end_of_DS3231_Init:
  5099                           	opt callstack 0
  5100                           
  5101 ;; *************** function _I2C_Init *****************
  5102 ;; Defined at:
  5103 ;;		line 4 in file "I2C.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;		None
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;		None
  5108 ;; Return value:  Size  Location     Type
  5109 ;;                  1    wreg      void 
  5110 ;; Registers used:
  5111 ;;		wreg, status,2
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5117 ;;      Params:         0       0       0       0       0       0       0       0       0
  5118 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5120 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5121 ;;Total ram usage:        0 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; Hardware stack levels required when called:    2
  5124 ;; This function calls:
  5125 ;;		Nothing
  5126 ;; This function is called by:
  5127 ;;		_DS3231_Init
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131                           	psect	text46
  5132  001974                     __ptext46:
  5133                           	opt callstack 0
  5134  001974                     _I2C_Init:
  5135                           	opt callstack 27
  5136                           
  5137                           ;I2C.c: 5:     TRISBbits.RB1 = 1;
  5138                           
  5139                           ;incstack = 0
  5140  001974  8293               	bsf	3987,1,c	;volatile
  5141                           
  5142                           ;I2C.c: 6:     TRISBbits.RB0 = 1;
  5143  001976  8093               	bsf	3987,0,c	;volatile
  5144                           
  5145                           ;I2C.c: 7:     SSPSTATbits.SMP = 1;
  5146  001978  8EC7               	bsf	4039,7,c	;volatile
  5147                           
  5148                           ;I2C.c: 8:     SSPSTATbits.CKE = 0;
  5149  00197A  9CC7               	bcf	4039,6,c	;volatile
  5150                           
  5151                           ;I2C.c: 9:     SSPCON1bits.SSPM = 0x08;
  5152  00197C  50C6               	movf	4038,w,c	;volatile
  5153  00197E  0BF0               	andlw	-16
  5154  001980  0908               	iorlw	8
  5155  001982  6EC6               	movwf	4038,c	;volatile
  5156                           
  5157                           ;I2C.c: 10:     SSPADD = 29;
  5158  001984  0E1D               	movlw	29
  5159  001986  6EC8               	movwf	4040,c	;volatile
  5160                           
  5161                           ;I2C.c: 11:     SSPCON1bits.SSPEN = 1;
  5162  001988  8AC6               	bsf	4038,5,c	;volatile
  5163  00198A  0012               	return		;funcret
  5164  00198C                     __end_of_I2C_Init:
  5165                           	opt callstack 0
  5166                           
  5167 ;; *************** function _ISR *****************
  5168 ;; Defined at:
  5169 ;;		line 12 in file "main.c"
  5170 ;; Parameters:    Size  Location     Type
  5171 ;;		None
  5172 ;; Auto vars:     Size  Location     Type
  5173 ;;		None
  5174 ;; Return value:  Size  Location     Type
  5175 ;;                  1    wreg      void 
  5176 ;; Registers used:
  5177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5178 ;; Tracked objects:
  5179 ;;		On entry : 0/0
  5180 ;;		On exit  : 0/0
  5181 ;;		Unchanged: 0/0
  5182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5183 ;;      Params:         0       0       0       0       0       0       0       0       0
  5184 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5185 ;;      Temps:          6       0       0       0       0       0       0       0       0
  5186 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5187 ;;Total ram usage:        6 bytes
  5188 ;; Hardware stack levels used:    1
  5189 ;; Hardware stack levels required when called:    1
  5190 ;; This function calls:
  5191 ;;		_Display_ISR
  5192 ;; This function is called by:
  5193 ;;		Interrupt level 2
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           	psect	intcode
  5198  000008                     __pintcode:
  5199                           	opt callstack 0
  5200  000008                     _ISR:
  5201                           	opt callstack 23
  5202                           
  5203                           ;incstack = 0
  5204  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5205  00000A  ED55  F00B         	call	int_func,f	;refresh shadow registers
  5206                           
  5207                           	psect	intcode_body
  5208  0016AA                     __pintcode_body:
  5209                           	opt callstack 23
  5210  0016AA                     int_func:
  5211                           	opt callstack 23
  5212  0016AA  0006               	pop		; remove dummy address from shadow register refresh
  5213  0016AC  CFD9 F004          	movff	fsr2l,??_ISR
  5214  0016B0  CFDA F005          	movff	fsr2h,??_ISR+1
  5215  0016B4  CFF6 F006          	movff	tblptrl,??_ISR+2
  5216  0016B8  CFF7 F007          	movff	tblptrh,??_ISR+3
  5217  0016BC  CFF8 F008          	movff	tblptru,??_ISR+4
  5218  0016C0  CFF5 F009          	movff	tablat,??_ISR+5
  5219                           
  5220                           ;main.c: 13:     if(INTCONbits.TMR0IF) {
  5221  0016C4  A4F2               	btfss	4082,2,c	;volatile
  5222  0016C6  D007               	goto	i2l76
  5223                           
  5224                           ;main.c: 14:         TMR0 = 65535 - 1500;
  5225  0016C8  0EFA               	movlw	250
  5226  0016CA  6ED7               	movwf	4055,c	;volatile
  5227  0016CC  0E23               	movlw	35
  5228  0016CE  6ED6               	movwf	4054,c	;volatile
  5229                           
  5230                           ;main.c: 15:         INTCONbits.TMR0IF = 0;
  5231  0016D0  94F2               	bcf	4082,2,c	;volatile
  5232                           
  5233                           ;main.c: 16:         Display_ISR();
  5234  0016D2  EC01  F007         	call	_Display_ISR	;wreg free
  5235  0016D6                     i2l76:
  5236  0016D6  C009  FFF5         	movff	??_ISR+5,tablat
  5237  0016DA  C008  FFF8         	movff	??_ISR+4,tblptru
  5238  0016DE  C007  FFF7         	movff	??_ISR+3,tblptrh
  5239  0016E2  C006  FFF6         	movff	??_ISR+2,tblptrl
  5240  0016E6  C005  FFDA         	movff	??_ISR+1,fsr2h
  5241  0016EA  C004  FFD9         	movff	??_ISR,fsr2l
  5242  0016EE  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5243  0016F0  0011               	retfie		f
  5244  0016F2                     __end_of_ISR:
  5245                           	opt callstack 0
  5246                           
  5247 ;; *************** function _Display_ISR *****************
  5248 ;; Defined at:
  5249 ;;		line 50 in file "Display.c"
  5250 ;; Parameters:    Size  Location     Type
  5251 ;;		None
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;  data            1    2[COMRAM] unsigned char 
  5254 ;; Return value:  Size  Location     Type
  5255 ;;                  1    wreg      void 
  5256 ;; Registers used:
  5257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5258 ;; Tracked objects:
  5259 ;;		On entry : 0/0
  5260 ;;		On exit  : 0/0
  5261 ;;		Unchanged: 0/0
  5262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5263 ;;      Params:         0       0       0       0       0       0       0       0       0
  5264 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5265 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5266 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5267 ;;Total ram usage:        3 bytes
  5268 ;; Hardware stack levels used:    1
  5269 ;; This function calls:
  5270 ;;		Nothing
  5271 ;; This function is called by:
  5272 ;;		_ISR
  5273 ;; This function uses a non-reentrant model
  5274 ;;
  5275                           
  5276                           	psect	text48
  5277  000E02                     __ptext48:
  5278                           	opt callstack 0
  5279  000E02                     _Display_ISR:
  5280                           	opt callstack 23
  5281                           
  5282                           ;Display.c: 51:     static uint8_t digit = 0, BrightCnt = 0;;Display.c: 52:     if(Brigh
      +                          tCnt >= 10) {
  5283                           
  5284                           ;incstack = 0
  5285  000E02  0E09               	movlw	9
  5286  000E04  6435               	cpfsgt	Display_ISR@BrightCnt,c
  5287  000E06  D065               	goto	i2l2288
  5288                           
  5289                           ;Display.c: 53:         BrightCnt = 0;
  5290  000E08  0E00               	movlw	0
  5291  000E0A  6E35               	movwf	Display_ISR@BrightCnt,c
  5292                           
  5293                           ;Display.c: 54:         if(digit++ >= 3) {
  5294  000E0C  2A36               	incf	Display_ISR@digit,f,c
  5295  000E0E  0436               	decf	Display_ISR@digit,w,c
  5296  000E10  6E01               	movwf	??_Display_ISR& (0+255),c
  5297  000E12  0E02               	movlw	2
  5298  000E14  6401               	cpfsgt	??_Display_ISR,c
  5299  000E16  D002               	goto	i2l2264
  5300                           
  5301                           ;Display.c: 55:             digit = 0;
  5302  000E18  0E00               	movlw	0
  5303  000E1A  6E36               	movwf	Display_ISR@digit,c
  5304  000E1C                     i2l2264:
  5305                           
  5306                           ;Display.c: 58:         LATBbits.LATB2 = 1;
  5307  000E1C  848A               	bsf	3978,2,c	;volatile
  5308                           
  5309                           ;Display.c: 59:         LATBbits.LATB3 = 1;
  5310  000E1E  868A               	bsf	3978,3,c	;volatile
  5311                           
  5312                           ;Display.c: 60:         LATBbits.LATB4 = 1;
  5313  000E20  888A               	bsf	3978,4,c	;volatile
  5314                           
  5315                           ;Display.c: 61:         LATBbits.LATB5 = 1;
  5316  000E22  8A8A               	bsf	3978,5,c	;volatile
  5317                           
  5318                           ;Display.c: 64:         uint8_t data = NumOut_Table[MyDisplay.NumVal[digit]];
  5319  000E24  0E93               	movlw	low (_MyDisplay+4)
  5320  000E26  2436               	addwf	Display_ISR@digit,w,c
  5321  000E28  6ED9               	movwf	fsr2l,c
  5322  000E2A  6ADA               	clrf	fsr2h,c
  5323  000E2C  0E00               	movlw	high (_MyDisplay+4)
  5324  000E2E  22DA               	addwfc	fsr2h,f,c
  5325  000E30  50DF               	movf	indf2,w,c
  5326  000E32  6E01               	movwf	??_Display_ISR& (0+255),c
  5327  000E34  6A02               	clrf	(??_Display_ISR+1)& (0+255),c
  5328  000E36  0E01               	movlw	low _NumOut_Table
  5329  000E38  2401               	addwf	??_Display_ISR,w,c
  5330  000E3A  6EF6               	movwf	tblptrl,c
  5331  000E3C  0E08               	movlw	high _NumOut_Table
  5332  000E3E  2002               	addwfc	??_Display_ISR+1,w,c
  5333  000E40  6EF7               	movwf	tblptrh,c
  5334  000E42                     	if	0	;There are less than 3 active tblptr bytes
  5335  000E42                     	endif
  5336  000E42  0008               	tblrd		*
  5337  000E44  CFF5 F003          	movff	tablat,Display_ISR@data
  5338                           
  5339                           ;Display.c: 65:         if(MyDisplay.Point[digit]==1) data &= 0x7f;
  5340  000E48  0E97               	movlw	low (_MyDisplay+8)
  5341  000E4A  2436               	addwf	Display_ISR@digit,w,c
  5342  000E4C  6ED9               	movwf	fsr2l,c
  5343  000E4E  6ADA               	clrf	fsr2h,c
  5344  000E50  0E00               	movlw	high (_MyDisplay+8)
  5345  000E52  22DA               	addwfc	fsr2h,f,c
  5346  000E54  04DE               	decf	postinc2,w,c
  5347  000E56  B4D8               	btfsc	status,2,c
  5348  000E58  9E03               	bcf	Display_ISR@data,7,c
  5349                           
  5350                           ;Display.c: 66:         LATD = data;
  5351  000E5A  C003  FF8C         	movff	Display_ISR@data,3980	;volatile
  5352                           
  5353                           ;Display.c: 69:         LATBbits.LATB2 = ((digit==3)?0:1);
  5354  000E5E  0E03               	movlw	3
  5355  000E60  1836               	xorwf	Display_ISR@digit,w,c
  5356  000E62  B4D8               	btfsc	status,2,c
  5357  000E64  D003               	goto	i2u166_40
  5358  000E66  6A01               	clrf	??_Display_ISR& (0+255),c
  5359  000E68  2A01               	incf	??_Display_ISR& (0+255),f,c
  5360  000E6A  D001               	goto	i2u167_48
  5361  000E6C                     i2u166_40:
  5362  000E6C  6A01               	clrf	??_Display_ISR& (0+255),c
  5363  000E6E                     i2u167_48:
  5364  000E6E  4601               	rlncf	??_Display_ISR,f,c
  5365  000E70  4601               	rlncf	??_Display_ISR,f,c
  5366  000E72  508A               	movf	3978,w,c	;volatile
  5367  000E74  1801               	xorwf	??_Display_ISR,w,c
  5368  000E76  0BFB               	andlw	-5
  5369  000E78  1801               	xorwf	??_Display_ISR,w,c
  5370  000E7A  6E8A               	movwf	3978,c	;volatile
  5371                           
  5372                           ;Display.c: 70:         LATBbits.LATB3 = ((digit==2)?0:1);
  5373  000E7C  0E02               	movlw	2
  5374  000E7E  1836               	xorwf	Display_ISR@digit,w,c
  5375  000E80  B4D8               	btfsc	status,2,c
  5376  000E82  D003               	goto	i2u168_40
  5377  000E84  6A01               	clrf	??_Display_ISR& (0+255),c
  5378  000E86  2A01               	incf	??_Display_ISR& (0+255),f,c
  5379  000E88  D001               	goto	i2u169_48
  5380  000E8A                     i2u168_40:
  5381  000E8A  6A01               	clrf	??_Display_ISR& (0+255),c
  5382  000E8C                     i2u169_48:
  5383  000E8C  4601               	rlncf	??_Display_ISR,f,c
  5384  000E8E  4601               	rlncf	??_Display_ISR,f,c
  5385  000E90  4601               	rlncf	??_Display_ISR,f,c
  5386  000E92  508A               	movf	3978,w,c	;volatile
  5387  000E94  1801               	xorwf	??_Display_ISR,w,c
  5388  000E96  0BF7               	andlw	-9
  5389  000E98  1801               	xorwf	??_Display_ISR,w,c
  5390  000E9A  6E8A               	movwf	3978,c	;volatile
  5391                           
  5392                           ;Display.c: 71:         LATBbits.LATB4 = ((digit==1)?0:1);
  5393  000E9C  0436               	decf	Display_ISR@digit,w,c
  5394  000E9E  B4D8               	btfsc	status,2,c
  5395  000EA0  D003               	goto	i2u170_40
  5396  000EA2  6A01               	clrf	??_Display_ISR& (0+255),c
  5397  000EA4  2A01               	incf	??_Display_ISR& (0+255),f,c
  5398  000EA6  D001               	goto	i2u171_48
  5399  000EA8                     i2u170_40:
  5400  000EA8  6A01               	clrf	??_Display_ISR& (0+255),c
  5401  000EAA                     i2u171_48:
  5402  000EAA  3A01               	swapf	??_Display_ISR,f,c
  5403  000EAC  508A               	movf	3978,w,c	;volatile
  5404  000EAE  1801               	xorwf	??_Display_ISR,w,c
  5405  000EB0  0BEF               	andlw	-17
  5406  000EB2  1801               	xorwf	??_Display_ISR,w,c
  5407  000EB4  6E8A               	movwf	3978,c	;volatile
  5408                           
  5409                           ;Display.c: 72:         LATBbits.LATB5 = ((digit==0)?0:1);
  5410  000EB6  5036               	movf	Display_ISR@digit,w,c
  5411  000EB8  B4D8               	btfsc	status,2,c
  5412  000EBA  D003               	goto	i2u172_40
  5413  000EBC  6A01               	clrf	??_Display_ISR& (0+255),c
  5414  000EBE  2A01               	incf	??_Display_ISR& (0+255),f,c
  5415  000EC0  D001               	goto	i2u173_48
  5416  000EC2                     i2u172_40:
  5417  000EC2  6A01               	clrf	??_Display_ISR& (0+255),c
  5418  000EC4                     i2u173_48:
  5419  000EC4  3A01               	swapf	??_Display_ISR,f,c
  5420  000EC6  4601               	rlncf	??_Display_ISR,f,c
  5421  000EC8  508A               	movf	3978,w,c	;volatile
  5422  000ECA  1801               	xorwf	??_Display_ISR,w,c
  5423  000ECC  0BDF               	andlw	-33
  5424  000ECE  1801               	xorwf	??_Display_ISR,w,c
  5425  000ED0  6E8A               	movwf	3978,c	;volatile
  5426  000ED2                     i2l2288:
  5427                           
  5428                           ;Display.c: 76:     if(MyDisplay.Brightness[digit] <= BrightCnt) {
  5429  000ED2  0E8F               	movlw	low _MyDisplay
  5430  000ED4  2436               	addwf	Display_ISR@digit,w,c
  5431  000ED6  6ED9               	movwf	fsr2l,c
  5432  000ED8  6ADA               	clrf	fsr2h,c
  5433  000EDA  0E00               	movlw	high _MyDisplay
  5434  000EDC  22DA               	addwfc	fsr2h,f,c
  5435  000EDE  50DE               	movf	postinc2,w,c
  5436  000EE0  5C35               	subwf	Display_ISR@BrightCnt,w,c
  5437  000EE2  A0D8               	btfss	status,0,c
  5438  000EE4  D014               	goto	i2l336
  5439                           
  5440                           ;Display.c: 77:         if(digit==0) LATBbits.LATB5 = 1;
  5441  000EE6  5036               	movf	Display_ISR@digit,w,c
  5442  000EE8  A4D8               	btfss	status,2,c
  5443  000EEA  D002               	goto	i2l2294
  5444  000EEC  8A8A               	bsf	3978,5,c	;volatile
  5445  000EEE  D00F               	goto	i2l336
  5446  000EF0                     i2l2294:
  5447  000EF0  0436               	decf	Display_ISR@digit,w,c
  5448  000EF2  A4D8               	btfss	status,2,c
  5449  000EF4  D002               	goto	i2l2298
  5450  000EF6  888A               	bsf	3978,4,c	;volatile
  5451  000EF8  D00A               	goto	i2l336
  5452  000EFA                     i2l2298:
  5453  000EFA  0E02               	movlw	2
  5454  000EFC  1836               	xorwf	Display_ISR@digit,w,c
  5455  000EFE  A4D8               	btfss	status,2,c
  5456  000F00  D002               	goto	i2l2302
  5457  000F02  868A               	bsf	3978,3,c	;volatile
  5458  000F04  D004               	goto	i2l336
  5459  000F06                     i2l2302:
  5460  000F06  0E03               	movlw	3
  5461  000F08  1836               	xorwf	Display_ISR@digit,w,c
  5462  000F0A  B4D8               	btfsc	status,2,c
  5463  000F0C  848A               	bsf	3978,2,c	;volatile
  5464  000F0E                     i2l336:
  5465                           
  5466                           ;Display.c: 82:     BrightCnt++;
  5467  000F0E  2A35               	incf	Display_ISR@BrightCnt,f,c
  5468  000F10  0012               	return		;funcret
  5469  000F12                     __end_of_Display_ISR:
  5470                           	opt callstack 0
  5471                           
  5472                           	psect	rparam
  5473  0000                     
  5474                           	psect	temp
  5475  00003F                     btemp:
  5476                           	opt callstack 0
  5477  00003F                     	ds	1
  5478  0000                     int$flags	set	btemp
  5479  0000                     wtemp8	set	btemp+1
  5480  0000                     ttemp5	set	btemp+1
  5481  0000                     ttemp6	set	btemp+4
  5482  0000                     ttemp7	set	btemp+8
  5483                           tosu	equ	0xFFF
  5484                           tosh	equ	0xFFE
  5485                           tosl	equ	0xFFD
  5486                           stkptr	equ	0xFFC
  5487                           pclatu	equ	0xFFB
  5488                           pclath	equ	0xFFA
  5489                           pcl	equ	0xFF9
  5490                           tblptru	equ	0xFF8
  5491                           tblptrh	equ	0xFF7
  5492                           tblptrl	equ	0xFF6
  5493                           tablat	equ	0xFF5
  5494                           prodh	equ	0xFF4
  5495                           prodl	equ	0xFF3
  5496                           indf0	equ	0xFEF
  5497                           postinc0	equ	0xFEE
  5498                           postdec0	equ	0xFED
  5499                           preinc0	equ	0xFEC
  5500                           plusw0	equ	0xFEB
  5501                           fsr0h	equ	0xFEA
  5502                           fsr0l	equ	0xFE9
  5503                           wreg	equ	0xFE8
  5504                           indf1	equ	0xFE7
  5505                           postinc1	equ	0xFE6
  5506                           postdec1	equ	0xFE5
  5507                           preinc1	equ	0xFE4
  5508                           plusw1	equ	0xFE3
  5509                           fsr1h	equ	0xFE2
  5510                           fsr1l	equ	0xFE1
  5511                           bsr	equ	0xFE0
  5512                           indf2	equ	0xFDF
  5513                           postinc2	equ	0xFDE
  5514                           postdec2	equ	0xFDD
  5515                           preinc2	equ	0xFDC
  5516                           plusw2	equ	0xFDB
  5517                           fsr2h	equ	0xFDA
  5518                           fsr2l	equ	0xFD9
  5519                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    13
    Data        13
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     41      62
    BANK0           160     32      59
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Task_IncrementVal@targetVal	PTR unsigned char  size(2) Largest target is 7
		 -> Task_SetRTC@NewSet(BANK0[7]), 

    DS3231_SetAll@time	PTR struct . size(2) Largest target is 7
		 -> Task_SetRTC@NewSet(BANK0[7]), 

    DS3231_ReadAll@time	PTR struct . size(2) Largest target is 7
		 -> MyRTC(BANK0[7]), 

    I2C_Mem_Read@data	PTR unsigned char  size(2) Largest target is 1
		 -> DS3231_TemperureRead@DATA_H(COMRAM[1]), DS3231_TemperureRead@DATA_L(COMRAM[1]), DS3231_YearRead@BCD_Data(COMRAM[1]), DS3231_MonthRead@BCD_Data(COMRAM[1]), 
		 -> DS3231_DateRead@BCD_Data(COMRAM[1]), DS3231_WeekRead@data(COMRAM[1]), DS3231_HourRead@BCD_Data(COMRAM[1]), DS3231_MinRead@BCD_Data(COMRAM[1]), 
		 -> DS3231_SecRead@BCD_Data(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_Task_SetRTC
    _Task_ShowWeek->_Display_Set_NumVal
    _Task_ShowTime->_Display_Set_NumVal
    _Task_ShowDate->_Display_Set_NumVal
    _Task_SetRTC->_Task_IncrementVal
    _Task_IncrementVal->_PressOverTime_SW1
    _PressOverTime_SW1->_MySystick_ms
    _GetRisingEdge_SW2->_MySystick_ms
    _DS3231_SetAll->_DS3231_SetDate
    _DS3231_SetAll->_DS3231_SetHour
    _DS3231_SetAll->_DS3231_SetMin
    _DS3231_SetAll->_DS3231_SetMonth
    _DS3231_SetAll->_DS3231_SetSec
    _DS3231_SetAll->_DS3231_SetYear
    _DS3231_SetYear->_I2C_Mem_Transmit
    _DS3231_SetYear->___awdiv
    _DS3231_SetWeek->_I2C_Mem_Transmit
    _DS3231_SetSec->_I2C_Mem_Transmit
    _DS3231_SetSec->___awdiv
    _DS3231_SetMonth->_I2C_Mem_Transmit
    _DS3231_SetMonth->___awdiv
    _DS3231_SetMin->_I2C_Mem_Transmit
    _DS3231_SetMin->___awdiv
    _DS3231_SetHour->_I2C_Mem_Transmit
    _DS3231_SetHour->___awdiv
    _DS3231_SetDate->_I2C_Mem_Transmit
    _DS3231_SetDate->___awdiv
    _I2C_Mem_Transmit->_I2C_Write
    _Task_SetBrightness->_Display_Set_NumVal
    _GetRisingEdge_SW1->_MySystick_ms
    _MySystick_ms->_abs
    _Display_Set_NumVal->___awdiv
    _DS3231_ReadAll->_DS3231_DateRead
    _DS3231_ReadAll->_DS3231_HourRead
    _DS3231_ReadAll->_DS3231_MinRead
    _DS3231_ReadAll->_DS3231_MonthRead
    _DS3231_ReadAll->_DS3231_SecRead
    _DS3231_ReadAll->_DS3231_YearRead
    _DS3231_YearRead->_I2C_Mem_Read
    _DS3231_WeekRead->_I2C_Mem_Read
    _DS3231_SecRead->_I2C_Mem_Read
    _DS3231_MonthRead->_I2C_Mem_Read
    _DS3231_MinRead->_I2C_Mem_Read
    _DS3231_HourRead->_I2C_Mem_Read
    _DS3231_DateRead->_I2C_Mem_Read
    _I2C_Mem_Read->_I2C_Read
    _I2C_Write->_I2C_is_idle
    _I2C_Stop->_I2C_is_idle
    _I2C_Start->_I2C_is_idle
    _I2C_RepStart->_I2C_is_idle
    _I2C_Read->_I2C_is_idle

Critical Paths under _ISR in COMRAM

    _ISR->_Display_ISR

Critical Paths under _main in BANK0

    _main->_Task_SetRTC

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  166220
                                             39 COMRAM     2     2      0
                        _DS3231_Init
                     _DS3231_ReadAll
                 _Display_Set_NumVal
                  _Display_Set_Point
                          _GPIO_Init
                  _GetRisingEdge_SW1
                  _GetRisingEdge_SW2
                     _Interrupt_Init
                 _Task_SetBrightness
                        _Task_SetRTC
                      _Task_ShowDate
                      _Task_ShowTime
                      _Task_ShowWeek
                        _Timer0_Init
                        _Timer1_Init
 ---------------------------------------------------------------------------------
 (1) _Timer1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Task_ShowWeek                                        7     0      7   10165
                                             21 COMRAM     7     0      7
                 _Display_Set_NumVal
                  _Display_Set_Point
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _Task_ShowTime                                        7     0      7   14374
                                             21 COMRAM     7     0      7
                 _Display_Set_NumVal
                  _Display_Set_Point
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _Task_ShowDate                                        7     0      7   14312
                                             21 COMRAM     7     0      7
                 _Display_Set_NumVal
                  _Display_Set_Point
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _Task_SetRTC                                         41    34      7   87576
                                             30 COMRAM     9     2      7
                                              0 BANK0     32    32      0
                      _DS3231_SetAll
                 _Display_Set_NumVal
                  _Display_Set_Point
                  _GetRisingEdge_SW2
                       _MySystick_ms
                  _Task_IncrementVal
                            ___awdiv
                            ___awmod
                                _abs
 ---------------------------------------------------------------------------------
 (2) _Task_IncrementVal                                    8     4      4    6466
                                             22 COMRAM     8     4      4
                  _GetRisingEdge_SW1
                       _MySystick_ms
                  _PressOverTime_SW1
                                _abs
 ---------------------------------------------------------------------------------
 (3) _PressOverTime_SW1                                    5     3      2    1601
                                             17 COMRAM     5     3      2
                       _MySystick_ms
                                _abs
 ---------------------------------------------------------------------------------
 (2) _GetRisingEdge_SW2                                    2     2      0    1480
                                             17 COMRAM     2     2      0
                       _MySystick_ms
                                _abs
 ---------------------------------------------------------------------------------
 (2) _DS3231_SetAll                                        2     0      2   62309
                                             21 COMRAM     2     0      2
                     _DS3231_SetDate
                     _DS3231_SetHour
                      _DS3231_SetMin
                    _DS3231_SetMonth
                      _DS3231_SetSec
                     _DS3231_SetWeek
                     _DS3231_SetYear
 ---------------------------------------------------------------------------------
 (3) _DS3231_SetYear                                       4     4      0   10054
                                             17 COMRAM     4     4      0
                   _I2C_Mem_Transmit
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_SetWeek                                       2     2      0    1616
                                             17 COMRAM     2     2      0
                   _I2C_Mem_Transmit
 ---------------------------------------------------------------------------------
 (3) _DS3231_SetSec                                        4     4      0   10054
                                             17 COMRAM     4     4      0
                   _I2C_Mem_Transmit
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_SetMonth                                      4     4      0   10085
                                             17 COMRAM     4     4      0
                   _I2C_Mem_Transmit
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_SetMin                                        4     4      0   10054
                                             17 COMRAM     4     4      0
                   _I2C_Mem_Transmit
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_SetHour                                       4     4      0   10054
                                             17 COMRAM     4     4      0
                   _I2C_Mem_Transmit
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_SetDate                                       4     4      0   10085
                                             17 COMRAM     4     4      0
                   _I2C_Mem_Transmit
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) _I2C_Mem_Transmit                                     3     1      2    1486
                                             14 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Task_SetBrightness                                   1     1      0   15882
                                             21 COMRAM     1     1      0
             _Display_Set_Brightness
                 _Display_Set_NumVal
                  _Display_Set_Point
                  _GetRisingEdge_SW1
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    4393
                                              9 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    4045
                                              9 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _GetRisingEdge_SW1                                    2     2      0    1480
                                             17 COMRAM     2     2      0
                       _MySystick_ms
                                _abs
 ---------------------------------------------------------------------------------
 (4) _MySystick_ms                                         4     2      2     723
                                             13 COMRAM     4     2      2
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     723
                                              9 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _Display_Set_Point                                    4     1      3    2554
                                              9 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _Display_Set_NumVal                                   4     1      3    3094
                                             17 COMRAM     4     1      3
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Display_Set_Brightness                               4     1      3     316
                                              9 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _Interrupt_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GPIO_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_ReadAll                                       3     1      2   15303
                                             22 COMRAM     3     1      2
                    _DS3231_DateRead
                    _DS3231_HourRead
                     _DS3231_MinRead
                   _DS3231_MonthRead
                     _DS3231_SecRead
                    _DS3231_WeekRead
                    _DS3231_YearRead
 ---------------------------------------------------------------------------------
 (2) _DS3231_YearRead                                      3     3      0    2152
                                             19 COMRAM     3     3      0
                       _I2C_Mem_Read
 ---------------------------------------------------------------------------------
 (2) _DS3231_WeekRead                                      1     1      0    2084
                                             19 COMRAM     1     1      0
                       _I2C_Mem_Read
 ---------------------------------------------------------------------------------
 (2) _DS3231_SecRead                                       3     3      0    2152
                                             19 COMRAM     3     3      0
                       _I2C_Mem_Read
 ---------------------------------------------------------------------------------
 (2) _DS3231_MonthRead                                     3     3      0    2152
                                             19 COMRAM     3     3      0
                       _I2C_Mem_Read
 ---------------------------------------------------------------------------------
 (2) _DS3231_MinRead                                       3     3      0    2152
                                             19 COMRAM     3     3      0
                       _I2C_Mem_Read
 ---------------------------------------------------------------------------------
 (2) _DS3231_HourRead                                      3     3      0    2152
                                             19 COMRAM     3     3      0
                       _I2C_Mem_Read
 ---------------------------------------------------------------------------------
 (2) _DS3231_DateRead                                      3     3      0    2152
                                             19 COMRAM     3     3      0
                       _I2C_Mem_Read
 ---------------------------------------------------------------------------------
 (3) _I2C_Mem_Read                                         4     1      3    2013
                                             15 COMRAM     4     1      3
                           _I2C_Read
                       _I2C_RepStart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Write                                            1     1      0      65
                                             13 COMRAM     1     1      0
                        _I2C_is_idle
 ---------------------------------------------------------------------------------
 (5) _I2C_Stop                                             0     0      0      34
                        _I2C_is_idle
 ---------------------------------------------------------------------------------
 (5) _I2C_Start                                            0     0      0      34
                        _I2C_is_idle
 ---------------------------------------------------------------------------------
 (4) _I2C_RepStart                                         0     0      0      34
                        _I2C_is_idle
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             2     2      0     102
                                             13 COMRAM     2     2      0
                        _I2C_is_idle
 ---------------------------------------------------------------------------------
 (6) _I2C_is_idle                                          4     4      0      34
                                              9 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Init                                          0     0      0       0
                           _I2C_Init
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  6     6      0      24
                                              3 COMRAM     6     6      0
                        _Display_ISR
 ---------------------------------------------------------------------------------
 (8) _Display_ISR                                          3     3      0      24
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS3231_Init
     _I2C_Init
   _DS3231_ReadAll
     _DS3231_DateRead
       _I2C_Mem_Read
         _I2C_Read
           _I2C_is_idle
         _I2C_RepStart
           _I2C_is_idle
         _I2C_Start
           _I2C_is_idle
         _I2C_Stop
           _I2C_is_idle
         _I2C_Write
           _I2C_is_idle
     _DS3231_HourRead
       _I2C_Mem_Read
         _I2C_Read
           _I2C_is_idle
         _I2C_RepStart
           _I2C_is_idle
         _I2C_Start
           _I2C_is_idle
         _I2C_Stop
           _I2C_is_idle
         _I2C_Write
           _I2C_is_idle
     _DS3231_MinRead
       _I2C_Mem_Read
         _I2C_Read
           _I2C_is_idle
         _I2C_RepStart
           _I2C_is_idle
         _I2C_Start
           _I2C_is_idle
         _I2C_Stop
           _I2C_is_idle
         _I2C_Write
           _I2C_is_idle
     _DS3231_MonthRead
       _I2C_Mem_Read
         _I2C_Read
           _I2C_is_idle
         _I2C_RepStart
           _I2C_is_idle
         _I2C_Start
           _I2C_is_idle
         _I2C_Stop
           _I2C_is_idle
         _I2C_Write
           _I2C_is_idle
     _DS3231_SecRead
       _I2C_Mem_Read
         _I2C_Read
           _I2C_is_idle
         _I2C_RepStart
           _I2C_is_idle
         _I2C_Start
           _I2C_is_idle
         _I2C_Stop
           _I2C_is_idle
         _I2C_Write
           _I2C_is_idle
     _DS3231_WeekRead
       _I2C_Mem_Read
         _I2C_Read
           _I2C_is_idle
         _I2C_RepStart
           _I2C_is_idle
         _I2C_Start
           _I2C_is_idle
         _I2C_Stop
           _I2C_is_idle
         _I2C_Write
           _I2C_is_idle
     _DS3231_YearRead
       _I2C_Mem_Read
         _I2C_Read
           _I2C_is_idle
         _I2C_RepStart
           _I2C_is_idle
         _I2C_Start
           _I2C_is_idle
         _I2C_Stop
           _I2C_is_idle
         _I2C_Write
           _I2C_is_idle
   _Display_Set_NumVal
     ___awdiv (ARG)
     ___awmod (ARG)
   _Display_Set_Point
   _GPIO_Init
   _GetRisingEdge_SW1
     _MySystick_ms
       _abs
     _abs
   _GetRisingEdge_SW2
     _MySystick_ms
       _abs
     _abs
   _Interrupt_Init
   _Task_SetBrightness
     _Display_Set_Brightness
     _Display_Set_NumVal
       ___awdiv (ARG)
       ___awmod (ARG)
     _Display_Set_Point
     _GetRisingEdge_SW1
       _MySystick_ms
         _abs
       _abs
     ___awdiv
     ___awmod
   _Task_SetRTC
     _DS3231_SetAll
       _DS3231_SetDate
         _I2C_Mem_Transmit
           _I2C_Start
             _I2C_is_idle
           _I2C_Stop
             _I2C_is_idle
           _I2C_Write
             _I2C_is_idle
         ___awdiv
         ___awmod
       _DS3231_SetHour
         _I2C_Mem_Transmit
           _I2C_Start
             _I2C_is_idle
           _I2C_Stop
             _I2C_is_idle
           _I2C_Write
             _I2C_is_idle
         ___awdiv
         ___awmod
       _DS3231_SetMin
         _I2C_Mem_Transmit
           _I2C_Start
             _I2C_is_idle
           _I2C_Stop
             _I2C_is_idle
           _I2C_Write
             _I2C_is_idle
         ___awdiv
         ___awmod
       _DS3231_SetMonth
         _I2C_Mem_Transmit
           _I2C_Start
             _I2C_is_idle
           _I2C_Stop
             _I2C_is_idle
           _I2C_Write
             _I2C_is_idle
         ___awdiv
         ___awmod
       _DS3231_SetSec
         _I2C_Mem_Transmit
           _I2C_Start
             _I2C_is_idle
           _I2C_Stop
             _I2C_is_idle
           _I2C_Write
             _I2C_is_idle
         ___awdiv
         ___awmod
       _DS3231_SetWeek
         _I2C_Mem_Transmit
           _I2C_Start
             _I2C_is_idle
           _I2C_Stop
             _I2C_is_idle
           _I2C_Write
             _I2C_is_idle
       _DS3231_SetYear
         _I2C_Mem_Transmit
           _I2C_Start
             _I2C_is_idle
           _I2C_Stop
             _I2C_is_idle
           _I2C_Write
             _I2C_is_idle
         ___awdiv
         ___awmod
     _Display_Set_NumVal
       ___awdiv (ARG)
       ___awmod (ARG)
     _Display_Set_Point
     _GetRisingEdge_SW2
       _MySystick_ms
         _abs
       _abs
     _MySystick_ms
       _abs
     _Task_IncrementVal
       _GetRisingEdge_SW1
         _MySystick_ms
           _abs
         _abs
       _MySystick_ms
         _abs
       _PressOverTime_SW1
         _MySystick_ms
           _abs
         _abs
       _abs
     ___awdiv
     ___awmod
     _abs
   _Task_ShowDate
     _Display_Set_NumVal
       ___awdiv (ARG)
       ___awmod (ARG)
     _Display_Set_Point
     ___awdiv
     ___awmod
   _Task_ShowTime
     _Display_Set_NumVal
       ___awdiv (ARG)
       ___awmod (ARG)
     _Display_Set_Point
     ___awdiv
     ___awmod
   _Task_ShowWeek
     _Display_Set_NumVal
       ___awdiv (ARG)
       ___awmod (ARG)
     _Display_Set_Point
     ___awmod
   _Timer0_Init
   _Timer1_Init

 _ISR (ROOT)
   _Display_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      3B       5       36.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     29      3E       1       66.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      79      20        0.0%
DATA                 0      0      79       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Aug 07 00:33:52 2022

                ??_Interrupt_Init 000A                __size_of_I2C_Start 0008  
                     _SSPSTATbits 000FC7                __size_of_I2C_Write 0014  
                              l97 0DC6                      ___awdiv@sign 000F  
                     __CFG_BORV$3 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
           __end_of_Task_ShowDate 130E                      __CFG_CP3$OFF 000000  
        DS3231_MonthRead@Dec_Data 0015             __end_of_Task_ShowWeek 172A  
           __end_of_Task_ShowTime 10BA                DS3231_SetWeek@data 0013  
                             l200 1792                               l212 19FA  
                             l132 1380                               l221 192C  
                             l134 13CC                               l402 08F2  
                             l147 131A                               l412 0998  
                             l149 1368                               l430 0ABC  
                             l451 0CA0                               l439 0B62  
                    __CFG_CPB$OFF 000000                      __CFG_CPD$OFF 000000  
                             _ISR 0008                      __CFG_BOR$OFF 000000  
                             _abs 1794                      ___awmod@sign 000F  
              DS3231_SetYear@data 0015                               wreg 000FE8  
                    __CFG_LVP$OFF 000000               DS3231_SetMonth@data 0015  
                            ?_ISR 0001                      __CFG_WDT$OFF 000000  
                            ?_abs 000A                              l1151 17BC  
                            l3110 0B1C                              l3102 0AA2  
                            l3112 0B36                              l3104 0AF6  
                            l3040 083C                              l3200 0D02  
                            l3130 0BEE                              l3210 0D38  
                            l3124 0BC0                              l3116 0B48  
                            l3060 092C                              l3132 0C24  
                            l3052 08AC                              l3036 0834  
                            l3212 0D50                              l3142 0C62  
                            l3126 0BDA                              l3118 0B9A  
                            l3054 08C6                              l3046 0886  
                            l3038 0836                              l3222 0DBC  
                            l3214 0D68                              l3230 0DD2  
                            l3080 09F6                              l3072 097E  
                            l3224 0DC2                              l3216 0D8C  
                            l3208 0D20                              l3138 0C46  
                            l3090 0A50                              l3082 0A10  
                            l3074 09D0                              l3066 0952  
                            l3058 08D8                              l3172 11D4  
                            l3148 0C86                              l3068 096C  
                            l3086 0A22                              l3158 0CB0  
                            l3190 0CE0                              l2720 10FC  
                            l2712 10DE                              l3096 0A76  
                            l3088 0A3C                              l2650 1780  
                            l2730 111C                              l2706 10CE  
                            l2810 15C2                              l3098 0A90  
                            l2646 176A                              l2718 10F4  
                            l2734 1126                              l2750 1244  
                            l2806 15B2                              l3198 0CFE  
                            l2760 1266                              l2738 1134  
                            l2770 1288                              l2754 1250  
                            l2678 147E                              l2774 1296  
                            l2766 127E                              l2758 125E  
                            l2796 1370                              l2888 13D4  
                            l2994 1018                              l2988 0FE8  
                            u3101 0D2A                              u3111 0D42  
                            _LATD 000F8C                              u3121 0D5A  
                            u3141 0DB0                              u3207 0D9A  
                            u2280 17A2                              u2440 126A  
                            u2345 193C                              u2346 193E  
                            u2290 19FE                              u2380 1100  
                            u2800 086A                              u2490 134E  
                            u2810 0880                              u2660 13B2  
                            u2820 0882                              u2760 10B0  
                            u2690 0FD8                              u2770 10B2  
                            u2781 081A                              u2950 0C32  
                            u2980 0C72                              i2l76 16D6  
                            _TMR0 000FD6                              _TMR1 000FCE  
           __size_of_I2C_Mem_Read 0036                              _Mode 003D  
                            abs@a 000A                              _main 0CC6  
                __end_of_I2C_Init 198C                  __end_of_I2C_Read 1942  
                            fsr2h 000FDA                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 003F                  __end_of_I2C_Stop 1A26  
               ??_DS3231_DateRead 0014                              prodl 000FF3  
            __size_of_I2C_is_idle 0034                              start 000E  
           __size_of_I2C_RepStart 0008                __size_of_GPIO_Init 0014  
                   __CFG_IESO$OFF 000000            I2C_Mem_Read@MemAddress 0010  
               ?_I2C_Mem_Transmit 000F                     __CFG_MCLRE$ON 000000  
                    ___param_bank 000000                ??_I2C_Mem_Transmit 0011  
                           ??_ISR 0004                             ??_abs 000C  
                   __CFG_PLLDIV$4 000000           ?_Display_Set_Brightness 000A  
      Task_IncrementVal@targetVal 0017               __end_of_Display_ISR 0F12  
                   _DS3231_SetAll 113E                    __CFG_CCP2MX$ON 000000  
                   _DS3231_SetMin 165E                     _DS3231_SetSec 1612  
               ??_DS3231_HourRead 0014                             ?_main 0001  
                 __end_of___awdiv 113E                   __end_of___awmod 12A0  
                 ___awdiv@divisor 000C                             i2l336 0F0E  
                 ___awdiv@counter 000E                I2C_is_idle@TimeOut 000C  
               ??_DS3231_SetMonth 0012                     __CFG_USBDIV$2 000000  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                   __CFG_PWRT$OFF 000000                 ??_DS3231_WeekRead 0014  
                    _I2C_Mem_Read 172A                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                             _MyRTC 0088  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
               ??_DS3231_YearRead 0014                    __CFG_EBTR3$OFF 000000  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
      __end_of_Task_SetBrightness 1230                      _I2C_RepStart 1A2E  
               __end_of_I2C_Start 1A2E                 __end_of_I2C_Write 1A04  
                           tablat 000FF5                             plusw0 000FEB  
                           plusw1 000FE3                             plusw2 000FDB  
                           ttemp5 0040                             ttemp6 0043  
                           ttemp7 0047                             status 000FD8  
                           wtemp8 0040                    __CFG_ICPRT$OFF 000000  
                  __CFG_PBADEN$ON 000000        __size_of_Display_Set_Point 0014  
                 __initialization 13D8                      __end_of_main 0E02  
  __end_of_Display_Set_Brightness 19DC                    ?_DS3231_SetAll 0016  
             DS3231_WeekRead@data 0014                    ?_DS3231_SetMin 0001  
                  ?_DS3231_SetSec 0001                            ??_main 0028  
                   __activetblptr 000002                    _DS3231_MinRead 18B2  
                  _DS3231_ReadAll 0F12                 __end_of_GPIO_Init 19F0  
                  _DS3231_SecRead 1884                    _DS3231_SetDate 14DA  
                   ??_Task_SetRTC 0026                    _DS3231_SetHour 152C  
                  _DS3231_SetWeek 18E0                    _DS3231_SetYear 15C6  
          _PressOverTime_SW1$1849 0015                            _ADCON1 000FC1  
                ___awdiv@dividend 000A                 ?_DS3231_MonthRead 0001  
                          i2l2302 0F06                            i2l2264 0E1C  
                          i2l2294 0EF0                            i2l2288 0ED2  
                          i2l2298 0EFA                            _SSPADD 000FC8  
                          _SSPBUF 000FC9                ??_DS3231_MonthRead 0014  
                   ??_Timer0_Init 000A                     ??_Timer1_Init 000A  
                  __CFG_XINST$OFF 000000                       _Display_ISR 0E02  
          DS3231_SetWeek@BCD_Data 0012                         ??___awdiv 000E  
                       ??___awmod 000E                            clear_0 1410  
                          clear_1 141C                  ___awdiv@quotient 0010  
              Task_SetRTC@seq_cnt 0078                   ___awmod@divisor 000C  
                 ___awmod@counter 000E            __end_of_DS3231_MinRead 18E0  
          __end_of_DS3231_ReadAll 0FA6            __end_of_DS3231_SecRead 18B2  
                I2C_Mem_Read@addr 0013                  I2C_Mem_Read@data 0011  
          __end_of_DS3231_SetDate 152C            __end_of_DS3231_SetHour 157A  
                    __pdataCOMRAM 003E            __end_of_DS3231_SetWeek 1904  
          __end_of_DS3231_SetYear 1612                         ?_I2C_Init 0001  
                       ?_I2C_Read 0001                         ?_I2C_Stop 0001  
                    __mediumconst 0000                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
         DS3231_YearRead@BCD_Data 0016                        __accesstop 0060  
         __end_of__initialization 1422               __end_of_Task_SetRTC 0CC6  
     __size_of_Display_Set_NumVal 0014               I2C_Read@GenerateAck 000E  
                   ___rparam_used 000001               MySystick_ms@old_cnt 0084  
                  __pcstackCOMRAM 0001                      __pidataBANK0 1A12  
                 ??_DS3231_SetAll 0018                   ??_DS3231_SetMin 0012  
                 ??_DS3231_SetSec 0012               __end_of_Timer0_Init 1974  
             __end_of_Timer1_Init 19A0                   ?_DS3231_MinRead 0001  
                 ?_DS3231_ReadAll 0017                   ?_DS3231_SecRead 0001  
                 ?_DS3231_SetDate 0001                        ??_I2C_Init 000A  
                      ??_I2C_Read 000E                   ?_DS3231_SetHour 0001  
                 ?_DS3231_SetWeek 0001                   ?_DS3231_SetYear 0001  
                      ??_I2C_Stop 000E           DS3231_YearRead@Dec_Data 0015  
                 _DS3231_DateRead 1826                     ?_MySystick_ms 000E  
                      __pbssBANK0 0080                     ??_DS3231_Init 000A  
                 _DS3231_HourRead 17F6            DS3231_SetYear@BCD_Data 0014  
                    I2C_Read@data 000F             PressOverTime_SW1@time 0012  
                 _DS3231_SetMonth 1488                   _DS3231_WeekRead 1942  
         PressOverTime_SW1@status 003B           PressOverTime_SW2@status 003C  
                 _DS3231_YearRead 1856              Display_ISR@BrightCnt 0035  
       __size_of_I2C_Mem_Transmit 0020               Task_SetRTC@PrevTime 0080  
                     _Task_SetRTC 0810                    ??_MySystick_ms 0010  
                         _SSPCON2 000FC5                           _SSPSTAT 000FC7  
               _PressOverTime_SW1 157A                     ??_I2C_is_idle 000A  
                 __CFG_VREGEN$OFF 000000                ?_PressOverTime_SW1 0012  
          __size_of_Task_ShowDate 006E                         _I2C_Start 1A26  
                       _I2C_Write 19F0              Task_ShowTime@old_sec 0033  
          __size_of_Task_ShowWeek 0038            __size_of_Task_ShowTime 0088  
                         __Hparam 0000                       _Timer0_Init 195C  
                     _Timer1_Init 198C                _Task_SetBrightness 11BA  
                         __Lparam 0000               __end_of_DS3231_Init 1A3C  
             ??_PressOverTime_SW1 0014             Task_SetRTC@CurrentRTC 001F  
                         ___awdiv 10BA                           ___awmod 1230  
                    __psmallconst 0800                   __CFG_STVREN$OFF 000000  
             ?_Task_SetBrightness 0001                           __pcinit 13D8  
                         __ramtop 0800           __end_of_DS3231_DateRead 1856  
                         __ptext0 0CC6                           __ptext1 198C  
                         __ptext2 195C                           __ptext3 16F2  
                         __ptext4 1032                           __ptext5 12A0  
                         __ptext6 0810                           __ptext7 0FA6  
                         __ptext8 157A                           __ptext9 1374  
                       _T0CONbits 000FD5                      __size_of_ISR 16EA  
                       _T1CONbits 000FCD                      __size_of_abs 0032  
         __size_of_Interrupt_Init 000E                  ___awmod@dividend 000A  
          DS3231_SecRead@BCD_Data 0016         __end_of_PressOverTime_SW1 15C6  
     Display_Set_Point@digit0_val 000D       Display_Set_Point@digit1_val 000A  
     Display_Set_Point@digit2_val 000B       Display_Set_Point@digit3_val 000C  
                       _GPIO_Init 19DC                    __pintcode_body 16AA  
            end_of_initialization 1422           __end_of_DS3231_HourRead 1826  
            ??_Task_SetBrightness 0016                     __Lmediumconst 0000  
                         int_func 16AA           __end_of_DS3231_SetMonth 14DA  
         __end_of_DS3231_WeekRead 195C                        ?_I2C_Start 0001  
                      ?_I2C_Write 0001           __end_of_DS3231_YearRead 1884  
                    ?_Display_ISR 0001              I2C_Mem_Transmit@addr 0011  
             __end_of_I2C_is_idle 1794              I2C_Mem_Transmit@data 0010  
        GetRisingEdge_SW1@Ready_f 0037                           postdec1 000FE5  
        GetRisingEdge_SW2@Ready_f 0039                           postinc0 000FEE  
                         postinc2 000FDE         __size_of_DS3231_MonthRead 0030  
                 Display_ISR@data 0003                         _PORTEbits 000F84  
                   _Task_ShowDate 12A0            _Task_IncrementVal$1852 001C  
                   _Task_ShowWeek 16F2                     _Task_ShowTime 1032  
          DS3231_SecRead@Dec_Data 0015                 _GetRisingEdge_SW1 130E  
               _GetRisingEdge_SW2 1374                         _TRISBbits 000F93  
        GetRisingEdge_SW1@old_cnt 0086                ?_GetRisingEdge_SW1 0001  
              ?_GetRisingEdge_SW2 0001           DS3231_SetMonth@BCD_Data 0014  
               __size_of_I2C_Init 0018                 __size_of_I2C_Read 001E  
               __size_of_I2C_Stop 0008          GetRisingEdge_SW2@old_cnt 002C  
                      ?_GPIO_Init 0001                   MySystick_ms@cnt 002A  
             ??_GetRisingEdge_SW1 0012               ??_GetRisingEdge_SW2 0012  
                     _DS3231_Init 1A36                  ??_DS3231_MinRead 0014  
                ??_DS3231_ReadAll 0019                  ??_DS3231_SecRead 0014  
            __end_of_MySystick_ms 1488                  ??_DS3231_SetDate 0012  
            __end_of_NumOut_Table 080E                  ??_DS3231_SetHour 0012  
                ??_DS3231_SetWeek 0012                  ??_DS3231_SetYear 0012  
               _Task_IncrementVal 0FA6                     __pidataCOMRAM 1A3C  
                  ?_Task_ShowDate 0016         __end_of_GetRisingEdge_SW1 1374  
       __end_of_GetRisingEdge_SW2 13D8                  ?_DS3231_DateRead 0001  
                  ?_Task_ShowWeek 0016                    ?_Task_ShowTime 0016  
              ?_Task_IncrementVal 0017                  _I2C_Mem_Transmit 1904  
             start_initialization 13D8                       __end_of_ISR 16F2  
                     __end_of_abs 17C6               ??_Task_IncrementVal 001B  
                       _MyDisplay 008F        __size_of_PressOverTime_SW1 004C  
      __end_of_Display_Set_NumVal 19C8                  ?_DS3231_HourRead 0001  
                     _I2C_is_idle 1760                 Task_SetRTC@NewSet 0079  
                ?_DS3231_SetMonth 0001                       ??_I2C_Start 000E  
                     ??_I2C_Write 000E                  ?_DS3231_WeekRead 0001  
        ??_Display_Set_Brightness 000D                  ?_DS3231_YearRead 0001  
       __end_of_Task_IncrementVal 1032           Task_IncrementVal@maxVal 001A  
         Task_IncrementVal@minVal 0019                       __pdataBANK0 008F  
                __CFG_LPT1OSC$OFF 000000             __end_of_DS3231_SetAll 11BA  
           __end_of_DS3231_SetMin 16AA             __end_of_DS3231_SetSec 165E  
                  _Interrupt_Init 1A04                     ?_I2C_Mem_Read 0010  
                     __pbssCOMRAM 002A                     __pcstackBANK0 0060  
                    ?_Task_SetRTC 001F                       ??_GPIO_Init 000A  
                   ?_I2C_RepStart 0001           DS3231_HourRead@BCD_Data 0016  
    Task_SetBrightness@brightness 003E                      ?_Timer0_Init 0001  
                    ?_Timer1_Init 0001          PressOverTime_SW1@old_cnt 002E  
                       __pintcode 0008                          ?___awdiv 000A  
        PressOverTime_SW2@old_cnt 0030                          ?___awmod 000A  
            __size_of_Display_ISR 0110                  _DS3231_MonthRead 17C6  
                 ??_Task_ShowDate 001D                   ??_Task_ShowWeek 001D  
                 ??_Task_ShowTime 001D            __end_of_Interrupt_Init 1A12  
      __size_of_GetRisingEdge_SW1 0066        __size_of_GetRisingEdge_SW2 0064  
                  ??_I2C_Mem_Read 0013                       __smallconst 0800  
                        _I2C_Init 1974                          _I2C_Read 1924  
                        _I2C_Stop 1A1E                    ??_I2C_RepStart 000E  
         DS3231_DateRead@BCD_Data 0016           DS3231_HourRead@Dec_Data 0015  
                        _LATBbits 000F8A   __size_of_Display_Set_Brightness 0014  
           __size_of_MySystick_ms 0058                          i2u170_40 0EA8  
                        i2u172_40 0EC2                          i2u171_48 0EAA  
                        i2u173_48 0EC4                          i2u166_40 0E6C  
                        i2u168_40 0E8A                          i2u167_48 0E6E  
                        i2u169_48 0E8C                          _RCONbits 000FD0  
           DS3231_SetMin@BCD_Data 0014                  __CFG_WDTPS$32768 000000  
      __size_of_Task_IncrementVal 008C                   ?_Interrupt_Init 0001  
Display_Set_Brightness@digit0_val 000D  Display_Set_Brightness@digit1_val 000A  
          DS3231_MinRead@BCD_Data 0016  Display_Set_Brightness@digit2_val 000B  
Display_Set_Brightness@digit3_val 000C           DS3231_DateRead@Dec_Data 0015  
                     _INTCON2bits 000FF1                         copy_data0 13EC  
          _GetRisingEdge_SW1$1851 0012            _GetRisingEdge_SW2$1850 0012  
                    _MySystick_ms 1430             DS3231_SetSec@BCD_Data 0014  
                    _NumOut_Table 0801           Task_ShowWeek@CurrentRTC 0016  
     __size_of_Task_SetBrightness 0076                      ?_DS3231_Init 0001  
                Task_SetRTC@Blink 0034          __end_of_I2C_Mem_Transmit 1924  
                        __Hrparam 0000                  _Task_SetRTC$1130 0062  
                _Task_SetRTC$1131 0064                  _Task_SetRTC$1140 0076  
                _Task_SetRTC$1132 0066                  _Task_SetRTC$1133 0068  
                _Task_SetRTC$1134 006A                  _Task_SetRTC$1135 006C  
                _Task_SetRTC$1136 006E                  _Task_SetRTC$1137 0070  
                _Task_SetRTC$1138 0072                  _Task_SetRTC$1139 0074  
                _Task_SetRTC$1853 0060                          __Lrparam 0000  
                   I2C_Write@data 000E                  __size_of___awdiv 0084  
                __size_of___awmod 0070            DS3231_MinRead@Dec_Data 0015  
              DS3231_ReadAll@time 0017            _Display_Set_Brightness 19C8  
        Task_ShowTime@Point_blink 0032        I2C_Mem_Transmit@MemAddress 000F  
                        __ptext10 113E                          __ptext11 15C6  
                        __ptext20 1230                          __ptext12 18E0  
                        __ptext21 10BA                          __ptext13 1612  
                        __ptext30 0F12                          __ptext22 130E  
                        __ptext14 1488                          __ptext31 1856  
                        __ptext23 1430                          __ptext15 165E  
                        __ptext40 1A1E                          __ptext32 1942  
                        __ptext24 1794                          __ptext16 152C  
                        __ptext41 1A26                          __ptext33 1884  
                        __ptext25 19A0                          __ptext17 14DA  
                        __ptext42 1A2E                          __ptext34 17C6  
                        __ptext26 19B4                          __ptext18 1904  
                        __ptext43 1924                          __ptext35 18B2  
                        __ptext27 19C8                          __ptext19 11BA  
                        __ptext44 1760                          __ptext36 17F6  
                        __ptext28 1A04                          __ptext45 1A36  
                        __ptext37 1826                          __ptext29 19DC  
                        __ptext46 1974                          __ptext38 172A  
                        __ptext39 19F0                          __ptext48 0E02  
            __size_of_Task_SetRTC 04B6           Task_ShowTime@CurrentRTC 0016  
                    ?_I2C_is_idle 0001                     __size_of_main 013C  
          DS3231_SetHour@BCD_Data 0014              __end_of_I2C_Mem_Read 1760  
              _Display_Set_NumVal 19B4              __size_of_Timer0_Init 0018  
            __size_of_Timer1_Init 0014                          int$flags 003F  
            __end_of_I2C_RepStart 1A36            GetRisingEdge_SW1@exist 0038  
          GetRisingEdge_SW2@exist 003A               ?_Display_Set_NumVal 0012  
           __CFG_CPUDIV$OSC1_PLL2 000000                        _INTCONbits 000FF2  
         Task_ShowDate@CurrentRTC 0016          __size_of_DS3231_DateRead 0030  
        __end_of_DS3231_MonthRead 17F6                          intlevel2 0000  
      Task_IncrementVal@Increment 001E              ??_Display_Set_NumVal 0015  
                      _OSCCONbits 000FD3          __size_of_DS3231_HourRead 0030  
               _Display_Set_Point 19A0          __size_of_DS3231_SetMonth 0052  
              ?_Display_Set_Point 000A                DS3231_SetDate@data 0015  
        __size_of_DS3231_WeekRead 001A          __size_of_DS3231_YearRead 002E  
    Display_Set_NumVal@digit0_val 0015      Display_Set_NumVal@digit1_val 0012  
    Display_Set_NumVal@digit2_val 0013      Display_Set_NumVal@digit3_val 0014  
             ??_Display_Set_Point 000D          DS3231_MonthRead@BCD_Data 0016  
         __size_of_DS3231_MinRead 002E           __size_of_DS3231_ReadAll 0094  
         __size_of_DS3231_SecRead 002E                  Display_ISR@digit 0036  
         __size_of_DS3231_SetDate 0052                       _SSPCON1bits 000FC6  
                     _SSPCON2bits 000FC5           __size_of_DS3231_SetHour 004E  
         __size_of_DS3231_SetWeek 0024                 DS3231_SetAll@time 0016  
         __size_of_DS3231_SetYear 004C         Task_IncrementVal@PrevTime 0082  
              __CFG_FOSC$HSPLL_HS 000000            __size_of_DS3231_SetAll 007C  
          DS3231_SetDate@BCD_Data 0014            __size_of_DS3231_SetMin 004C  
          __size_of_DS3231_SetSec 004C                 DS3231_SetMin@data 0015  
       __end_of_Display_Set_Point 19B4                 DS3231_SetSec@data 0015  
            __size_of_DS3231_Init 0006                     ??_Display_ISR 0001  
              DS3231_SetHour@data 0015  
