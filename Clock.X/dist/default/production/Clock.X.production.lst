

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 01 17:16:27 2021

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    58  0000                     
    59                           ; Version 2.05
    60                           ; Generated 20/12/2018 GMT
    61                           ; 
    62                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F4550 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	idataCOMRAM
    95  000F45                     __pidataCOMRAM:
    96                           	opt callstack 0
    97                           
    98                           ;initializer for _Brightness
    99  000F45  0004               	dw	4
   100  000F47  0004               	dw	4
   101  000F49  0004               	dw	4
   102  000F4B  0004               	dw	4
   103                           
   104                           ;initializer for _NumBuf
   105  000F4D  01                 	db	1
   106  000F4E  02                 	db	2
   107  000F4F  09                 	db	9
   108  000F50  08                 	db	8
   109                           
   110                           	psect	idataBANK0
   111  000F38                     __pidataBANK0:
   112                           	opt callstack 0
   113                           
   114                           ;initializer for _NumOut_Table
   115  000F38  C0                 	db	192
   116  000F39  F9                 	db	249
   117  000F3A  A4                 	db	164
   118  000F3B  B0                 	db	176
   119  000F3C  99                 	db	153
   120  000F3D  92                 	db	146
   121  000F3E  82                 	db	130
   122  000F3F  F8                 	db	248
   123  000F40  80                 	db	128
   124  000F41  90                 	db	144
   125  000F42  BF                 	db	191
   126  000F43  FF                 	db	255
   127  000F44  C6                 	db	198
   128  0000                     _TMR0	set	4054
   129  0000                     _SSPBUF	set	4041
   130  0000                     _SSPCON2bits	set	4037
   131  0000                     _SSPSTAT	set	4039
   132  0000                     _SSPCON2	set	4037
   133  0000                     _SSPADD	set	4040
   134  0000                     _SSPCON1bits	set	4038
   135  0000                     _SSPSTATbits	set	4039
   136  0000                     _TRISBbits	set	3987
   137  0000                     _T0CONbits	set	4053
   138  0000                     _INTCON2bits	set	4081
   139  0000                     _RCONbits	set	4048
   140  0000                     _LATD	set	3980
   141  0000                     _LATBbits	set	3978
   142  0000                     _PORTEbits	set	3972
   143  0000                     _TRISE	set	3990
   144  0000                     _TRISD	set	3989
   145  0000                     _TRISC	set	3988
   146  0000                     _TRISB	set	3987
   147  0000                     _ADCON1	set	4033
   148  0000                     _INTCONbits	set	4082
   149                           
   150                           ; #config settings
   151  0000                     
   152                           	psect	cinit
   153  000958                     __pcinit:
   154                           	opt callstack 0
   155  000958                     start_initialization:
   156                           	opt callstack 0
   157  000958                     __initialization:
   158                           	opt callstack 0
   159                           
   160                           ; Initialize objects allocated to BANK0 (13 bytes)
   161                           ; load TBLPTR registers with __pidataBANK0
   162  000958  0E38               	movlw	low __pidataBANK0
   163  00095A  6EF6               	movwf	tblptrl,c
   164  00095C  0E0F               	movlw	high __pidataBANK0
   165  00095E  6EF7               	movwf	tblptrh,c
   166  000960  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   167  000962  6EF8               	movwf	tblptru,c
   168  000964  EE00  F060         	lfsr	0,__pdataBANK0
   169  000968  EE10 F00D          	lfsr	1,13
   170  00096C                     copy_data0:
   171  00096C  0009               	tblrd		*+
   172  00096E  CFF5 FFEE          	movff	tablat,postinc0
   173  000972  50E5               	movf	postdec1,w,c
   174  000974  50E1               	movf	fsr1l,w,c
   175  000976  E1FA               	bnz	copy_data0
   176                           
   177                           ; Initialize objects allocated to COMRAM (12 bytes)
   178                           ; load TBLPTR registers with __pidataCOMRAM
   179  000978  0E45               	movlw	low __pidataCOMRAM
   180  00097A  6EF6               	movwf	tblptrl,c
   181  00097C  0E0F               	movlw	high __pidataCOMRAM
   182  00097E  6EF7               	movwf	tblptrh,c
   183  000980  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   184  000982  6EF8               	movwf	tblptru,c
   185  000984  EE00  F049         	lfsr	0,__pdataCOMRAM
   186  000988  EE10 F00C          	lfsr	1,12
   187  00098C                     copy_data1:
   188  00098C  0009               	tblrd		*+
   189  00098E  CFF5 FFEE          	movff	tablat,postinc0
   190  000992  50E5               	movf	postdec1,w,c
   191  000994  50E1               	movf	fsr1l,w,c
   192  000996  E1FA               	bnz	copy_data1
   193                           
   194                           ; Clear objects allocated to COMRAM (27 bytes)
   195  000998  EE00  F02E         	lfsr	0,__pbssCOMRAM
   196  00099C  0E1B               	movlw	27
   197  00099E                     clear_0:
   198  00099E  6AEE               	clrf	postinc0,c
   199  0009A0  06E8               	decf	wreg,f,c
   200  0009A2  E1FD               	bnz	clear_0
   201  0009A4                     end_of_initialization:
   202                           	opt callstack 0
   203  0009A4                     __end_of__initialization:
   204                           	opt callstack 0
   205  0009A4  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   206  0009A6  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   207  0009A8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   208  0009AA  6EF8               	movwf	tblptru,c
   209  0009AC  0100               	movlb	0
   210  0009AE  EF9D  F002         	goto	_main	;jump to C main() function
   211                           
   212                           	psect	bssCOMRAM
   213  00002E                     __pbssCOMRAM:
   214                           	opt callstack 0
   215  00002E                     _PointBuf:
   216                           	opt callstack 0
   217  00002E                     	ds	4
   218  000032                     SetRTC@BlinkTime:
   219                           	opt callstack 0
   220  000032                     	ds	2
   221  000034                     Display_ISR@BrightCnt:
   222                           	opt callstack 0
   223  000034                     	ds	1
   224  000035                     Display_ISR@digit:
   225                           	opt callstack 0
   226  000035                     	ds	1
   227  000036                     GetRisingEdge_SW1@flag:
   228                           	opt callstack 0
   229  000036                     	ds	1
   230  000037                     GetRisingEdge_SW2@flag:
   231                           	opt callstack 0
   232  000037                     	ds	1
   233  000038                     ShowTime@old_sec:
   234                           	opt callstack 0
   235  000038                     	ds	1
   236  000039                     SetRTC@flag:
   237                           	opt callstack 0
   238  000039                     	ds	1
   239  00003A                     _Mode:
   240                           	opt callstack 0
   241  00003A                     	ds	1
   242  00003B                     _Set:
   243                           	opt callstack 0
   244  00003B                     	ds	7
   245  000042                     _RTC:
   246                           	opt callstack 0
   247  000042                     	ds	7
   248                           
   249                           	psect	dataCOMRAM
   250  000049                     __pdataCOMRAM:
   251                           	opt callstack 0
   252  000049                     _Brightness:
   253                           	opt callstack 0
   254  000049                     	ds	8
   255  000051                     _NumBuf:
   256                           	opt callstack 0
   257  000051                     	ds	4
   258                           
   259                           	psect	dataBANK0
   260  000060                     __pdataBANK0:
   261                           	opt callstack 0
   262  000060                     _NumOut_Table:
   263                           	opt callstack 0
   264  000060                     	ds	13
   265                           
   266                           	psect	cstackBANK0
   267  00006D                     __pcstackBANK0:
   268                           	opt callstack 0
   269  00006D                     ??_main:
   270                           
   271                           ; 1 bytes @ 0x0
   272  00006D                     	ds	2
   273                           
   274                           	psect	cstackCOMRAM
   275  000001                     __pcstackCOMRAM:
   276                           	opt callstack 0
   277  000001                     ??_Display_ISR:
   278  000001                     
   279                           ; 1 bytes @ 0x0
   280  000001                     	ds	4
   281  000005                     _Display_ISR$482:
   282                           	opt callstack 0
   283                           
   284                           ; 2 bytes @ 0x4
   285  000005                     	ds	2
   286  000007                     ??_ISR:
   287                           
   288                           ; 1 bytes @ 0x6
   289  000007                     	ds	4
   290  00000B                     ??_GetRisingEdge_SW2:
   291  00000B                     ??_GetRisingEdge_SW1:
   292  00000B                     ??_I2C_is_idle:
   293  00000B                     ?___awdiv:
   294                           	opt callstack 0
   295  00000B                     ?___awmod:
   296                           	opt callstack 0
   297  00000B                     ?___lwdiv:
   298                           	opt callstack 0
   299  00000B                     ?___lwmod:
   300                           	opt callstack 0
   301  00000B                     ___awdiv@dividend:
   302                           	opt callstack 0
   303  00000B                     ___awmod@dividend:
   304                           	opt callstack 0
   305  00000B                     ___lwdiv@dividend:
   306                           	opt callstack 0
   307  00000B                     ___lwmod@dividend:
   308                           	opt callstack 0
   309                           
   310                           ; 2 bytes @ 0xA
   311  00000B                     	ds	2
   312  00000D                     I2C_is_idle@TimeOut:
   313                           	opt callstack 0
   314  00000D                     ___awdiv@divisor:
   315                           	opt callstack 0
   316  00000D                     ___awmod@divisor:
   317                           	opt callstack 0
   318  00000D                     ___lwdiv@divisor:
   319                           	opt callstack 0
   320  00000D                     ___lwmod@divisor:
   321                           	opt callstack 0
   322                           
   323                           ; 2 bytes @ 0xC
   324  00000D                     	ds	2
   325  00000F                     I2C_Write@data:
   326                           	opt callstack 0
   327  00000F                     I2C_Read@GenerateAck:
   328                           	opt callstack 0
   329  00000F                     ___awdiv@counter:
   330                           	opt callstack 0
   331  00000F                     ___awmod@counter:
   332                           	opt callstack 0
   333  00000F                     ___lwmod@counter:
   334                           	opt callstack 0
   335  00000F                     ___lwdiv@quotient:
   336                           	opt callstack 0
   337                           
   338                           ; 2 bytes @ 0xE
   339  00000F                     	ds	1
   340  000010                     I2C_Read@data:
   341                           	opt callstack 0
   342  000010                     I2C_Mem_Transmit@MemAddress:
   343                           	opt callstack 0
   344  000010                     ___awdiv@sign:
   345                           	opt callstack 0
   346  000010                     ___awmod@sign:
   347                           	opt callstack 0
   348                           
   349                           ; 1 bytes @ 0xF
   350  000010                     	ds	1
   351  000011                     I2C_Mem_Transmit@data:
   352                           	opt callstack 0
   353  000011                     I2C_Mem_Read@MemAddress:
   354                           	opt callstack 0
   355  000011                     ___lwdiv@counter:
   356                           	opt callstack 0
   357  000011                     ___awdiv@quotient:
   358                           	opt callstack 0
   359                           
   360                           ; 2 bytes @ 0x10
   361  000011                     	ds	1
   362  000012                     ??_SetBrightness:
   363  000012                     I2C_Mem_Transmit@addr:
   364                           	opt callstack 0
   365  000012                     I2C_Mem_Read@data:
   366                           	opt callstack 0
   367                           
   368                           ; 2 bytes @ 0x11
   369  000012                     	ds	1
   370  000013                     ??_SetSec:
   371  000013                     ??_SetMin:
   372  000013                     ??_SetHour:
   373  000013                     ??_SetDate:
   374  000013                     ??_SetMonth:
   375  000013                     ??_SetYear:
   376                           
   377                           ; 1 bytes @ 0x12
   378  000013                     	ds	1
   379  000014                     I2C_Mem_Read@addr:
   380                           	opt callstack 0
   381                           
   382                           ; 1 bytes @ 0x13
   383  000014                     	ds	1
   384  000015                     ??_SecRead:
   385  000015                     ??_MinRead:
   386  000015                     ??_HourRead:
   387  000015                     ??_DateRead:
   388  000015                     ??_MonthRead:
   389  000015                     ??_YearRead:
   390  000015                     SetSec@BCD_Data:
   391                           	opt callstack 0
   392  000015                     SetMin@BCD_Data:
   393                           	opt callstack 0
   394  000015                     SetHour@BCD_Data:
   395                           	opt callstack 0
   396  000015                     SetDate@BCD_Data:
   397                           	opt callstack 0
   398  000015                     SetMonth@BCD_Data:
   399                           	opt callstack 0
   400  000015                     SetYear@BCD_Data:
   401                           	opt callstack 0
   402  000015                     WeekRead@data:
   403                           	opt callstack 0
   404                           
   405                           ; 1 bytes @ 0x14
   406  000015                     	ds	1
   407  000016                     SetSec@data:
   408                           	opt callstack 0
   409  000016                     SetMin@data:
   410                           	opt callstack 0
   411  000016                     SetHour@data:
   412                           	opt callstack 0
   413  000016                     SetDate@data:
   414                           	opt callstack 0
   415  000016                     SetMonth@data:
   416                           	opt callstack 0
   417  000016                     SetYear@data:
   418                           	opt callstack 0
   419  000016                     SecRead@Dec_Data:
   420                           	opt callstack 0
   421  000016                     MinRead@Dec_Data:
   422                           	opt callstack 0
   423  000016                     HourRead@Dec_Data:
   424                           	opt callstack 0
   425  000016                     DateRead@Dec_Data:
   426                           	opt callstack 0
   427  000016                     MonthRead@Dec_Data:
   428                           	opt callstack 0
   429  000016                     YearRead@Dec_Data:
   430                           	opt callstack 0
   431                           
   432                           ; 1 bytes @ 0x15
   433  000016                     	ds	1
   434  000017                     SecRead@BCD_Data:
   435                           	opt callstack 0
   436  000017                     MinRead@BCD_Data:
   437                           	opt callstack 0
   438  000017                     HourRead@BCD_Data:
   439                           	opt callstack 0
   440  000017                     DateRead@BCD_Data:
   441                           	opt callstack 0
   442  000017                     MonthRead@BCD_Data:
   443                           	opt callstack 0
   444  000017                     YearRead@BCD_Data:
   445                           	opt callstack 0
   446  000017                     TimeSet@time:
   447                           	opt callstack 0
   448                           
   449                           ; 2 bytes @ 0x16
   450  000017                     	ds	1
   451  000018                     TimeRead@time:
   452                           	opt callstack 0
   453                           
   454                           ; 2 bytes @ 0x17
   455  000018                     	ds	1
   456  000019                     ??_SetRTC:
   457  000019                     
   458                           ; 1 bytes @ 0x18
   459  000019                     	ds	1
   460  00001A                     ??_TimeRead:
   461                           
   462                           ; 1 bytes @ 0x19
   463  00001A                     	ds	1
   464  00001B                     _SetRTC$454:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0x1A
   468  00001B                     	ds	2
   469  00001D                     _SetRTC$455:
   470                           	opt callstack 0
   471                           
   472                           ; 2 bytes @ 0x1C
   473  00001D                     	ds	2
   474  00001F                     _SetRTC$456:
   475                           	opt callstack 0
   476                           
   477                           ; 2 bytes @ 0x1E
   478  00001F                     	ds	2
   479  000021                     _SetRTC$457:
   480                           	opt callstack 0
   481                           
   482                           ; 2 bytes @ 0x20
   483  000021                     	ds	2
   484  000023                     _SetRTC$458:
   485                           	opt callstack 0
   486                           
   487                           ; 2 bytes @ 0x22
   488  000023                     	ds	2
   489  000025                     _SetRTC$459:
   490                           	opt callstack 0
   491                           
   492                           ; 2 bytes @ 0x24
   493  000025                     	ds	2
   494  000027                     _SetRTC$460:
   495                           	opt callstack 0
   496                           
   497                           ; 2 bytes @ 0x26
   498  000027                     	ds	2
   499  000029                     _SetRTC$461:
   500                           	opt callstack 0
   501                           
   502                           ; 2 bytes @ 0x28
   503  000029                     	ds	2
   504  00002B                     _SetRTC$462:
   505                           	opt callstack 0
   506                           
   507                           ; 2 bytes @ 0x2A
   508  00002B                     	ds	2
   509  00002D                     SetRTC@cnt:
   510                           	opt callstack 0
   511                           
   512                           ; 1 bytes @ 0x2C
   513  00002D                     	ds	1
   514                           
   515 ;;
   516 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   517 ;;
   518 ;; *************** function _main *****************
   519 ;; Defined at:
   520 ;;		line 38 in file "main.c"
   521 ;; Parameters:    Size  Location     Type
   522 ;;		None
   523 ;; Auto vars:     Size  Location     Type
   524 ;;		None
   525 ;; Return value:  Size  Location     Type
   526 ;;                  1    wreg      void 
   527 ;; Registers used:
   528 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   529 ;; Tracked objects:
   530 ;;		On entry : 0/0
   531 ;;		On exit  : 0/0
   532 ;;		Unchanged: 0/0
   533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   534 ;;      Params:         0       0       0       0       0       0       0       0       0
   535 ;;      Locals:         0       0       0       0       0       0       0       0       0
   536 ;;      Temps:          0       2       0       0       0       0       0       0       0
   537 ;;      Totals:         0       2       0       0       0       0       0       0       0
   538 ;;Total ram usage:        2 bytes
   539 ;; Hardware stack levels required when called:    8
   540 ;; This function calls:
   541 ;;		_DS3231_Init
   542 ;;		_GetRisingEdge_SW1
   543 ;;		_GetRisingEdge_SW2
   544 ;;		_Interrupt_Init
   545 ;;		_SetBrightness
   546 ;;		_SetRTC
   547 ;;		_ShowDate
   548 ;;		_ShowTime
   549 ;;		_ShowWeek
   550 ;;		_TimeRead
   551 ;;		_Timer0_Init
   552 ;; This function is called by:
   553 ;;		Startup code after reset
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557                           	psect	text0
   558  00053A                     __ptext0:
   559                           	opt callstack 0
   560  00053A                     _main:
   561                           	opt callstack 23
   562                           
   563                           ;main.c: 39:     ADCON1 = 0x0B;
   564                           
   565                           ;incstack = 0
   566  00053A  0E0B               	movlw	11
   567  00053C  6EC1               	movwf	4033,c	;volatile
   568                           
   569                           ;main.c: 40:     TRISB = 0x00;
   570  00053E  0E00               	movlw	0
   571  000540  6E93               	movwf	3987,c	;volatile
   572                           
   573                           ;main.c: 41:     TRISC = 0xFF;
   574  000542  6894               	setf	3988,c	;volatile
   575                           
   576                           ;main.c: 42:     TRISD = 0X00;
   577  000544  0E00               	movlw	0
   578  000546  6E95               	movwf	3989,c	;volatile
   579                           
   580                           ;main.c: 43:     TRISE = 0x0f;
   581  000548  0E0F               	movlw	15
   582  00054A  6E96               	movwf	3990,c	;volatile
   583                           
   584                           ;main.c: 44:     DS3231_Init();
   585  00054C  ECB5  F007         	call	_DS3231_Init	;wreg free
   586                           
   587                           ;main.c: 45:     Interrupt_Init();
   588  000550  EC95  F007         	call	_Interrupt_Init	;wreg free
   589                           
   590                           ;main.c: 46:     Timer0_Init();
   591  000554  EC73  F007         	call	_Timer0_Init	;wreg free
   592  000558                     l2455:
   593                           
   594                           ;main.c: 49:         TimeRead(&RTC);
   595  000558  0E42               	movlw	low _RTC
   596  00055A  6E18               	movwf	TimeRead@time,c
   597  00055C  0E00               	movlw	high _RTC
   598  00055E  6E19               	movwf	TimeRead@time+1,c
   599  000560  ECFC  F002         	call	_TimeRead	;wreg free
   600                           
   601                           ;main.c: 52:         if(GetRisingEdge_SW2()) {
   602  000564  EC31  F006         	call	_GetRisingEdge_SW2	;wreg free
   603  000568  0900               	iorlw	0
   604  00056A  B4D8               	btfsc	status,2,c
   605  00056C  D006               	goto	l2465
   606                           
   607                           ;main.c: 53:             if(PORTEbits.RE0 == 0) Mode = Task_SetRTC;
   608  00056E  B084               	btfsc	3972,0,c	;volatile
   609  000570  D002               	goto	l2463
   610  000572  0E03               	movlw	3
   611  000574  D001               	goto	L1
   612  000576                     l2463:
   613  000576  0E04               	movlw	4
   614  000578                     L1:
   615  000578  6E3A               	movwf	_Mode,c
   616  00057A                     l2465:
   617                           
   618                           ;main.c: 57:         if(GetRisingEdge_SW1() && (PORTEbits.RE1 == 1)) {
   619  00057A  EC4D  F006         	call	_GetRisingEdge_SW1	;wreg free
   620  00057E  0900               	iorlw	0
   621  000580  A4D8               	btfss	status,2,c
   622  000582  A284               	btfss	3972,1,c	;volatile
   623  000584  D020               	goto	l2491
   624                           
   625                           ;main.c: 58:             if(Mode++>=Task_ShowWeek) Mode = Task_ShowTime;
   626  000586  2A3A               	incf	_Mode,f,c
   627  000588  043A               	decf	_Mode,w,c
   628  00058A  0100               	movlb	0	; () banked
   629  00058C  6F6D               	movwf	??_main& (0+255),b
   630  00058E  0E01               	movlw	1
   631  000590  656D               	cpfsgt	??_main& (0+255),b
   632  000592  D019               	goto	l2491
   633                           
   634                           ; BSR set to: 0
   635  000594  0E00               	movlw	0
   636  000596  6E3A               	movwf	_Mode,c
   637  000598  D016               	goto	l2491
   638  00059A                     l2473:
   639                           
   640                           ; BSR set to: 0
   641  00059A  ECCE  F003         	call	_ShowTime	;wreg free
   642  00059E  D7DC               	goto	l2455
   643  0005A0                     l2475:
   644                           
   645                           ; BSR set to: 0
   646  0005A0  EC42  F004         	call	_ShowDate	;wreg free
   647  0005A4  D7D9               	goto	l2455
   648  0005A6                     l2477:
   649                           
   650                           ; BSR set to: 0
   651  0005A6  ECA0  F006         	call	_ShowWeek	;wreg free
   652  0005AA  D7D6               	goto	l2455
   653  0005AC                     l2479:
   654                           
   655                           ; BSR set to: 0
   656                           ;main.c: 69:                 SetRTC();
   657  0005AC  EC09  F000         	call	_SetRTC	;wreg free
   658  0005B0                     l2481:
   659                           
   660                           ;main.c: 70:                 Mode = Task_ShowTime;
   661  0005B0  0E00               	movlw	0
   662  0005B2  6E3A               	movwf	_Mode,c
   663                           
   664                           ;main.c: 71:                 break;
   665  0005B4  D7D1               	goto	l2455
   666  0005B6                     l2483:
   667                           
   668                           ;main.c: 74:                     SetBrightness();
   669  0005B6  EC46  F003         	call	_SetBrightness	;wreg free
   670  0005BA                     l2485:
   671                           
   672                           ;main.c: 73:                 while(!GetRisingEdge_SW2()) {
   673  0005BA  EC31  F006         	call	_GetRisingEdge_SW2	;wreg free
   674  0005BE  0900               	iorlw	0
   675  0005C0  A4D8               	btfss	status,2,c
   676  0005C2  D7F6               	goto	l2481
   677  0005C4  D7F8               	goto	l2483
   678  0005C6                     l2491:
   679  0005C6  503A               	movf	_Mode,w,c
   680  0005C8  0100               	movlb	0	; () banked
   681  0005CA  6F6D               	movwf	??_main& (0+255),b
   682  0005CC  6B6E               	clrf	(??_main+1)& (0+255),b
   683                           
   684                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   685                           ; Switch size 1, requested type "simple"
   686                           ; Number of cases is 1, Range of values is 0 to 0
   687                           ; switch strategies available:
   688                           ; Name         Instructions Cycles
   689                           ; simple_byte            4     3 (average)
   690                           ;	Chosen strategy is simple_byte
   691  0005CE  516E               	movf	(??_main+1)& (0+255),w,b
   692  0005D0  0A00               	xorlw	0	; case 0
   693  0005D2  A4D8               	btfss	status,2,c
   694  0005D4  D7C1               	goto	l2455
   695                           
   696                           ; BSR set to: 0
   697                           ; Switch size 1, requested type "simple"
   698                           ; Number of cases is 5, Range of values is 0 to 4
   699                           ; switch strategies available:
   700                           ; Name         Instructions Cycles
   701                           ; simple_byte           16     9 (average)
   702                           ;	Chosen strategy is simple_byte
   703  0005D6  516D               	movf	??_main& (0+255),w,b
   704  0005D8  0A00               	xorlw	0	; case 0
   705  0005DA  B4D8               	btfsc	status,2,c
   706  0005DC  D7DE               	goto	l2473
   707  0005DE  0A01               	xorlw	1	; case 1
   708  0005E0  B4D8               	btfsc	status,2,c
   709  0005E2  D7DE               	goto	l2475
   710  0005E4  0A03               	xorlw	3	; case 2
   711  0005E6  B4D8               	btfsc	status,2,c
   712  0005E8  D7DE               	goto	l2477
   713  0005EA  0A01               	xorlw	1	; case 3
   714  0005EC  B4D8               	btfsc	status,2,c
   715  0005EE  D7DE               	goto	l2479
   716  0005F0  0A07               	xorlw	7	; case 4
   717  0005F2  B4D8               	btfsc	status,2,c
   718  0005F4  D7E2               	goto	l2485
   719  0005F6  D7B0               	goto	l2455
   720  0005F8                     __end_of_main:
   721                           	opt callstack 0
   722                           
   723 ;; *************** function _Timer0_Init *****************
   724 ;; Defined at:
   725 ;;		line 304 in file "main.c"
   726 ;; Parameters:    Size  Location     Type
   727 ;;		None
   728 ;; Auto vars:     Size  Location     Type
   729 ;;		None
   730 ;; Return value:  Size  Location     Type
   731 ;;                  1    wreg      void 
   732 ;; Registers used:
   733 ;;		wreg, status,2
   734 ;; Tracked objects:
   735 ;;		On entry : 0/0
   736 ;;		On exit  : 0/0
   737 ;;		Unchanged: 0/0
   738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   739 ;;      Params:         0       0       0       0       0       0       0       0       0
   740 ;;      Locals:         0       0       0       0       0       0       0       0       0
   741 ;;      Temps:          0       0       0       0       0       0       0       0       0
   742 ;;      Totals:         0       0       0       0       0       0       0       0       0
   743 ;;Total ram usage:        0 bytes
   744 ;; Hardware stack levels used:    1
   745 ;; Hardware stack levels required when called:    2
   746 ;; This function calls:
   747 ;;		Nothing
   748 ;; This function is called by:
   749 ;;		_main
   750 ;; This function uses a non-reentrant model
   751 ;;
   752                           
   753                           	psect	text1
   754  000EE6                     __ptext1:
   755                           	opt callstack 0
   756  000EE6                     _Timer0_Init:
   757                           	opt callstack 28
   758                           
   759                           ;main.c: 305:     T0CONbits.T08BIT = 0;
   760                           
   761                           ; BSR set to: 0
   762                           ;incstack = 0
   763  000EE6  9CD5               	bcf	4053,6,c	;volatile
   764                           
   765                           ;main.c: 306:     T0CONbits.T0CS = 0;
   766  000EE8  9AD5               	bcf	4053,5,c	;volatile
   767                           
   768                           ;main.c: 307:     T0CONbits.T0SE = 0;
   769  000EEA  98D5               	bcf	4053,4,c	;volatile
   770                           
   771                           ;main.c: 308:     T0CONbits.PSA = 0;
   772  000EEC  96D5               	bcf	4053,3,c	;volatile
   773                           
   774                           ;main.c: 309:     T0CONbits.T0PS = 0;
   775  000EEE  0EF8               	movlw	-8
   776  000EF0  16D5               	andwf	4053,f,c	;volatile
   777                           
   778                           ;main.c: 310:     TMR0 = 65535 - 6000;
   779  000EF2  0EE8               	movlw	232
   780  000EF4  6ED7               	movwf	4055,c	;volatile
   781  000EF6  0E8F               	movlw	143
   782  000EF8  6ED6               	movwf	4054,c	;volatile
   783                           
   784                           ;main.c: 311:     T0CONbits.TMR0ON = 1;
   785  000EFA  8ED5               	bsf	4053,7,c	;volatile
   786  000EFC  0012               	return		;funcret
   787  000EFE                     __end_of_Timer0_Init:
   788                           	opt callstack 0
   789                           
   790 ;; *************** function _TimeRead *****************
   791 ;; Defined at:
   792 ;;		line 121 in file "DS3231.c"
   793 ;; Parameters:    Size  Location     Type
   794 ;;  time            2   23[COMRAM] PTR struct Time
   795 ;;		 -> RTC(7), 
   796 ;; Auto vars:     Size  Location     Type
   797 ;;		None
   798 ;; Return value:  Size  Location     Type
   799 ;;                  1    wreg      void 
   800 ;; Registers used:
   801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   807 ;;      Params:         2       0       0       0       0       0       0       0       0
   808 ;;      Locals:         0       0       0       0       0       0       0       0       0
   809 ;;      Temps:          1       0       0       0       0       0       0       0       0
   810 ;;      Totals:         3       0       0       0       0       0       0       0       0
   811 ;;Total ram usage:        3 bytes
   812 ;; Hardware stack levels used:    1
   813 ;; Hardware stack levels required when called:    6
   814 ;; This function calls:
   815 ;;		_DateRead
   816 ;;		_HourRead
   817 ;;		_MinRead
   818 ;;		_MonthRead
   819 ;;		_SecRead
   820 ;;		_WeekRead
   821 ;;		_YearRead
   822 ;; This function is called by:
   823 ;;		_main
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           	psect	text2
   828  0005F8                     __ptext2:
   829                           	opt callstack 0
   830  0005F8                     _TimeRead:
   831                           	opt callstack 24
   832                           
   833                           ;DS3231.c: 122:    time->Sec = SecRead();
   834                           
   835                           ;incstack = 0
   836  0005F8  EC19  F007         	call	_SecRead	;wreg free
   837  0005FC  6E1A               	movwf	??_TimeRead& (0+255),c
   838  0005FE  EE20 F002          	lfsr	2,2
   839  000602  5018               	movf	TimeRead@time,w,c
   840  000604  26D9               	addwf	fsr2l,f,c
   841  000606  5019               	movf	TimeRead@time+1,w,c
   842  000608  22DA               	addwfc	fsr2h,f,c
   843  00060A  C01A  FFDF         	movff	??_TimeRead,indf2
   844                           
   845                           ;DS3231.c: 123:    time->Min = MinRead();
   846  00060E  EC30  F007         	call	_MinRead	;wreg free
   847  000612  6E1A               	movwf	??_TimeRead& (0+255),c
   848  000614  EE20 F001          	lfsr	2,1
   849  000618  5018               	movf	TimeRead@time,w,c
   850  00061A  26D9               	addwf	fsr2l,f,c
   851  00061C  5019               	movf	TimeRead@time+1,w,c
   852  00061E  22DA               	addwfc	fsr2h,f,c
   853  000620  C01A  FFDF         	movff	??_TimeRead,indf2
   854                           
   855                           ;DS3231.c: 124:    time->Hour = HourRead();
   856  000624  ECD2  F006         	call	_HourRead	;wreg free
   857  000628  C018  FFD9         	movff	TimeRead@time,fsr2l
   858  00062C  C019  FFDA         	movff	TimeRead@time+1,fsr2h
   859  000630  6EDF               	movwf	indf2,c
   860                           
   861                           ;DS3231.c: 125:    time->Date = DateRead();
   862  000632  ECEA  F006         	call	_DateRead	;wreg free
   863  000636  6E1A               	movwf	??_TimeRead& (0+255),c
   864  000638  EE20 F006          	lfsr	2,6
   865  00063C  5018               	movf	TimeRead@time,w,c
   866  00063E  26D9               	addwf	fsr2l,f,c
   867  000640  5019               	movf	TimeRead@time+1,w,c
   868  000642  22DA               	addwfc	fsr2h,f,c
   869  000644  C01A  FFDF         	movff	??_TimeRead,indf2
   870                           
   871                           ;DS3231.c: 126:    time->Week = WeekRead();
   872  000648  EC66  F007         	call	_WeekRead	;wreg free
   873  00064C  6E1A               	movwf	??_TimeRead& (0+255),c
   874  00064E  EE20 F005          	lfsr	2,5
   875  000652  5018               	movf	TimeRead@time,w,c
   876  000654  26D9               	addwf	fsr2l,f,c
   877  000656  5019               	movf	TimeRead@time+1,w,c
   878  000658  22DA               	addwfc	fsr2h,f,c
   879  00065A  C01A  FFDF         	movff	??_TimeRead,indf2
   880                           
   881                           ;DS3231.c: 127:    time->Month = MonthRead();
   882  00065E  ECBA  F006         	call	_MonthRead	;wreg free
   883  000662  6E1A               	movwf	??_TimeRead& (0+255),c
   884  000664  EE20 F004          	lfsr	2,4
   885  000668  5018               	movf	TimeRead@time,w,c
   886  00066A  26D9               	addwf	fsr2l,f,c
   887  00066C  5019               	movf	TimeRead@time+1,w,c
   888  00066E  22DA               	addwfc	fsr2h,f,c
   889  000670  C01A  FFDF         	movff	??_TimeRead,indf2
   890                           
   891                           ;DS3231.c: 128:    time->Year = YearRead();
   892  000674  EC02  F007         	call	_YearRead	;wreg free
   893  000678  6E1A               	movwf	??_TimeRead& (0+255),c
   894  00067A  EE20 F003          	lfsr	2,3
   895  00067E  5018               	movf	TimeRead@time,w,c
   896  000680  26D9               	addwf	fsr2l,f,c
   897  000682  5019               	movf	TimeRead@time+1,w,c
   898  000684  22DA               	addwfc	fsr2h,f,c
   899  000686  C01A  FFDF         	movff	??_TimeRead,indf2
   900  00068A  0012               	return		;funcret
   901  00068C                     __end_of_TimeRead:
   902                           	opt callstack 0
   903                           
   904 ;; *************** function _YearRead *****************
   905 ;; Defined at:
   906 ;;		line 107 in file "DS3231.c"
   907 ;; Parameters:    Size  Location     Type
   908 ;;		None
   909 ;; Auto vars:     Size  Location     Type
   910 ;;  BCD_Data        1   22[COMRAM] unsigned char 
   911 ;;  Dec_Data        1   21[COMRAM] unsigned char 
   912 ;; Return value:  Size  Location     Type
   913 ;;                  1    wreg      unsigned char 
   914 ;; Registers used:
   915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   916 ;; Tracked objects:
   917 ;;		On entry : 0/0
   918 ;;		On exit  : 0/0
   919 ;;		Unchanged: 0/0
   920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   921 ;;      Params:         0       0       0       0       0       0       0       0       0
   922 ;;      Locals:         2       0       0       0       0       0       0       0       0
   923 ;;      Temps:          1       0       0       0       0       0       0       0       0
   924 ;;      Totals:         3       0       0       0       0       0       0       0       0
   925 ;;Total ram usage:        3 bytes
   926 ;; Hardware stack levels used:    1
   927 ;; Hardware stack levels required when called:    5
   928 ;; This function calls:
   929 ;;		_I2C_Mem_Read
   930 ;; This function is called by:
   931 ;;		_TimeRead
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text3
   936  000E04                     __ptext3:
   937                           	opt callstack 0
   938  000E04                     _YearRead:
   939                           	opt callstack 24
   940                           
   941                           ;DS3231.c: 108:    uint8_t BCD_Data = 0, Dec_Data = 0;
   942                           
   943                           ;incstack = 0
   944  000E04  0E00               	movlw	0
   945  000E06  6E17               	movwf	YearRead@BCD_Data,c
   946                           
   947                           ;DS3231.c: 109:    I2C_Mem_Read( 0xD0, 0x06, &BCD_Data);
   948  000E08  0E06               	movlw	6
   949  000E0A  6E11               	movwf	I2C_Mem_Read@MemAddress,c
   950  000E0C  0E17               	movlw	low YearRead@BCD_Data
   951  000E0E  6E12               	movwf	I2C_Mem_Read@data,c
   952  000E10  0E00               	movlw	high YearRead@BCD_Data
   953  000E12  6E13               	movwf	I2C_Mem_Read@data+1,c
   954  000E14  0ED0               	movlw	208
   955  000E16  EC85  F006         	call	_I2C_Mem_Read
   956                           
   957                           ;DS3231.c: 110:    Dec_Data = (BCD_Data&0x0F) + (BCD_Data>>4)*10;
   958  000E1A  C017  F015         	movff	YearRead@BCD_Data,??_YearRead
   959  000E1E  0E0F               	movlw	15
   960  000E20  1615               	andwf	??_YearRead,f,c
   961  000E22  3817               	swapf	YearRead@BCD_Data,w,c
   962  000E24  0B0F               	andlw	15
   963  000E26  0D0A               	mullw	10
   964  000E28  50F3               	movf	prodl,w,c
   965  000E2A  2415               	addwf	??_YearRead,w,c
   966  000E2C  6E16               	movwf	YearRead@Dec_Data,c
   967                           
   968                           ;DS3231.c: 111:    return Dec_Data;
   969  000E2E  5016               	movf	YearRead@Dec_Data,w,c
   970  000E30  0012               	return		;funcret
   971  000E32                     __end_of_YearRead:
   972                           	opt callstack 0
   973                           
   974 ;; *************** function _WeekRead *****************
   975 ;; Defined at:
   976 ;;		line 87 in file "DS3231.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;		None
   979 ;; Auto vars:     Size  Location     Type
   980 ;;  data            1   20[COMRAM] unsigned char 
   981 ;; Return value:  Size  Location     Type
   982 ;;                  1    wreg      unsigned char 
   983 ;; Registers used:
   984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   985 ;; Tracked objects:
   986 ;;		On entry : 0/0
   987 ;;		On exit  : 0/0
   988 ;;		Unchanged: 0/0
   989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   990 ;;      Params:         0       0       0       0       0       0       0       0       0
   991 ;;      Locals:         1       0       0       0       0       0       0       0       0
   992 ;;      Temps:          0       0       0       0       0       0       0       0       0
   993 ;;      Totals:         1       0       0       0       0       0       0       0       0
   994 ;;Total ram usage:        1 bytes
   995 ;; Hardware stack levels used:    1
   996 ;; Hardware stack levels required when called:    5
   997 ;; This function calls:
   998 ;;		_I2C_Mem_Read
   999 ;; This function is called by:
  1000 ;;		_TimeRead
  1001 ;; This function uses a non-reentrant model
  1002 ;;
  1003                           
  1004                           	psect	text4
  1005  000ECC                     __ptext4:
  1006                           	opt callstack 0
  1007  000ECC                     _WeekRead:
  1008                           	opt callstack 24
  1009                           
  1010                           ;DS3231.c: 88:    uint8_t data = 0;
  1011                           
  1012                           ;incstack = 0
  1013  000ECC  0E00               	movlw	0
  1014  000ECE  6E15               	movwf	WeekRead@data,c
  1015                           
  1016                           ;DS3231.c: 89:    I2C_Mem_Read( 0xD0, 0x03, &data);
  1017  000ED0  0E03               	movlw	3
  1018  000ED2  6E11               	movwf	I2C_Mem_Read@MemAddress,c
  1019  000ED4  0E15               	movlw	low WeekRead@data
  1020  000ED6  6E12               	movwf	I2C_Mem_Read@data,c
  1021  000ED8  0E00               	movlw	high WeekRead@data
  1022  000EDA  6E13               	movwf	I2C_Mem_Read@data+1,c
  1023  000EDC  0ED0               	movlw	208
  1024  000EDE  EC85  F006         	call	_I2C_Mem_Read
  1025                           
  1026                           ;DS3231.c: 90:    return data;
  1027  000EE2  5015               	movf	WeekRead@data,w,c
  1028  000EE4  0012               	return		;funcret
  1029  000EE6                     __end_of_WeekRead:
  1030                           	opt callstack 0
  1031                           
  1032 ;; *************** function _SecRead *****************
  1033 ;; Defined at:
  1034 ;;		line 66 in file "DS3231.c"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;		None
  1037 ;; Auto vars:     Size  Location     Type
  1038 ;;  BCD_Data        1   22[COMRAM] unsigned char 
  1039 ;;  Dec_Data        1   21[COMRAM] unsigned char 
  1040 ;; Return value:  Size  Location     Type
  1041 ;;                  1    wreg      unsigned char 
  1042 ;; Registers used:
  1043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1044 ;; Tracked objects:
  1045 ;;		On entry : 0/0
  1046 ;;		On exit  : 0/0
  1047 ;;		Unchanged: 0/0
  1048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1049 ;;      Params:         0       0       0       0       0       0       0       0       0
  1050 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1051 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1052 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1053 ;;Total ram usage:        3 bytes
  1054 ;; Hardware stack levels used:    1
  1055 ;; Hardware stack levels required when called:    5
  1056 ;; This function calls:
  1057 ;;		_I2C_Mem_Read
  1058 ;; This function is called by:
  1059 ;;		_TimeRead
  1060 ;; This function uses a non-reentrant model
  1061 ;;
  1062                           
  1063                           	psect	text5
  1064  000E32                     __ptext5:
  1065                           	opt callstack 0
  1066  000E32                     _SecRead:
  1067                           	opt callstack 24
  1068                           
  1069                           ;DS3231.c: 67:    uint8_t BCD_Data = 0, Dec_Data = 0;
  1070                           
  1071                           ;incstack = 0
  1072  000E32  0E00               	movlw	0
  1073  000E34  6E17               	movwf	SecRead@BCD_Data,c
  1074                           
  1075                           ;DS3231.c: 68:    I2C_Mem_Read( 0xD0, 0x00, &BCD_Data);
  1076  000E36  0E00               	movlw	0
  1077  000E38  6E11               	movwf	I2C_Mem_Read@MemAddress,c
  1078  000E3A  0E17               	movlw	low SecRead@BCD_Data
  1079  000E3C  6E12               	movwf	I2C_Mem_Read@data,c
  1080  000E3E  0E00               	movlw	high SecRead@BCD_Data
  1081  000E40  6E13               	movwf	I2C_Mem_Read@data+1,c
  1082  000E42  0ED0               	movlw	208
  1083  000E44  EC85  F006         	call	_I2C_Mem_Read
  1084                           
  1085                           ;DS3231.c: 69:    Dec_Data = (BCD_Data&0x0F) + (BCD_Data>>4)*10;
  1086  000E48  C017  F015         	movff	SecRead@BCD_Data,??_SecRead
  1087  000E4C  0E0F               	movlw	15
  1088  000E4E  1615               	andwf	??_SecRead,f,c
  1089  000E50  3817               	swapf	SecRead@BCD_Data,w,c
  1090  000E52  0B0F               	andlw	15
  1091  000E54  0D0A               	mullw	10
  1092  000E56  50F3               	movf	prodl,w,c
  1093  000E58  2415               	addwf	??_SecRead,w,c
  1094  000E5A  6E16               	movwf	SecRead@Dec_Data,c
  1095                           
  1096                           ;DS3231.c: 70:    return Dec_Data;
  1097  000E5C  5016               	movf	SecRead@Dec_Data,w,c
  1098  000E5E  0012               	return		;funcret
  1099  000E60                     __end_of_SecRead:
  1100                           	opt callstack 0
  1101                           
  1102 ;; *************** function _MonthRead *****************
  1103 ;; Defined at:
  1104 ;;		line 100 in file "DS3231.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;		None
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;  BCD_Data        1   22[COMRAM] unsigned char 
  1109 ;;  Dec_Data        1   21[COMRAM] unsigned char 
  1110 ;; Return value:  Size  Location     Type
  1111 ;;                  1    wreg      unsigned char 
  1112 ;; Registers used:
  1113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1114 ;; Tracked objects:
  1115 ;;		On entry : 0/0
  1116 ;;		On exit  : 0/0
  1117 ;;		Unchanged: 0/0
  1118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1119 ;;      Params:         0       0       0       0       0       0       0       0       0
  1120 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1121 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1122 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1123 ;;Total ram usage:        3 bytes
  1124 ;; Hardware stack levels used:    1
  1125 ;; Hardware stack levels required when called:    5
  1126 ;; This function calls:
  1127 ;;		_I2C_Mem_Read
  1128 ;; This function is called by:
  1129 ;;		_TimeRead
  1130 ;; This function uses a non-reentrant model
  1131 ;;
  1132                           
  1133                           	psect	text6
  1134  000D74                     __ptext6:
  1135                           	opt callstack 0
  1136  000D74                     _MonthRead:
  1137                           	opt callstack 24
  1138                           
  1139                           ;DS3231.c: 101:    uint8_t BCD_Data = 0, Dec_Data = 0;
  1140                           
  1141                           ;incstack = 0
  1142  000D74  0E00               	movlw	0
  1143  000D76  6E17               	movwf	MonthRead@BCD_Data,c
  1144                           
  1145                           ;DS3231.c: 102:    I2C_Mem_Read( 0xD0, 0x05, &BCD_Data);
  1146  000D78  0E05               	movlw	5
  1147  000D7A  6E11               	movwf	I2C_Mem_Read@MemAddress,c
  1148  000D7C  0E17               	movlw	low MonthRead@BCD_Data
  1149  000D7E  6E12               	movwf	I2C_Mem_Read@data,c
  1150  000D80  0E00               	movlw	high MonthRead@BCD_Data
  1151  000D82  6E13               	movwf	I2C_Mem_Read@data+1,c
  1152  000D84  0ED0               	movlw	208
  1153  000D86  EC85  F006         	call	_I2C_Mem_Read
  1154                           
  1155                           ;DS3231.c: 103:    Dec_Data = (BCD_Data&0x0F) + ((BCD_Data>>4)&0x01)*10;
  1156  000D8A  C017  F015         	movff	MonthRead@BCD_Data,??_MonthRead
  1157  000D8E  0E0F               	movlw	15
  1158  000D90  1615               	andwf	??_MonthRead,f,c
  1159  000D92  3817               	swapf	MonthRead@BCD_Data,w,c
  1160  000D94  0B0F               	andlw	15
  1161  000D96  0B01               	andlw	1
  1162  000D98  0D0A               	mullw	10
  1163  000D9A  50F3               	movf	prodl,w,c
  1164  000D9C  2415               	addwf	??_MonthRead,w,c
  1165  000D9E  6E16               	movwf	MonthRead@Dec_Data,c
  1166                           
  1167                           ;DS3231.c: 104:    return Dec_Data;
  1168  000DA0  5016               	movf	MonthRead@Dec_Data,w,c
  1169  000DA2  0012               	return		;funcret
  1170  000DA4                     __end_of_MonthRead:
  1171                           	opt callstack 0
  1172                           
  1173 ;; *************** function _MinRead *****************
  1174 ;; Defined at:
  1175 ;;		line 73 in file "DS3231.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;		None
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;  BCD_Data        1   22[COMRAM] unsigned char 
  1180 ;;  Dec_Data        1   21[COMRAM] unsigned char 
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      unsigned char 
  1183 ;; Registers used:
  1184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1190 ;;      Params:         0       0       0       0       0       0       0       0       0
  1191 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1192 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1193 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1194 ;;Total ram usage:        3 bytes
  1195 ;; Hardware stack levels used:    1
  1196 ;; Hardware stack levels required when called:    5
  1197 ;; This function calls:
  1198 ;;		_I2C_Mem_Read
  1199 ;; This function is called by:
  1200 ;;		_TimeRead
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           	psect	text7
  1205  000E60                     __ptext7:
  1206                           	opt callstack 0
  1207  000E60                     _MinRead:
  1208                           	opt callstack 24
  1209                           
  1210                           ;DS3231.c: 74:    uint8_t BCD_Data = 0, Dec_Data = 0;
  1211                           
  1212                           ;incstack = 0
  1213  000E60  0E00               	movlw	0
  1214  000E62  6E17               	movwf	MinRead@BCD_Data,c
  1215                           
  1216                           ;DS3231.c: 75:    I2C_Mem_Read( 0xD0, 0x01, &BCD_Data);
  1217  000E64  0E01               	movlw	1
  1218  000E66  6E11               	movwf	I2C_Mem_Read@MemAddress,c
  1219  000E68  0E17               	movlw	low MinRead@BCD_Data
  1220  000E6A  6E12               	movwf	I2C_Mem_Read@data,c
  1221  000E6C  0E00               	movlw	high MinRead@BCD_Data
  1222  000E6E  6E13               	movwf	I2C_Mem_Read@data+1,c
  1223  000E70  0ED0               	movlw	208
  1224  000E72  EC85  F006         	call	_I2C_Mem_Read
  1225                           
  1226                           ;DS3231.c: 76:    Dec_Data = (BCD_Data&0x0F) + (BCD_Data>>4)*10;
  1227  000E76  C017  F015         	movff	MinRead@BCD_Data,??_MinRead
  1228  000E7A  0E0F               	movlw	15
  1229  000E7C  1615               	andwf	??_MinRead,f,c
  1230  000E7E  3817               	swapf	MinRead@BCD_Data,w,c
  1231  000E80  0B0F               	andlw	15
  1232  000E82  0D0A               	mullw	10
  1233  000E84  50F3               	movf	prodl,w,c
  1234  000E86  2415               	addwf	??_MinRead,w,c
  1235  000E88  6E16               	movwf	MinRead@Dec_Data,c
  1236                           
  1237                           ;DS3231.c: 77:    return Dec_Data;
  1238  000E8A  5016               	movf	MinRead@Dec_Data,w,c
  1239  000E8C  0012               	return		;funcret
  1240  000E8E                     __end_of_MinRead:
  1241                           	opt callstack 0
  1242                           
  1243 ;; *************** function _HourRead *****************
  1244 ;; Defined at:
  1245 ;;		line 80 in file "DS3231.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;		None
  1248 ;; Auto vars:     Size  Location     Type
  1249 ;;  BCD_Data        1   22[COMRAM] unsigned char 
  1250 ;;  Dec_Data        1   21[COMRAM] unsigned char 
  1251 ;; Return value:  Size  Location     Type
  1252 ;;                  1    wreg      unsigned char 
  1253 ;; Registers used:
  1254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1255 ;; Tracked objects:
  1256 ;;		On entry : 0/0
  1257 ;;		On exit  : 0/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1260 ;;      Params:         0       0       0       0       0       0       0       0       0
  1261 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1262 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1263 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1264 ;;Total ram usage:        3 bytes
  1265 ;; Hardware stack levels used:    1
  1266 ;; Hardware stack levels required when called:    5
  1267 ;; This function calls:
  1268 ;;		_I2C_Mem_Read
  1269 ;; This function is called by:
  1270 ;;		_TimeRead
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           	psect	text8
  1275  000DA4                     __ptext8:
  1276                           	opt callstack 0
  1277  000DA4                     _HourRead:
  1278                           	opt callstack 24
  1279                           
  1280                           ;DS3231.c: 81:    uint8_t BCD_Data = 0, Dec_Data = 0;
  1281                           
  1282                           ;incstack = 0
  1283  000DA4  0E00               	movlw	0
  1284  000DA6  6E17               	movwf	HourRead@BCD_Data,c
  1285                           
  1286                           ;DS3231.c: 82:    I2C_Mem_Read( 0xD0, 0x02, &BCD_Data);
  1287  000DA8  0E02               	movlw	2
  1288  000DAA  6E11               	movwf	I2C_Mem_Read@MemAddress,c
  1289  000DAC  0E17               	movlw	low HourRead@BCD_Data
  1290  000DAE  6E12               	movwf	I2C_Mem_Read@data,c
  1291  000DB0  0E00               	movlw	high HourRead@BCD_Data
  1292  000DB2  6E13               	movwf	I2C_Mem_Read@data+1,c
  1293  000DB4  0ED0               	movlw	208
  1294  000DB6  EC85  F006         	call	_I2C_Mem_Read
  1295                           
  1296                           ;DS3231.c: 83:    Dec_Data = (BCD_Data&0x0F) + ((BCD_Data>>4)&0x03)*10;
  1297  000DBA  C017  F015         	movff	HourRead@BCD_Data,??_HourRead
  1298  000DBE  0E0F               	movlw	15
  1299  000DC0  1615               	andwf	??_HourRead,f,c
  1300  000DC2  3817               	swapf	HourRead@BCD_Data,w,c
  1301  000DC4  0B0F               	andlw	15
  1302  000DC6  0B03               	andlw	3
  1303  000DC8  0D0A               	mullw	10
  1304  000DCA  50F3               	movf	prodl,w,c
  1305  000DCC  2415               	addwf	??_HourRead,w,c
  1306  000DCE  6E16               	movwf	HourRead@Dec_Data,c
  1307                           
  1308                           ;DS3231.c: 84:    return Dec_Data;
  1309  000DD0  5016               	movf	HourRead@Dec_Data,w,c
  1310  000DD2  0012               	return		;funcret
  1311  000DD4                     __end_of_HourRead:
  1312                           	opt callstack 0
  1313                           
  1314 ;; *************** function _DateRead *****************
  1315 ;; Defined at:
  1316 ;;		line 93 in file "DS3231.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;		None
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;  BCD_Data        1   22[COMRAM] unsigned char 
  1321 ;;  Dec_Data        1   21[COMRAM] unsigned char 
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  1    wreg      unsigned char 
  1324 ;; Registers used:
  1325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1331 ;;      Params:         0       0       0       0       0       0       0       0       0
  1332 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1333 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1334 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1335 ;;Total ram usage:        3 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; Hardware stack levels required when called:    5
  1338 ;; This function calls:
  1339 ;;		_I2C_Mem_Read
  1340 ;; This function is called by:
  1341 ;;		_TimeRead
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text9
  1346  000DD4                     __ptext9:
  1347                           	opt callstack 0
  1348  000DD4                     _DateRead:
  1349                           	opt callstack 24
  1350                           
  1351                           ;DS3231.c: 94:    uint8_t BCD_Data = 0, Dec_Data = 0;
  1352                           
  1353                           ;incstack = 0
  1354  000DD4  0E00               	movlw	0
  1355  000DD6  6E17               	movwf	DateRead@BCD_Data,c
  1356                           
  1357                           ;DS3231.c: 95:    I2C_Mem_Read( 0xD0, 0x04, &BCD_Data);
  1358  000DD8  0E04               	movlw	4
  1359  000DDA  6E11               	movwf	I2C_Mem_Read@MemAddress,c
  1360  000DDC  0E17               	movlw	low DateRead@BCD_Data
  1361  000DDE  6E12               	movwf	I2C_Mem_Read@data,c
  1362  000DE0  0E00               	movlw	high DateRead@BCD_Data
  1363  000DE2  6E13               	movwf	I2C_Mem_Read@data+1,c
  1364  000DE4  0ED0               	movlw	208
  1365  000DE6  EC85  F006         	call	_I2C_Mem_Read
  1366                           
  1367                           ;DS3231.c: 96:    Dec_Data = (BCD_Data&0x0F) + ((BCD_Data>>4)&0x03)*10;
  1368  000DEA  C017  F015         	movff	DateRead@BCD_Data,??_DateRead
  1369  000DEE  0E0F               	movlw	15
  1370  000DF0  1615               	andwf	??_DateRead,f,c
  1371  000DF2  3817               	swapf	DateRead@BCD_Data,w,c
  1372  000DF4  0B0F               	andlw	15
  1373  000DF6  0B03               	andlw	3
  1374  000DF8  0D0A               	mullw	10
  1375  000DFA  50F3               	movf	prodl,w,c
  1376  000DFC  2415               	addwf	??_DateRead,w,c
  1377  000DFE  6E16               	movwf	DateRead@Dec_Data,c
  1378                           
  1379                           ;DS3231.c: 97:    return Dec_Data;
  1380  000E00  5016               	movf	DateRead@Dec_Data,w,c
  1381  000E02  0012               	return		;funcret
  1382  000E04                     __end_of_DateRead:
  1383                           	opt callstack 0
  1384                           
  1385 ;; *************** function _I2C_Mem_Read *****************
  1386 ;; Defined at:
  1387 ;;		line 63 in file "I2C.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;  addr            1    wreg     unsigned char 
  1390 ;;  MemAddress      1   16[COMRAM] unsigned char 
  1391 ;;  data            2   17[COMRAM] PTR unsigned char 
  1392 ;;		 -> TemperureRead@DATA_H(1), TemperureRead@DATA_L(1), YearRead@BCD_Data(1), MonthRead@BCD_Data(1), 
  1393 ;;		 -> DateRead@BCD_Data(1), WeekRead@data(1), HourRead@BCD_Data(1), MinRead@BCD_Data(1), 
  1394 ;;		 -> SecRead@BCD_Data(1), 
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;  addr            1   19[COMRAM] unsigned char 
  1397 ;; Return value:  Size  Location     Type
  1398 ;;                  1    wreg      void 
  1399 ;; Registers used:
  1400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1401 ;; Tracked objects:
  1402 ;;		On entry : 0/0
  1403 ;;		On exit  : 0/0
  1404 ;;		Unchanged: 0/0
  1405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1406 ;;      Params:         3       0       0       0       0       0       0       0       0
  1407 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1408 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1409 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1410 ;;Total ram usage:        4 bytes
  1411 ;; Hardware stack levels used:    1
  1412 ;; Hardware stack levels required when called:    4
  1413 ;; This function calls:
  1414 ;;		_I2C_Read
  1415 ;;		_I2C_RepStart
  1416 ;;		_I2C_Start
  1417 ;;		_I2C_Stop
  1418 ;;		_I2C_Write
  1419 ;; This function is called by:
  1420 ;;		_SecRead
  1421 ;;		_MinRead
  1422 ;;		_HourRead
  1423 ;;		_WeekRead
  1424 ;;		_DateRead
  1425 ;;		_MonthRead
  1426 ;;		_YearRead
  1427 ;;		_TemperureRead
  1428 ;; This function uses a non-reentrant model
  1429 ;;
  1430                           
  1431                           	psect	text10
  1432  000D0A                     __ptext10:
  1433                           	opt callstack 0
  1434  000D0A                     _I2C_Mem_Read:
  1435                           	opt callstack 24
  1436                           
  1437                           ;incstack = 0
  1438                           ;I2C_Mem_Read@addr stored from wreg
  1439  000D0A  6E14               	movwf	I2C_Mem_Read@addr,c
  1440                           
  1441                           ;I2C.c: 64:     I2C_Start();
  1442  000D0C  ECB1  F007         	call	_I2C_Start	;wreg free
  1443                           
  1444                           ;I2C.c: 65:     I2C_Write(addr&0xFE);
  1445  000D10  5014               	movf	I2C_Mem_Read@addr,w,c
  1446  000D12  0BFE               	andlw	254
  1447  000D14  EC8B  F007         	call	_I2C_Write
  1448                           
  1449                           ;I2C.c: 66:     I2C_Write(MemAddress);
  1450  000D18  5011               	movf	I2C_Mem_Read@MemAddress,w,c
  1451  000D1A  EC8B  F007         	call	_I2C_Write
  1452                           
  1453                           ;I2C.c: 67:     I2C_RepStart();
  1454  000D1E  ECA9  F007         	call	_I2C_RepStart	;wreg free
  1455                           
  1456                           ;I2C.c: 68:     I2C_Write(addr|0x01);
  1457  000D22  5014               	movf	I2C_Mem_Read@addr,w,c
  1458  000D24  0901               	iorlw	1
  1459  000D26  EC8B  F007         	call	_I2C_Write
  1460                           
  1461                           ;I2C.c: 69:     *data = I2C_Read(0);
  1462  000D2A  0E00               	movlw	0
  1463  000D2C  EC57  F007         	call	_I2C_Read
  1464  000D30  C012  FFD9         	movff	I2C_Mem_Read@data,fsr2l
  1465  000D34  C013  FFDA         	movff	I2C_Mem_Read@data+1,fsr2h
  1466  000D38  6EDF               	movwf	indf2,c
  1467                           
  1468                           ;I2C.c: 70:     I2C_Stop();
  1469  000D3A  ECAD  F007         	call	_I2C_Stop	;wreg free
  1470  000D3E  0012               	return		;funcret
  1471  000D40                     __end_of_I2C_Mem_Read:
  1472                           	opt callstack 0
  1473                           
  1474 ;; *************** function _I2C_RepStart *****************
  1475 ;; Defined at:
  1476 ;;		line 28 in file "I2C.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;		None
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;		None
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  1    wreg      void 
  1483 ;; Registers used:
  1484 ;;		wreg, status,2, status,0, cstack
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1490 ;;      Params:         0       0       0       0       0       0       0       0       0
  1491 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1492 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1493 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1494 ;;Total ram usage:        0 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    3
  1497 ;; This function calls:
  1498 ;;		_I2C_is_idle
  1499 ;; This function is called by:
  1500 ;;		_I2C_Mem_Read
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           	psect	text11
  1505  000F52                     __ptext11:
  1506                           	opt callstack 0
  1507  000F52                     _I2C_RepStart:
  1508                           	opt callstack 24
  1509                           
  1510                           ;I2C.c: 29:     I2C_is_idle();
  1511                           
  1512                           ;incstack = 0
  1513  000F52  ECED  F005         	call	_I2C_is_idle	;wreg free
  1514                           
  1515                           ;I2C.c: 30:     SSPCON2bits.RSEN = 1;
  1516  000F56  82C5               	bsf	4037,1,c	;volatile
  1517  000F58  0012               	return		;funcret
  1518  000F5A                     __end_of_I2C_RepStart:
  1519                           	opt callstack 0
  1520                           
  1521 ;; *************** function _I2C_Read *****************
  1522 ;; Defined at:
  1523 ;;		line 45 in file "I2C.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;  GenerateAck     1    wreg     _Bool 
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;  GenerateAck     1   14[COMRAM] _Bool 
  1528 ;;  data            1   15[COMRAM] unsigned char 
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  1    wreg      unsigned char 
  1531 ;; Registers used:
  1532 ;;		wreg, status,2, status,0, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1538 ;;      Params:         0       0       0       0       0       0       0       0       0
  1539 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1540 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1541 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1542 ;;Total ram usage:        2 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:    3
  1545 ;; This function calls:
  1546 ;;		_I2C_is_idle
  1547 ;; This function is called by:
  1548 ;;		_I2C_Mem_Read
  1549 ;;		_I2C_Master_Receive
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           	psect	text12
  1554  000EAE                     __ptext12:
  1555                           	opt callstack 0
  1556  000EAE                     _I2C_Read:
  1557                           	opt callstack 24
  1558                           
  1559                           ;incstack = 0
  1560                           ;I2C_Read@GenerateAck stored from wreg
  1561  000EAE  6E0F               	movwf	I2C_Read@GenerateAck,c
  1562                           
  1563                           ;I2C.c: 47:     I2C_is_idle();
  1564  000EB0  ECED  F005         	call	_I2C_is_idle	;wreg free
  1565                           
  1566                           ;I2C.c: 48:     SSPCON2bits.RCEN = 1;
  1567  000EB4  86C5               	bsf	4037,3,c	;volatile
  1568  000EB6                     l285:
  1569  000EB6  A0C7               	btfss	4039,0,c	;volatile
  1570  000EB8  D7FE               	goto	l285
  1571                           
  1572                           ;I2C.c: 50:     data = SSPBUF;
  1573  000EBA  CFC9 F010          	movff	4041,I2C_Read@data	;volatile
  1574                           
  1575                           ;I2C.c: 51:     SSPCON2bits.ACKEN = GenerateAck;
  1576  000EBE  B00F               	btfsc	I2C_Read@GenerateAck,0,c
  1577  000EC0  D002               	bra	u1095
  1578  000EC2  98C5               	bcf	4037,4,c	;volatile
  1579  000EC4  D001               	bra	u1096
  1580  000EC6                     u1095:
  1581  000EC6  88C5               	bsf	4037,4,c	;volatile
  1582  000EC8                     u1096:
  1583                           
  1584                           ;I2C.c: 52:     return data;
  1585  000EC8  5010               	movf	I2C_Read@data,w,c
  1586  000ECA  0012               	return		;funcret
  1587  000ECC                     __end_of_I2C_Read:
  1588                           	opt callstack 0
  1589                           
  1590 ;; *************** function _ShowWeek *****************
  1591 ;; Defined at:
  1592 ;;		line 202 in file "main.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;		None
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;		None
  1597 ;; Return value:  Size  Location     Type
  1598 ;;                  1    wreg      void 
  1599 ;; Registers used:
  1600 ;;		wreg, status,2, status,0, cstack
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1606 ;;      Params:         0       0       0       0       0       0       0       0       0
  1607 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1608 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1609 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1610 ;;Total ram usage:        0 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    3
  1613 ;; This function calls:
  1614 ;;		___awmod
  1615 ;; This function is called by:
  1616 ;;		_main
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           	psect	text13
  1621  000D40                     __ptext13:
  1622                           	opt callstack 0
  1623  000D40                     _ShowWeek:
  1624                           	opt callstack 27
  1625                           
  1626                           ;main.c: 203:     NumBuf[0] = 11;
  1627                           
  1628                           ;incstack = 0
  1629  000D40  0E0B               	movlw	11
  1630  000D42  6E51               	movwf	_NumBuf,c
  1631                           
  1632                           ;main.c: 204:     NumBuf[1] = 10;
  1633  000D44  0E0A               	movlw	10
  1634  000D46  6E52               	movwf	_NumBuf+1,c
  1635                           
  1636                           ;main.c: 205:     NumBuf[2] = RTC.Week % 10;
  1637  000D48  C047  F00B         	movff	_RTC+5,___awmod@dividend
  1638  000D4C  6A0C               	clrf	___awmod@dividend+1,c
  1639  000D4E  0E00               	movlw	0
  1640  000D50  6E0E               	movwf	___awmod@divisor+1,c
  1641  000D52  0E0A               	movlw	10
  1642  000D54  6E0D               	movwf	___awmod@divisor,c
  1643  000D56  EC0A  F004         	call	___awmod	;wreg free
  1644  000D5A  500B               	movf	?___awmod,w,c
  1645  000D5C  6E53               	movwf	_NumBuf+2,c
  1646                           
  1647                           ;main.c: 206:     NumBuf[3] = 10;
  1648  000D5E  0E0A               	movlw	10
  1649  000D60  6E54               	movwf	_NumBuf+3,c
  1650                           
  1651                           ;main.c: 207:     PointBuf[1] = 0;
  1652  000D62  0E00               	movlw	0
  1653  000D64  6E2F               	movwf	_PointBuf+1,c
  1654                           
  1655                           ;main.c: 208:     PointBuf[0] = 0;
  1656  000D66  0E00               	movlw	0
  1657  000D68  6E2E               	movwf	_PointBuf,c
  1658                           
  1659                           ;main.c: 209:     PointBuf[2] = 0;
  1660  000D6A  0E00               	movlw	0
  1661  000D6C  6E30               	movwf	_PointBuf+2,c
  1662                           
  1663                           ;main.c: 210:     PointBuf[3] = 0;
  1664  000D6E  0E00               	movlw	0
  1665  000D70  6E31               	movwf	_PointBuf+3,c
  1666  000D72  0012               	return		;funcret
  1667  000D74                     __end_of_ShowWeek:
  1668                           	opt callstack 0
  1669                           
  1670 ;; *************** function _ShowTime *****************
  1671 ;; Defined at:
  1672 ;;		line 224 in file "main.c"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;		None
  1675 ;; Auto vars:     Size  Location     Type
  1676 ;;		None
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  1    wreg      void 
  1679 ;; Registers used:
  1680 ;;		wreg, status,2, status,0, cstack
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1686 ;;      Params:         0       0       0       0       0       0       0       0       0
  1687 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1688 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1689 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1690 ;;Total ram usage:        0 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    3
  1693 ;; This function calls:
  1694 ;;		___awdiv
  1695 ;;		___awmod
  1696 ;; This function is called by:
  1697 ;;		_main
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700                           
  1701                           	psect	text14
  1702  00079C                     __ptext14:
  1703                           	opt callstack 0
  1704  00079C                     _ShowTime:
  1705                           	opt callstack 27
  1706                           
  1707                           ;main.c: 225:     static uint8_t old_sec = 0;;main.c: 226:     NumBuf[0] = RTC.Hour / 10
      +                          ;
  1708                           
  1709                           ;incstack = 0
  1710  00079C  C042  F00B         	movff	_RTC,___awdiv@dividend
  1711  0007A0  6A0C               	clrf	___awdiv@dividend+1,c
  1712  0007A2  0E00               	movlw	0
  1713  0007A4  6E0E               	movwf	___awdiv@divisor+1,c
  1714  0007A6  0E0A               	movlw	10
  1715  0007A8  6E0D               	movwf	___awdiv@divisor,c
  1716  0007AA  EC8C  F003         	call	___awdiv	;wreg free
  1717  0007AE  500B               	movf	?___awdiv,w,c
  1718  0007B0  6E51               	movwf	_NumBuf,c
  1719                           
  1720                           ;main.c: 227:     NumBuf[1] = RTC.Hour % 10;
  1721  0007B2  C042  F00B         	movff	_RTC,___awmod@dividend
  1722  0007B6  6A0C               	clrf	___awmod@dividend+1,c
  1723  0007B8  0E00               	movlw	0
  1724  0007BA  6E0E               	movwf	___awmod@divisor+1,c
  1725  0007BC  0E0A               	movlw	10
  1726  0007BE  6E0D               	movwf	___awmod@divisor,c
  1727  0007C0  EC0A  F004         	call	___awmod	;wreg free
  1728  0007C4  500B               	movf	?___awmod,w,c
  1729  0007C6  6E52               	movwf	_NumBuf+1,c
  1730                           
  1731                           ;main.c: 228:     NumBuf[2] = RTC.Min / 10;
  1732  0007C8  C043  F00B         	movff	_RTC+1,___awdiv@dividend
  1733  0007CC  6A0C               	clrf	___awdiv@dividend+1,c
  1734  0007CE  0E00               	movlw	0
  1735  0007D0  6E0E               	movwf	___awdiv@divisor+1,c
  1736  0007D2  0E0A               	movlw	10
  1737  0007D4  6E0D               	movwf	___awdiv@divisor,c
  1738  0007D6  EC8C  F003         	call	___awdiv	;wreg free
  1739  0007DA  500B               	movf	?___awdiv,w,c
  1740  0007DC  6E53               	movwf	_NumBuf+2,c
  1741                           
  1742                           ;main.c: 229:     NumBuf[3] = RTC.Min % 10;
  1743  0007DE  C043  F00B         	movff	_RTC+1,___awmod@dividend
  1744  0007E2  6A0C               	clrf	___awmod@dividend+1,c
  1745  0007E4  0E00               	movlw	0
  1746  0007E6  6E0E               	movwf	___awmod@divisor+1,c
  1747  0007E8  0E0A               	movlw	10
  1748  0007EA  6E0D               	movwf	___awmod@divisor,c
  1749  0007EC  EC0A  F004         	call	___awmod	;wreg free
  1750  0007F0  500B               	movf	?___awmod,w,c
  1751  0007F2  6E54               	movwf	_NumBuf+3,c
  1752                           
  1753                           ;main.c: 230:     if(RTC.Sec != old_sec) {
  1754  0007F4  5038               	movf	ShowTime@old_sec,w,c
  1755  0007F6  1844               	xorwf	_RTC+2,w,c
  1756  0007F8  B4D8               	btfsc	status,2,c
  1757  0007FA  0012               	return	
  1758                           
  1759                           ;main.c: 231:         PointBuf[1] = (PointBuf[1]==0)?1:0;
  1760  0007FC  502F               	movf	_PointBuf+1,w,c
  1761  0007FE  A4D8               	btfss	status,2,c
  1762  000800  D002               	goto	u1590
  1763  000802  0E01               	movlw	1
  1764  000804  D001               	goto	u1600
  1765  000806                     u1590:
  1766  000806  0E00               	movlw	0
  1767  000808                     u1600:
  1768  000808  6E2F               	movwf	_PointBuf+1,c
  1769                           
  1770                           ;main.c: 232:         PointBuf[2] = PointBuf[1];
  1771  00080A  C02F  F030         	movff	_PointBuf+1,_PointBuf+2
  1772                           
  1773                           ;main.c: 233:         old_sec = RTC.Sec;
  1774  00080E  C044  F038         	movff	_RTC+2,ShowTime@old_sec
  1775  000812  0012               	return		;funcret
  1776  000814                     __end_of_ShowTime:
  1777                           	opt callstack 0
  1778                           
  1779 ;; *************** function _ShowDate *****************
  1780 ;; Defined at:
  1781 ;;		line 213 in file "main.c"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;		None
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;		None
  1786 ;; Return value:  Size  Location     Type
  1787 ;;                  1    wreg      void 
  1788 ;; Registers used:
  1789 ;;		wreg, status,2, status,0, cstack
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1795 ;;      Params:         0       0       0       0       0       0       0       0       0
  1796 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1797 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1798 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1799 ;;Total ram usage:        0 bytes
  1800 ;; Hardware stack levels used:    1
  1801 ;; Hardware stack levels required when called:    3
  1802 ;; This function calls:
  1803 ;;		___awdiv
  1804 ;;		___awmod
  1805 ;; This function is called by:
  1806 ;;		_main
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           	psect	text15
  1811  000884                     __ptext15:
  1812                           	opt callstack 0
  1813  000884                     _ShowDate:
  1814                           	opt callstack 27
  1815                           
  1816                           ;main.c: 214:     NumBuf[0] = RTC.Month / 10;
  1817                           
  1818                           ;incstack = 0
  1819  000884  C046  F00B         	movff	_RTC+4,___awdiv@dividend
  1820  000888  6A0C               	clrf	___awdiv@dividend+1,c
  1821  00088A  0E00               	movlw	0
  1822  00088C  6E0E               	movwf	___awdiv@divisor+1,c
  1823  00088E  0E0A               	movlw	10
  1824  000890  6E0D               	movwf	___awdiv@divisor,c
  1825  000892  EC8C  F003         	call	___awdiv	;wreg free
  1826  000896  500B               	movf	?___awdiv,w,c
  1827  000898  6E51               	movwf	_NumBuf,c
  1828                           
  1829                           ;main.c: 215:     NumBuf[1] = RTC.Month % 10;
  1830  00089A  C046  F00B         	movff	_RTC+4,___awmod@dividend
  1831  00089E  6A0C               	clrf	___awmod@dividend+1,c
  1832  0008A0  0E00               	movlw	0
  1833  0008A2  6E0E               	movwf	___awmod@divisor+1,c
  1834  0008A4  0E0A               	movlw	10
  1835  0008A6  6E0D               	movwf	___awmod@divisor,c
  1836  0008A8  EC0A  F004         	call	___awmod	;wreg free
  1837  0008AC  500B               	movf	?___awmod,w,c
  1838  0008AE  6E52               	movwf	_NumBuf+1,c
  1839                           
  1840                           ;main.c: 216:     NumBuf[2] = RTC.Date / 10;
  1841  0008B0  C048  F00B         	movff	_RTC+6,___awdiv@dividend
  1842  0008B4  6A0C               	clrf	___awdiv@dividend+1,c
  1843  0008B6  0E00               	movlw	0
  1844  0008B8  6E0E               	movwf	___awdiv@divisor+1,c
  1845  0008BA  0E0A               	movlw	10
  1846  0008BC  6E0D               	movwf	___awdiv@divisor,c
  1847  0008BE  EC8C  F003         	call	___awdiv	;wreg free
  1848  0008C2  500B               	movf	?___awdiv,w,c
  1849  0008C4  6E53               	movwf	_NumBuf+2,c
  1850                           
  1851                           ;main.c: 217:     NumBuf[3] = RTC.Date % 10;
  1852  0008C6  C048  F00B         	movff	_RTC+6,___awmod@dividend
  1853  0008CA  6A0C               	clrf	___awmod@dividend+1,c
  1854  0008CC  0E00               	movlw	0
  1855  0008CE  6E0E               	movwf	___awmod@divisor+1,c
  1856  0008D0  0E0A               	movlw	10
  1857  0008D2  6E0D               	movwf	___awmod@divisor,c
  1858  0008D4  EC0A  F004         	call	___awmod	;wreg free
  1859  0008D8  500B               	movf	?___awmod,w,c
  1860  0008DA  6E54               	movwf	_NumBuf+3,c
  1861                           
  1862                           ;main.c: 218:     PointBuf[1] = 1;
  1863  0008DC  0E01               	movlw	1
  1864  0008DE  6E2F               	movwf	_PointBuf+1,c
  1865                           
  1866                           ;main.c: 219:     PointBuf[0] = 0;
  1867  0008E0  0E00               	movlw	0
  1868  0008E2  6E2E               	movwf	_PointBuf,c
  1869                           
  1870                           ;main.c: 220:     PointBuf[2] = 0;
  1871  0008E4  0E00               	movlw	0
  1872  0008E6  6E30               	movwf	_PointBuf+2,c
  1873                           
  1874                           ;main.c: 221:     PointBuf[3] = 0;
  1875  0008E8  0E00               	movlw	0
  1876  0008EA  6E31               	movwf	_PointBuf+3,c
  1877  0008EC  0012               	return		;funcret
  1878  0008EE                     __end_of_ShowDate:
  1879                           	opt callstack 0
  1880                           
  1881 ;; *************** function _SetRTC *****************
  1882 ;; Defined at:
  1883 ;;		line 103 in file "main.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;		None
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;  cnt             1   44[COMRAM] unsigned char 
  1888 ;; Return value:  Size  Location     Type
  1889 ;;                  1    wreg      void 
  1890 ;; Registers used:
  1891 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1892 ;; Tracked objects:
  1893 ;;		On entry : 0/0
  1894 ;;		On exit  : 0/0
  1895 ;;		Unchanged: 0/0
  1896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1897 ;;      Params:         0       0       0       0       0       0       0       0       0
  1898 ;;      Locals:        19       0       0       0       0       0       0       0       0
  1899 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1900 ;;      Totals:        21       0       0       0       0       0       0       0       0
  1901 ;;Total ram usage:       21 bytes
  1902 ;; Hardware stack levels used:    1
  1903 ;; Hardware stack levels required when called:    7
  1904 ;; This function calls:
  1905 ;;		_GetRisingEdge_SW1
  1906 ;;		_GetRisingEdge_SW2
  1907 ;;		_TimeSet
  1908 ;;		___awdiv
  1909 ;;		___awmod
  1910 ;; This function is called by:
  1911 ;;		_main
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text16
  1916  000012                     __ptext16:
  1917                           	opt callstack 0
  1918  000012                     _SetRTC:
  1919                           	opt callstack 23
  1920                           
  1921                           ;main.c: 104:     static uint16_t BlinkTime = 0;;main.c: 105:     static _Bool flag = 0;
      +                          ;main.c: 106:     uint8_t cnt = 0;
  1922                           
  1923                           ;incstack = 0
  1924  000012  0E00               	movlw	0
  1925  000014  6E2D               	movwf	SetRTC@cnt,c
  1926                           
  1927                           ;main.c: 107:     Set = RTC;
  1928  000016  EE20  F042         	lfsr	2,_RTC
  1929  00001A  EE10  F03B         	lfsr	1,_Set
  1930  00001E  0E06               	movlw	6
  1931  000020                     u1611:
  1932  000020  CFDB FFE3          	movff	plusw2,plusw1
  1933  000024  06E8               	decf	wreg,f,c
  1934  000026  E2FC               	bc	u1611
  1935                           
  1936                           ;main.c: 108:     Set.Sec = 0;
  1937  000028  0E00               	movlw	0
  1938  00002A  6E3D               	movwf	_Set+2,c
  1939                           
  1940                           ;main.c: 109:     Set.Year = 21;
  1941  00002C  0E15               	movlw	21
  1942  00002E  6E3E               	movwf	_Set+3,c
  1943                           
  1944                           ;main.c: 110:     while(cnt < 5) {
  1945  000030  D1E5               	goto	l2325
  1946  000032                     l2167:
  1947                           
  1948                           ;main.c: 111:         if(BlinkTime++ >= 2000) {
  1949  000032  5032               	movf	SetRTC@BlinkTime,w,c
  1950  000034  6E19               	movwf	??_SetRTC& (0+255),c
  1951  000036  5033               	movf	SetRTC@BlinkTime+1,w,c
  1952  000038  6E1A               	movwf	(??_SetRTC+1)& (0+255),c
  1953  00003A  4A32               	infsnz	SetRTC@BlinkTime,f,c
  1954  00003C  2A33               	incf	SetRTC@BlinkTime+1,f,c
  1955  00003E  0ED0               	movlw	208
  1956  000040  5C19               	subwf	??_SetRTC,w,c
  1957  000042  0E07               	movlw	7
  1958  000044  581A               	subwfb	??_SetRTC+1,w,c
  1959  000046  A0D8               	btfss	status,0,c
  1960  000048  D00B               	goto	l112
  1961                           
  1962                           ;main.c: 112:             BlinkTime = 0;
  1963  00004A  0E00               	movlw	0
  1964  00004C  6E33               	movwf	SetRTC@BlinkTime+1,c
  1965  00004E  0E00               	movlw	0
  1966  000050  6E32               	movwf	SetRTC@BlinkTime,c
  1967                           
  1968                           ;main.c: 113:             flag = (flag==0)?1:0;
  1969  000052  5039               	movf	SetRTC@flag,w,c
  1970  000054  A4D8               	btfss	status,2,c
  1971  000056  D002               	goto	u1630
  1972  000058  0E01               	movlw	1
  1973  00005A  D001               	goto	u1640
  1974  00005C                     u1630:
  1975  00005C  0E00               	movlw	0
  1976  00005E                     u1640:
  1977  00005E  6E39               	movwf	SetRTC@flag,c
  1978  000060                     l112:
  1979                           
  1980                           ;main.c: 115:         if(cnt==0 || cnt==1) {
  1981  000060  502D               	movf	SetRTC@cnt,w,c
  1982  000062  B4D8               	btfsc	status,2,c
  1983  000064  D003               	goto	u1660
  1984  000066  042D               	decf	SetRTC@cnt,w,c
  1985  000068  A4D8               	btfss	status,2,c
  1986  00006A  D095               	goto	l2217
  1987  00006C                     u1660:
  1988                           
  1989                           ;main.c: 116:             if(cnt==0) {
  1990  00006C  502D               	movf	SetRTC@cnt,w,c
  1991  00006E  A4D8               	btfss	status,2,c
  1992  000070  D045               	goto	l2191
  1993                           
  1994                           ;main.c: 117:                 NumBuf[0] = (flag==1)?(Set.Hour / 10):11;
  1995  000072  0439               	decf	SetRTC@flag,w,c
  1996  000074  B4D8               	btfsc	status,2,c
  1997  000076  D005               	goto	l2179
  1998  000078  0E00               	movlw	0
  1999  00007A  6E1C               	movwf	_SetRTC$454+1,c
  2000  00007C  0E0B               	movlw	11
  2001  00007E  6E1B               	movwf	_SetRTC$454,c
  2002  000080  D00D               	goto	l2181
  2003  000082                     l2179:
  2004  000082  C03B  F00B         	movff	_Set,___awdiv@dividend
  2005  000086  6A0C               	clrf	___awdiv@dividend+1,c
  2006  000088  0E00               	movlw	0
  2007  00008A  6E0E               	movwf	___awdiv@divisor+1,c
  2008  00008C  0E0A               	movlw	10
  2009  00008E  6E0D               	movwf	___awdiv@divisor,c
  2010  000090  EC8C  F003         	call	___awdiv	;wreg free
  2011  000094  C00B  F01B         	movff	?___awdiv,_SetRTC$454
  2012  000098  C00C  F01C         	movff	?___awdiv+1,_SetRTC$454+1
  2013  00009C                     l2181:
  2014  00009C  C01B  F051         	movff	_SetRTC$454,_NumBuf
  2015                           
  2016                           ;main.c: 118:                 NumBuf[1] = (flag==1)?(Set.Hour % 10):11;
  2017  0000A0  0439               	decf	SetRTC@flag,w,c
  2018  0000A2  B4D8               	btfsc	status,2,c
  2019  0000A4  D005               	goto	l2187
  2020  0000A6  0E00               	movlw	0
  2021  0000A8  6E1E               	movwf	_SetRTC$455+1,c
  2022  0000AA  0E0B               	movlw	11
  2023  0000AC  6E1D               	movwf	_SetRTC$455,c
  2024  0000AE  D00D               	goto	l2189
  2025  0000B0                     l2187:
  2026  0000B0  C03B  F00B         	movff	_Set,___awmod@dividend
  2027  0000B4  6A0C               	clrf	___awmod@dividend+1,c
  2028  0000B6  0E00               	movlw	0
  2029  0000B8  6E0E               	movwf	___awmod@divisor+1,c
  2030  0000BA  0E0A               	movlw	10
  2031  0000BC  6E0D               	movwf	___awmod@divisor,c
  2032  0000BE  EC0A  F004         	call	___awmod	;wreg free
  2033  0000C2  C00B  F01D         	movff	?___awmod,_SetRTC$455
  2034  0000C6  C00C  F01E         	movff	?___awmod+1,_SetRTC$455+1
  2035  0000CA                     l2189:
  2036  0000CA  C01D  F052         	movff	_SetRTC$455,_NumBuf+1
  2037                           
  2038                           ;main.c: 119:                 NumBuf[2] = Set.Min / 10;
  2039  0000CE  C03C  F00B         	movff	_Set+1,___awdiv@dividend
  2040  0000D2  6A0C               	clrf	___awdiv@dividend+1,c
  2041  0000D4  0E00               	movlw	0
  2042  0000D6  6E0E               	movwf	___awdiv@divisor+1,c
  2043  0000D8  0E0A               	movlw	10
  2044  0000DA  6E0D               	movwf	___awdiv@divisor,c
  2045  0000DC  EC8C  F003         	call	___awdiv	;wreg free
  2046  0000E0  500B               	movf	?___awdiv,w,c
  2047  0000E2  6E53               	movwf	_NumBuf+2,c
  2048                           
  2049                           ;main.c: 120:                 NumBuf[3] = Set.Min % 10;
  2050  0000E4  C03C  F00B         	movff	_Set+1,___awmod@dividend
  2051  0000E8  6A0C               	clrf	___awmod@dividend+1,c
  2052  0000EA  0E00               	movlw	0
  2053  0000EC  6E0E               	movwf	___awmod@divisor+1,c
  2054  0000EE  0E0A               	movlw	10
  2055  0000F0  6E0D               	movwf	___awmod@divisor,c
  2056  0000F2  EC0A  F004         	call	___awmod	;wreg free
  2057  0000F6  500B               	movf	?___awmod,w,c
  2058  0000F8  6E54               	movwf	_NumBuf+3,c
  2059                           
  2060                           ;main.c: 121:             }
  2061  0000FA  D044               	goto	l2209
  2062  0000FC                     l2191:
  2063                           
  2064                           ;main.c: 123:                 NumBuf[0] = Set.Hour / 10;
  2065  0000FC  C03B  F00B         	movff	_Set,___awdiv@dividend
  2066  000100  6A0C               	clrf	___awdiv@dividend+1,c
  2067  000102  0E00               	movlw	0
  2068  000104  6E0E               	movwf	___awdiv@divisor+1,c
  2069  000106  0E0A               	movlw	10
  2070  000108  6E0D               	movwf	___awdiv@divisor,c
  2071  00010A  EC8C  F003         	call	___awdiv	;wreg free
  2072  00010E  500B               	movf	?___awdiv,w,c
  2073  000110  6E51               	movwf	_NumBuf,c
  2074                           
  2075                           ;main.c: 124:                 NumBuf[1] = Set.Hour % 10;
  2076  000112  C03B  F00B         	movff	_Set,___awmod@dividend
  2077  000116  6A0C               	clrf	___awmod@dividend+1,c
  2078  000118  0E00               	movlw	0
  2079  00011A  6E0E               	movwf	___awmod@divisor+1,c
  2080  00011C  0E0A               	movlw	10
  2081  00011E  6E0D               	movwf	___awmod@divisor,c
  2082  000120  EC0A  F004         	call	___awmod	;wreg free
  2083  000124  500B               	movf	?___awmod,w,c
  2084  000126  6E52               	movwf	_NumBuf+1,c
  2085                           
  2086                           ;main.c: 125:                 NumBuf[2] = (flag==1)?(Set.Min / 10):11;
  2087  000128  0439               	decf	SetRTC@flag,w,c
  2088  00012A  B4D8               	btfsc	status,2,c
  2089  00012C  D005               	goto	l2197
  2090  00012E  0E00               	movlw	0
  2091  000130  6E20               	movwf	_SetRTC$456+1,c
  2092  000132  0E0B               	movlw	11
  2093  000134  6E1F               	movwf	_SetRTC$456,c
  2094  000136  D00D               	goto	l2199
  2095  000138                     l2197:
  2096  000138  C03C  F00B         	movff	_Set+1,___awdiv@dividend
  2097  00013C  6A0C               	clrf	___awdiv@dividend+1,c
  2098  00013E  0E00               	movlw	0
  2099  000140  6E0E               	movwf	___awdiv@divisor+1,c
  2100  000142  0E0A               	movlw	10
  2101  000144  6E0D               	movwf	___awdiv@divisor,c
  2102  000146  EC8C  F003         	call	___awdiv	;wreg free
  2103  00014A  C00B  F01F         	movff	?___awdiv,_SetRTC$456
  2104  00014E  C00C  F020         	movff	?___awdiv+1,_SetRTC$456+1
  2105  000152                     l2199:
  2106  000152  C01F  F053         	movff	_SetRTC$456,_NumBuf+2
  2107                           
  2108                           ;main.c: 126:                 NumBuf[3] = (flag==1)?(Set.Min % 10):11;
  2109  000156  0439               	decf	SetRTC@flag,w,c
  2110  000158  B4D8               	btfsc	status,2,c
  2111  00015A  D005               	goto	l2205
  2112  00015C  0E00               	movlw	0
  2113  00015E  6E22               	movwf	_SetRTC$457+1,c
  2114  000160  0E0B               	movlw	11
  2115  000162  6E21               	movwf	_SetRTC$457,c
  2116  000164  D00D               	goto	l2207
  2117  000166                     l2205:
  2118  000166  C03C  F00B         	movff	_Set+1,___awmod@dividend
  2119  00016A  6A0C               	clrf	___awmod@dividend+1,c
  2120  00016C  0E00               	movlw	0
  2121  00016E  6E0E               	movwf	___awmod@divisor+1,c
  2122  000170  0E0A               	movlw	10
  2123  000172  6E0D               	movwf	___awmod@divisor,c
  2124  000174  EC0A  F004         	call	___awmod	;wreg free
  2125  000178  C00B  F021         	movff	?___awmod,_SetRTC$457
  2126  00017C  C00C  F022         	movff	?___awmod+1,_SetRTC$457+1
  2127  000180                     l2207:
  2128  000180  C021  F054         	movff	_SetRTC$457,_NumBuf+3
  2129  000184                     l2209:
  2130                           
  2131                           ;main.c: 128:             PointBuf[0] = 0; PointBuf[1] = 1;
  2132  000184  0E00               	movlw	0
  2133  000186  6E2E               	movwf	_PointBuf,c
  2134  000188  0E01               	movlw	1
  2135  00018A  6E2F               	movwf	_PointBuf+1,c
  2136                           
  2137                           ;main.c: 129:             PointBuf[2] = 1; PointBuf[3] = 0;
  2138  00018C  0E01               	movlw	1
  2139  00018E  6E30               	movwf	_PointBuf+2,c
  2140  000190  0E00               	movlw	0
  2141  000192  6E31               	movwf	_PointBuf+3,c
  2142                           
  2143                           ;main.c: 130:         }
  2144  000194  D117               	goto	l2319
  2145  000196                     l2217:
  2146  000196  0E02               	movlw	2
  2147  000198  182D               	xorwf	SetRTC@cnt,w,c
  2148  00019A  B4D8               	btfsc	status,2,c
  2149  00019C  D004               	goto	u1730
  2150  00019E  0E03               	movlw	3
  2151  0001A0  182D               	xorwf	SetRTC@cnt,w,c
  2152  0001A2  A4D8               	btfss	status,2,c
  2153  0001A4  D093               	goto	l2265
  2154  0001A6                     u1730:
  2155                           
  2156                           ;main.c: 132:             if(cnt==2) {
  2157  0001A6  0E02               	movlw	2
  2158  0001A8  182D               	xorwf	SetRTC@cnt,w,c
  2159  0001AA  A4D8               	btfss	status,2,c
  2160  0001AC  D045               	goto	l2239
  2161                           
  2162                           ;main.c: 133:                 NumBuf[0] = (flag==1)?(Set.Month / 10):11;
  2163  0001AE  0439               	decf	SetRTC@flag,w,c
  2164  0001B0  B4D8               	btfsc	status,2,c
  2165  0001B2  D005               	goto	l2227
  2166  0001B4  0E00               	movlw	0
  2167  0001B6  6E24               	movwf	_SetRTC$458+1,c
  2168  0001B8  0E0B               	movlw	11
  2169  0001BA  6E23               	movwf	_SetRTC$458,c
  2170  0001BC  D00D               	goto	l2229
  2171  0001BE                     l2227:
  2172  0001BE  C03F  F00B         	movff	_Set+4,___awdiv@dividend
  2173  0001C2  6A0C               	clrf	___awdiv@dividend+1,c
  2174  0001C4  0E00               	movlw	0
  2175  0001C6  6E0E               	movwf	___awdiv@divisor+1,c
  2176  0001C8  0E0A               	movlw	10
  2177  0001CA  6E0D               	movwf	___awdiv@divisor,c
  2178  0001CC  EC8C  F003         	call	___awdiv	;wreg free
  2179  0001D0  C00B  F023         	movff	?___awdiv,_SetRTC$458
  2180  0001D4  C00C  F024         	movff	?___awdiv+1,_SetRTC$458+1
  2181  0001D8                     l2229:
  2182  0001D8  C023  F051         	movff	_SetRTC$458,_NumBuf
  2183                           
  2184                           ;main.c: 134:                 NumBuf[1] = (flag==1)?(Set.Month % 10):11;
  2185  0001DC  0439               	decf	SetRTC@flag,w,c
  2186  0001DE  B4D8               	btfsc	status,2,c
  2187  0001E0  D005               	goto	l2235
  2188  0001E2  0E00               	movlw	0
  2189  0001E4  6E26               	movwf	_SetRTC$459+1,c
  2190  0001E6  0E0B               	movlw	11
  2191  0001E8  6E25               	movwf	_SetRTC$459,c
  2192  0001EA  D00D               	goto	l2237
  2193  0001EC                     l2235:
  2194  0001EC  C03F  F00B         	movff	_Set+4,___awmod@dividend
  2195  0001F0  6A0C               	clrf	___awmod@dividend+1,c
  2196  0001F2  0E00               	movlw	0
  2197  0001F4  6E0E               	movwf	___awmod@divisor+1,c
  2198  0001F6  0E0A               	movlw	10
  2199  0001F8  6E0D               	movwf	___awmod@divisor,c
  2200  0001FA  EC0A  F004         	call	___awmod	;wreg free
  2201  0001FE  C00B  F025         	movff	?___awmod,_SetRTC$459
  2202  000202  C00C  F026         	movff	?___awmod+1,_SetRTC$459+1
  2203  000206                     l2237:
  2204  000206  C025  F052         	movff	_SetRTC$459,_NumBuf+1
  2205                           
  2206                           ;main.c: 135:                 NumBuf[2] = Set.Date / 10;
  2207  00020A  C041  F00B         	movff	_Set+6,___awdiv@dividend
  2208  00020E  6A0C               	clrf	___awdiv@dividend+1,c
  2209  000210  0E00               	movlw	0
  2210  000212  6E0E               	movwf	___awdiv@divisor+1,c
  2211  000214  0E0A               	movlw	10
  2212  000216  6E0D               	movwf	___awdiv@divisor,c
  2213  000218  EC8C  F003         	call	___awdiv	;wreg free
  2214  00021C  500B               	movf	?___awdiv,w,c
  2215  00021E  6E53               	movwf	_NumBuf+2,c
  2216                           
  2217                           ;main.c: 136:                 NumBuf[3] = Set.Date % 10;
  2218  000220  C041  F00B         	movff	_Set+6,___awmod@dividend
  2219  000224  6A0C               	clrf	___awmod@dividend+1,c
  2220  000226  0E00               	movlw	0
  2221  000228  6E0E               	movwf	___awmod@divisor+1,c
  2222  00022A  0E0A               	movlw	10
  2223  00022C  6E0D               	movwf	___awmod@divisor,c
  2224  00022E  EC0A  F004         	call	___awmod	;wreg free
  2225  000232  500B               	movf	?___awmod,w,c
  2226  000234  6E54               	movwf	_NumBuf+3,c
  2227                           
  2228                           ;main.c: 137:             }
  2229  000236  D044               	goto	l2257
  2230  000238                     l2239:
  2231                           
  2232                           ;main.c: 139:                 NumBuf[0] = Set.Month / 10;
  2233  000238  C03F  F00B         	movff	_Set+4,___awdiv@dividend
  2234  00023C  6A0C               	clrf	___awdiv@dividend+1,c
  2235  00023E  0E00               	movlw	0
  2236  000240  6E0E               	movwf	___awdiv@divisor+1,c
  2237  000242  0E0A               	movlw	10
  2238  000244  6E0D               	movwf	___awdiv@divisor,c
  2239  000246  EC8C  F003         	call	___awdiv	;wreg free
  2240  00024A  500B               	movf	?___awdiv,w,c
  2241  00024C  6E51               	movwf	_NumBuf,c
  2242                           
  2243                           ;main.c: 140:                 NumBuf[1] = Set.Month % 10;
  2244  00024E  C03F  F00B         	movff	_Set+4,___awmod@dividend
  2245  000252  6A0C               	clrf	___awmod@dividend+1,c
  2246  000254  0E00               	movlw	0
  2247  000256  6E0E               	movwf	___awmod@divisor+1,c
  2248  000258  0E0A               	movlw	10
  2249  00025A  6E0D               	movwf	___awmod@divisor,c
  2250  00025C  EC0A  F004         	call	___awmod	;wreg free
  2251  000260  500B               	movf	?___awmod,w,c
  2252  000262  6E52               	movwf	_NumBuf+1,c
  2253                           
  2254                           ;main.c: 141:                 NumBuf[2] = (flag==1)?(Set.Date / 10):11;
  2255  000264  0439               	decf	SetRTC@flag,w,c
  2256  000266  B4D8               	btfsc	status,2,c
  2257  000268  D005               	goto	l2245
  2258  00026A  0E00               	movlw	0
  2259  00026C  6E28               	movwf	_SetRTC$460+1,c
  2260  00026E  0E0B               	movlw	11
  2261  000270  6E27               	movwf	_SetRTC$460,c
  2262  000272  D00D               	goto	l2247
  2263  000274                     l2245:
  2264  000274  C041  F00B         	movff	_Set+6,___awdiv@dividend
  2265  000278  6A0C               	clrf	___awdiv@dividend+1,c
  2266  00027A  0E00               	movlw	0
  2267  00027C  6E0E               	movwf	___awdiv@divisor+1,c
  2268  00027E  0E0A               	movlw	10
  2269  000280  6E0D               	movwf	___awdiv@divisor,c
  2270  000282  EC8C  F003         	call	___awdiv	;wreg free
  2271  000286  C00B  F027         	movff	?___awdiv,_SetRTC$460
  2272  00028A  C00C  F028         	movff	?___awdiv+1,_SetRTC$460+1
  2273  00028E                     l2247:
  2274  00028E  C027  F053         	movff	_SetRTC$460,_NumBuf+2
  2275                           
  2276                           ;main.c: 142:                 NumBuf[3] = (flag==1)?(Set.Date % 10):11;
  2277  000292  0439               	decf	SetRTC@flag,w,c
  2278  000294  B4D8               	btfsc	status,2,c
  2279  000296  D005               	goto	l2253
  2280  000298  0E00               	movlw	0
  2281  00029A  6E2A               	movwf	_SetRTC$461+1,c
  2282  00029C  0E0B               	movlw	11
  2283  00029E  6E29               	movwf	_SetRTC$461,c
  2284  0002A0  D00D               	goto	l2255
  2285  0002A2                     l2253:
  2286  0002A2  C041  F00B         	movff	_Set+6,___awmod@dividend
  2287  0002A6  6A0C               	clrf	___awmod@dividend+1,c
  2288  0002A8  0E00               	movlw	0
  2289  0002AA  6E0E               	movwf	___awmod@divisor+1,c
  2290  0002AC  0E0A               	movlw	10
  2291  0002AE  6E0D               	movwf	___awmod@divisor,c
  2292  0002B0  EC0A  F004         	call	___awmod	;wreg free
  2293  0002B4  C00B  F029         	movff	?___awmod,_SetRTC$461
  2294  0002B8  C00C  F02A         	movff	?___awmod+1,_SetRTC$461+1
  2295  0002BC                     l2255:
  2296  0002BC  C029  F054         	movff	_SetRTC$461,_NumBuf+3
  2297  0002C0                     l2257:
  2298                           
  2299                           ;main.c: 144:             PointBuf[0] = 0; PointBuf[1] = 1;
  2300  0002C0  0E00               	movlw	0
  2301  0002C2  6E2E               	movwf	_PointBuf,c
  2302  0002C4  0E01               	movlw	1
  2303  0002C6  6E2F               	movwf	_PointBuf+1,c
  2304                           
  2305                           ;main.c: 145:             PointBuf[2] = 0; PointBuf[3] = 0;
  2306  0002C8  0E00               	movlw	0
  2307  0002CA  D761               	goto	L2
  2308  0002CC                     l2265:
  2309                           
  2310                           ;main.c: 148:             NumBuf[0] = 11;
  2311  0002CC  0E0B               	movlw	11
  2312  0002CE  6E51               	movwf	_NumBuf,c
  2313                           
  2314                           ;main.c: 149:             NumBuf[1] = 10;
  2315  0002D0  0E0A               	movlw	10
  2316  0002D2  6E52               	movwf	_NumBuf+1,c
  2317                           
  2318                           ;main.c: 150:             NumBuf[2] = (flag==1)?(Set.Week % 10):11;
  2319  0002D4  0439               	decf	SetRTC@flag,w,c
  2320  0002D6  B4D8               	btfsc	status,2,c
  2321  0002D8  D005               	goto	l2271
  2322  0002DA  0E00               	movlw	0
  2323  0002DC  6E2C               	movwf	_SetRTC$462+1,c
  2324  0002DE  0E0B               	movlw	11
  2325  0002E0  6E2B               	movwf	_SetRTC$462,c
  2326  0002E2  D00D               	goto	l2273
  2327  0002E4                     l2271:
  2328  0002E4  C040  F00B         	movff	_Set+5,___awmod@dividend
  2329  0002E8  6A0C               	clrf	___awmod@dividend+1,c
  2330  0002EA  0E00               	movlw	0
  2331  0002EC  6E0E               	movwf	___awmod@divisor+1,c
  2332  0002EE  0E0A               	movlw	10
  2333  0002F0  6E0D               	movwf	___awmod@divisor,c
  2334  0002F2  EC0A  F004         	call	___awmod	;wreg free
  2335  0002F6  C00B  F02B         	movff	?___awmod,_SetRTC$462
  2336  0002FA  C00C  F02C         	movff	?___awmod+1,_SetRTC$462+1
  2337  0002FE                     l2273:
  2338  0002FE  C02B  F053         	movff	_SetRTC$462,_NumBuf+2
  2339                           
  2340                           ;main.c: 151:             NumBuf[3] = 10;
  2341  000302  0E0A               	movlw	10
  2342  000304  6E54               	movwf	_NumBuf+3,c
  2343                           
  2344                           ;main.c: 152:             PointBuf[0] = 0; PointBuf[1] = 0;
  2345  000306  0E00               	movlw	0
  2346  000308  6E2E               	movwf	_PointBuf,c
  2347  00030A  0E00               	movlw	0
  2348  00030C  6E2F               	movwf	_PointBuf+1,c
  2349                           
  2350                           ;main.c: 153:             PointBuf[2] = 0; PointBuf[3] = 0;
  2351  00030E  0E00               	movlw	0
  2352  000310  6E30               	movwf	_PointBuf+2,c
  2353  000312  0E00               	movlw	0
  2354  000314  6E31               	movwf	_PointBuf+3,c
  2355                           
  2356                           ;main.c: 154:             _delay((unsigned long)((100)*(48000000/4000000.0)));
  2357  000316  0EF0               	movlw	240
  2358  000318                     u2117:
  2359  000318  D000               	nop2	
  2360  00031A  2EE8               	decfsz	wreg,f,c
  2361  00031C  D7FD               	bra	u2117
  2362  00031E  D052               	goto	l2319
  2363  000320                     l2287:
  2364                           
  2365                           ;main.c: 159:                 if(GetRisingEdge_SW1()) {
  2366  000320  EC4D  F006         	call	_GetRisingEdge_SW1	;wreg free
  2367  000324  0900               	iorlw	0
  2368  000326  B4D8               	btfsc	status,2,c
  2369  000328  D064               	goto	l2321
  2370                           
  2371                           ;main.c: 160:                     if(Set.Hour++>=23) {
  2372  00032A  2A3B               	incf	_Set,f,c
  2373  00032C  043B               	decf	_Set,w,c
  2374  00032E  6E19               	movwf	??_SetRTC& (0+255),c
  2375  000330  0E16               	movlw	22
  2376  000332  6419               	cpfsgt	??_SetRTC,c
  2377  000334  D05E               	goto	l2321
  2378                           
  2379                           ;main.c: 161:                         Set.Hour = 0;
  2380  000336  0E00               	movlw	0
  2381  000338  6E3B               	movwf	_Set,c
  2382  00033A  D05B               	goto	l2321
  2383  00033C                     l2293:
  2384                           
  2385                           ;main.c: 166:                 if(GetRisingEdge_SW1()) {
  2386  00033C  EC4D  F006         	call	_GetRisingEdge_SW1	;wreg free
  2387  000340  0900               	iorlw	0
  2388  000342  B4D8               	btfsc	status,2,c
  2389  000344  D056               	goto	l2321
  2390                           
  2391                           ;main.c: 167:                     if(Set.Min++>=59) {
  2392  000346  EE20  F03C         	lfsr	2,_Set+1
  2393  00034A  CFDF F019          	movff	indf2,??_SetRTC
  2394  00034E  0E01               	movlw	1
  2395  000350  26DF               	addwf	indf2,f,c
  2396  000352  0E3A               	movlw	58
  2397  000354  6419               	cpfsgt	??_SetRTC,c
  2398  000356  D04D               	goto	l2321
  2399                           
  2400                           ;main.c: 168:                         Set.Min = 0;
  2401  000358  0E00               	movlw	0
  2402  00035A  6E3C               	movwf	_Set+1,c
  2403  00035C  D04A               	goto	l2321
  2404  00035E                     l2299:
  2405                           
  2406                           ;main.c: 173:                 if(GetRisingEdge_SW1()) {
  2407  00035E  EC4D  F006         	call	_GetRisingEdge_SW1	;wreg free
  2408  000362  0900               	iorlw	0
  2409  000364  B4D8               	btfsc	status,2,c
  2410  000366  D045               	goto	l2321
  2411                           
  2412                           ;main.c: 174:                     if(Set.Month++>=12) {
  2413  000368  EE20  F03F         	lfsr	2,_Set+4
  2414  00036C  CFDF F019          	movff	indf2,??_SetRTC
  2415  000370  0E01               	movlw	1
  2416  000372  26DF               	addwf	indf2,f,c
  2417  000374  0E0B               	movlw	11
  2418  000376  6419               	cpfsgt	??_SetRTC,c
  2419  000378  D03C               	goto	l2321
  2420                           
  2421                           ;main.c: 175:                         Set.Month = 1;
  2422  00037A  0E01               	movlw	1
  2423  00037C  6E3F               	movwf	_Set+4,c
  2424  00037E  D039               	goto	l2321
  2425  000380                     l2305:
  2426                           
  2427                           ;main.c: 180:                 if(GetRisingEdge_SW1()) {
  2428  000380  EC4D  F006         	call	_GetRisingEdge_SW1	;wreg free
  2429  000384  0900               	iorlw	0
  2430  000386  B4D8               	btfsc	status,2,c
  2431  000388  D034               	goto	l2321
  2432                           
  2433                           ;main.c: 181:                     if(Set.Date++>=31) {
  2434  00038A  EE20  F041         	lfsr	2,_Set+6
  2435  00038E  CFDF F019          	movff	indf2,??_SetRTC
  2436  000392  0E01               	movlw	1
  2437  000394  26DF               	addwf	indf2,f,c
  2438  000396  0E1E               	movlw	30
  2439  000398  6419               	cpfsgt	??_SetRTC,c
  2440  00039A  D02B               	goto	l2321
  2441                           
  2442                           ;main.c: 182:                         Set.Date = 1;
  2443  00039C  0E01               	movlw	1
  2444  00039E  6E41               	movwf	_Set+6,c
  2445  0003A0  D028               	goto	l2321
  2446  0003A2                     l2311:
  2447                           
  2448                           ;main.c: 187:                 if(GetRisingEdge_SW1()) {
  2449  0003A2  EC4D  F006         	call	_GetRisingEdge_SW1	;wreg free
  2450  0003A6  0900               	iorlw	0
  2451  0003A8  B4D8               	btfsc	status,2,c
  2452  0003AA  D023               	goto	l2321
  2453                           
  2454                           ;main.c: 188:                     if(Set.Week++>=7) {
  2455  0003AC  EE20  F040         	lfsr	2,_Set+5
  2456  0003B0  CFDF F019          	movff	indf2,??_SetRTC
  2457  0003B4  0E01               	movlw	1
  2458  0003B6  26DF               	addwf	indf2,f,c
  2459  0003B8  0E06               	movlw	6
  2460  0003BA  6419               	cpfsgt	??_SetRTC,c
  2461  0003BC  D01A               	goto	l2321
  2462                           
  2463                           ;main.c: 189:                         Set.Week = 1;
  2464  0003BE  0E01               	movlw	1
  2465  0003C0  6E40               	movwf	_Set+5,c
  2466  0003C2  D017               	goto	l2321
  2467  0003C4                     l2319:
  2468  0003C4  502D               	movf	SetRTC@cnt,w,c
  2469  0003C6  6E19               	movwf	??_SetRTC& (0+255),c
  2470  0003C8  6A1A               	clrf	(??_SetRTC+1)& (0+255),c
  2471                           
  2472                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2473                           ; Switch size 1, requested type "simple"
  2474                           ; Number of cases is 1, Range of values is 0 to 0
  2475                           ; switch strategies available:
  2476                           ; Name         Instructions Cycles
  2477                           ; simple_byte            4     3 (average)
  2478                           ;	Chosen strategy is simple_byte
  2479  0003CA  501A               	movf	??_SetRTC+1,w,c
  2480  0003CC  0A00               	xorlw	0	; case 0
  2481  0003CE  A4D8               	btfss	status,2,c
  2482  0003D0  D010               	goto	l2321
  2483                           
  2484                           ; Switch size 1, requested type "simple"
  2485                           ; Number of cases is 5, Range of values is 0 to 4
  2486                           ; switch strategies available:
  2487                           ; Name         Instructions Cycles
  2488                           ; simple_byte           16     9 (average)
  2489                           ;	Chosen strategy is simple_byte
  2490  0003D2  5019               	movf	??_SetRTC,w,c
  2491  0003D4  0A00               	xorlw	0	; case 0
  2492  0003D6  B4D8               	btfsc	status,2,c
  2493  0003D8  D7A3               	goto	l2287
  2494  0003DA  0A01               	xorlw	1	; case 1
  2495  0003DC  B4D8               	btfsc	status,2,c
  2496  0003DE  D7AE               	goto	l2293
  2497  0003E0  0A03               	xorlw	3	; case 2
  2498  0003E2  B4D8               	btfsc	status,2,c
  2499  0003E4  D7BC               	goto	l2299
  2500  0003E6  0A01               	xorlw	1	; case 3
  2501  0003E8  B4D8               	btfsc	status,2,c
  2502  0003EA  D7CA               	goto	l2305
  2503  0003EC  0A07               	xorlw	7	; case 4
  2504  0003EE  B4D8               	btfsc	status,2,c
  2505  0003F0  D7D8               	goto	l2311
  2506  0003F2                     l2321:
  2507                           
  2508                           ;main.c: 195:         if(GetRisingEdge_SW2()) {
  2509  0003F2  EC31  F006         	call	_GetRisingEdge_SW2	;wreg free
  2510  0003F6  0900               	iorlw	0
  2511  0003F8  A4D8               	btfss	status,2,c
  2512                           
  2513                           ;main.c: 196:             cnt++;
  2514  0003FA  2A2D               	incf	SetRTC@cnt,f,c
  2515  0003FC                     l2325:
  2516                           
  2517                           ;main.c: 110:     while(cnt < 5) {
  2518  0003FC  0E04               	movlw	4
  2519  0003FE  642D               	cpfsgt	SetRTC@cnt,c
  2520  000400  D618               	goto	l2167
  2521                           
  2522                           ;main.c: 199:     TimeSet(&Set);
  2523  000402  0E3B               	movlw	low _Set
  2524  000404  6E17               	movwf	TimeSet@time,c
  2525  000406  0E00               	movlw	high _Set
  2526  000408  6E18               	movwf	TimeSet@time+1,c
  2527  00040A  EC77  F004         	call	_TimeSet	;wreg free
  2528  00040E  0012               	return		;funcret
  2529  000410                     __end_of_SetRTC:
  2530                           	opt callstack 0
  2531                           
  2532 ;; *************** function _TimeSet *****************
  2533 ;; Defined at:
  2534 ;;		line 131 in file "DS3231.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;  time            2   22[COMRAM] PTR struct Time
  2537 ;;		 -> Set(7), 
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;		None
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      void 
  2542 ;; Registers used:
  2543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2549 ;;      Params:         2       0       0       0       0       0       0       0       0
  2550 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2551 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2552 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2553 ;;Total ram usage:        2 bytes
  2554 ;; Hardware stack levels used:    1
  2555 ;; Hardware stack levels required when called:    6
  2556 ;; This function calls:
  2557 ;;		_SetDate
  2558 ;;		_SetHour
  2559 ;;		_SetMin
  2560 ;;		_SetMonth
  2561 ;;		_SetSec
  2562 ;;		_SetYear
  2563 ;; This function is called by:
  2564 ;;		_SetRTC
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568                           	psect	text17
  2569  0008EE                     __ptext17:
  2570                           	opt callstack 0
  2571  0008EE                     _TimeSet:
  2572                           	opt callstack 23
  2573                           
  2574                           ;DS3231.c: 132:     SetSec(time->Sec);
  2575                           
  2576                           ;incstack = 0
  2577  0008EE  EE20 F002          	lfsr	2,2
  2578  0008F2  5017               	movf	TimeSet@time,w,c
  2579  0008F4  26D9               	addwf	fsr2l,f,c
  2580  0008F6  5018               	movf	TimeSet@time+1,w,c
  2581  0008F8  22DA               	addwfc	fsr2h,f,c
  2582  0008FA  50DF               	movf	indf2,w,c
  2583  0008FC  ECA1  F005         	call	_SetSec
  2584                           
  2585                           ;DS3231.c: 133:     SetMin(time->Min);
  2586  000900  EE20 F001          	lfsr	2,1
  2587  000904  5017               	movf	TimeSet@time,w,c
  2588  000906  26D9               	addwf	fsr2l,f,c
  2589  000908  5018               	movf	TimeSet@time+1,w,c
  2590  00090A  22DA               	addwfc	fsr2h,f,c
  2591  00090C  50DF               	movf	indf2,w,c
  2592  00090E  ECC7  F005         	call	_SetMin
  2593                           
  2594                           ;DS3231.c: 134:     SetHour(time->Hour);
  2595  000912  C017  FFD9         	movff	TimeSet@time,fsr2l
  2596  000916  C018  FFDA         	movff	TimeSet@time+1,fsr2h
  2597  00091A  50DF               	movf	indf2,w,c
  2598  00091C  EC54  F005         	call	_SetHour
  2599                           
  2600                           ;DS3231.c: 135:     SetDate(time->Date);
  2601  000920  EE20 F006          	lfsr	2,6
  2602  000924  5017               	movf	TimeSet@time,w,c
  2603  000926  26D9               	addwf	fsr2l,f,c
  2604  000928  5018               	movf	TimeSet@time+1,w,c
  2605  00092A  22DA               	addwfc	fsr2h,f,c
  2606  00092C  50DF               	movf	indf2,w,c
  2607  00092E  EC02  F005         	call	_SetDate
  2608                           
  2609                           ;DS3231.c: 136:     SetMonth(time->Month);
  2610  000932  EE20 F004          	lfsr	2,4
  2611  000936  5017               	movf	TimeSet@time,w,c
  2612  000938  26D9               	addwf	fsr2l,f,c
  2613  00093A  5018               	movf	TimeSet@time+1,w,c
  2614  00093C  22DA               	addwfc	fsr2h,f,c
  2615  00093E  50DF               	movf	indf2,w,c
  2616  000940  ECD9  F004         	call	_SetMonth
  2617                           
  2618                           ;DS3231.c: 137:     SetYear(time->Year);
  2619  000944  EE20 F003          	lfsr	2,3
  2620  000948  5017               	movf	TimeSet@time,w,c
  2621  00094A  26D9               	addwf	fsr2l,f,c
  2622  00094C  5018               	movf	TimeSet@time+1,w,c
  2623  00094E  22DA               	addwfc	fsr2h,f,c
  2624  000950  50DF               	movf	indf2,w,c
  2625  000952  EC7B  F005         	call	_SetYear
  2626  000956  0012               	return		;funcret
  2627  000958                     __end_of_TimeSet:
  2628                           	opt callstack 0
  2629                           
  2630 ;; *************** function _SetYear *****************
  2631 ;; Defined at:
  2632 ;;		line 57 in file "DS3231.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;  data            1    wreg     unsigned char 
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;  data            1   21[COMRAM] unsigned char 
  2637 ;;  BCD_Data        1   20[COMRAM] unsigned char 
  2638 ;; Return value:  Size  Location     Type
  2639 ;;                  1    wreg      void 
  2640 ;; Registers used:
  2641 ;;		wreg, status,2, status,0, cstack
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2647 ;;      Params:         0       0       0       0       0       0       0       0       0
  2648 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2649 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2650 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2651 ;;Total ram usage:        4 bytes
  2652 ;; Hardware stack levels used:    1
  2653 ;; Hardware stack levels required when called:    5
  2654 ;; This function calls:
  2655 ;;		_I2C_Mem_Transmit
  2656 ;;		___awdiv
  2657 ;;		___awmod
  2658 ;; This function is called by:
  2659 ;;		_TimeSet
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           	psect	text18
  2664  000AF6                     __ptext18:
  2665                           	opt callstack 0
  2666  000AF6                     _SetYear:
  2667                           	opt callstack 23
  2668                           
  2669                           ;incstack = 0
  2670                           ;SetYear@data stored from wreg
  2671  000AF6  6E16               	movwf	SetYear@data,c
  2672                           
  2673                           ;DS3231.c: 59:     if(data>=0 && data<100) {
  2674  000AF8  0E64               	movlw	100
  2675  000AFA  6016               	cpfslt	SetYear@data,c
  2676  000AFC  0012               	return	
  2677                           
  2678                           ;DS3231.c: 60:         BCD_Data = ((data/10)<<4)|(data%10);
  2679  000AFE  C016  F00B         	movff	SetYear@data,___awmod@dividend
  2680  000B02  6A0C               	clrf	___awmod@dividend+1,c
  2681  000B04  0E00               	movlw	0
  2682  000B06  6E0E               	movwf	___awmod@divisor+1,c
  2683  000B08  0E0A               	movlw	10
  2684  000B0A  6E0D               	movwf	___awmod@divisor,c
  2685  000B0C  EC0A  F004         	call	___awmod	;wreg free
  2686  000B10  C00B  F013         	movff	?___awmod,??_SetYear
  2687  000B14  C00C  F014         	movff	?___awmod+1,??_SetYear+1
  2688  000B18  C016  F00B         	movff	SetYear@data,___awdiv@dividend
  2689  000B1C  6A0C               	clrf	___awdiv@dividend+1,c
  2690  000B1E  0E00               	movlw	0
  2691  000B20  6E0E               	movwf	___awdiv@divisor+1,c
  2692  000B22  0E0A               	movlw	10
  2693  000B24  6E0D               	movwf	___awdiv@divisor,c
  2694  000B26  EC8C  F003         	call	___awdiv	;wreg free
  2695  000B2A  380B               	swapf	?___awdiv,w,c
  2696  000B2C  0BF0               	andlw	240
  2697  000B2E  1013               	iorwf	??_SetYear,w,c
  2698  000B30  6E15               	movwf	SetYear@BCD_Data,c
  2699                           
  2700                           ;DS3231.c: 61:         I2C_Mem_Transmit(0xD0, 0x06, BCD_Data);
  2701  000B32  0E06               	movlw	6
  2702  000B34  6E10               	movwf	I2C_Mem_Transmit@MemAddress,c
  2703  000B36  C015  F011         	movff	SetYear@BCD_Data,I2C_Mem_Transmit@data
  2704  000B3A  0ED0               	movlw	208
  2705  000B3C  EC47  F007         	call	_I2C_Mem_Transmit
  2706  000B40  0012               	return		;funcret
  2707  000B42                     __end_of_SetYear:
  2708                           	opt callstack 0
  2709                           
  2710 ;; *************** function _SetSec *****************
  2711 ;; Defined at:
  2712 ;;		line 9 in file "DS3231.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;  data            1    wreg     unsigned char 
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;  data            1   21[COMRAM] unsigned char 
  2717 ;;  BCD_Data        1   20[COMRAM] unsigned char 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  1    wreg      void 
  2720 ;; Registers used:
  2721 ;;		wreg, status,2, status,0, cstack
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2727 ;;      Params:         0       0       0       0       0       0       0       0       0
  2728 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2729 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2730 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2731 ;;Total ram usage:        4 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:    5
  2734 ;; This function calls:
  2735 ;;		_I2C_Mem_Transmit
  2736 ;;		___awdiv
  2737 ;;		___awmod
  2738 ;; This function is called by:
  2739 ;;		_TimeSet
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           	psect	text19
  2744  000B42                     __ptext19:
  2745                           	opt callstack 0
  2746  000B42                     _SetSec:
  2747                           	opt callstack 23
  2748                           
  2749                           ;incstack = 0
  2750                           ;SetSec@data stored from wreg
  2751  000B42  6E16               	movwf	SetSec@data,c
  2752                           
  2753                           ;DS3231.c: 11:     if(data>=0 && data<60) {
  2754  000B44  0E3C               	movlw	60
  2755  000B46  6016               	cpfslt	SetSec@data,c
  2756  000B48  0012               	return	
  2757                           
  2758                           ;DS3231.c: 12:         BCD_Data = ((data/10)<<4)|(data%10);
  2759  000B4A  C016  F00B         	movff	SetSec@data,___awmod@dividend
  2760  000B4E  6A0C               	clrf	___awmod@dividend+1,c
  2761  000B50  0E00               	movlw	0
  2762  000B52  6E0E               	movwf	___awmod@divisor+1,c
  2763  000B54  0E0A               	movlw	10
  2764  000B56  6E0D               	movwf	___awmod@divisor,c
  2765  000B58  EC0A  F004         	call	___awmod	;wreg free
  2766  000B5C  C00B  F013         	movff	?___awmod,??_SetSec
  2767  000B60  C00C  F014         	movff	?___awmod+1,??_SetSec+1
  2768  000B64  C016  F00B         	movff	SetSec@data,___awdiv@dividend
  2769  000B68  6A0C               	clrf	___awdiv@dividend+1,c
  2770  000B6A  0E00               	movlw	0
  2771  000B6C  6E0E               	movwf	___awdiv@divisor+1,c
  2772  000B6E  0E0A               	movlw	10
  2773  000B70  6E0D               	movwf	___awdiv@divisor,c
  2774  000B72  EC8C  F003         	call	___awdiv	;wreg free
  2775  000B76  380B               	swapf	?___awdiv,w,c
  2776  000B78  0BF0               	andlw	240
  2777  000B7A  1013               	iorwf	??_SetSec,w,c
  2778  000B7C  6E15               	movwf	SetSec@BCD_Data,c
  2779                           
  2780                           ;DS3231.c: 13:         I2C_Mem_Transmit( 0xD0,0x00, BCD_Data);
  2781  000B7E  0E00               	movlw	0
  2782  000B80  6E10               	movwf	I2C_Mem_Transmit@MemAddress,c
  2783  000B82  C015  F011         	movff	SetSec@BCD_Data,I2C_Mem_Transmit@data
  2784  000B86  0ED0               	movlw	208
  2785  000B88  EC47  F007         	call	_I2C_Mem_Transmit
  2786  000B8C  0012               	return		;funcret
  2787  000B8E                     __end_of_SetSec:
  2788                           	opt callstack 0
  2789                           
  2790 ;; *************** function _SetMonth *****************
  2791 ;; Defined at:
  2792 ;;		line 49 in file "DS3231.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  data            1    wreg     unsigned char 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  data            1   21[COMRAM] unsigned char 
  2797 ;;  BCD_Data        1   20[COMRAM] unsigned char 
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  1    wreg      void 
  2800 ;; Registers used:
  2801 ;;		wreg, status,2, status,0, cstack
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2807 ;;      Params:         0       0       0       0       0       0       0       0       0
  2808 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2809 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2810 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2811 ;;Total ram usage:        4 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    5
  2814 ;; This function calls:
  2815 ;;		_I2C_Mem_Transmit
  2816 ;;		___awdiv
  2817 ;;		___awmod
  2818 ;; This function is called by:
  2819 ;;		_TimeSet
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           	psect	text20
  2824  0009B2                     __ptext20:
  2825                           	opt callstack 0
  2826  0009B2                     _SetMonth:
  2827                           	opt callstack 23
  2828                           
  2829                           ;incstack = 0
  2830                           ;SetMonth@data stored from wreg
  2831  0009B2  6E16               	movwf	SetMonth@data,c
  2832                           
  2833                           ;DS3231.c: 51:     if(data>=1 && data<13){
  2834  0009B4  5016               	movf	SetMonth@data,w,c
  2835  0009B6  B4D8               	btfsc	status,2,c
  2836  0009B8  0012               	return	
  2837  0009BA  0E0D               	movlw	13
  2838  0009BC  6016               	cpfslt	SetMonth@data,c
  2839  0009BE  0012               	return	
  2840                           
  2841                           ;DS3231.c: 52:         BCD_Data = ((data/10)<<4)|(data%10);
  2842  0009C0  C016  F00B         	movff	SetMonth@data,___awmod@dividend
  2843  0009C4  6A0C               	clrf	___awmod@dividend+1,c
  2844  0009C6  0E00               	movlw	0
  2845  0009C8  6E0E               	movwf	___awmod@divisor+1,c
  2846  0009CA  0E0A               	movlw	10
  2847  0009CC  6E0D               	movwf	___awmod@divisor,c
  2848  0009CE  EC0A  F004         	call	___awmod	;wreg free
  2849  0009D2  C00B  F013         	movff	?___awmod,??_SetMonth
  2850  0009D6  C00C  F014         	movff	?___awmod+1,??_SetMonth+1
  2851  0009DA  C016  F00B         	movff	SetMonth@data,___awdiv@dividend
  2852  0009DE  6A0C               	clrf	___awdiv@dividend+1,c
  2853  0009E0  0E00               	movlw	0
  2854  0009E2  6E0E               	movwf	___awdiv@divisor+1,c
  2855  0009E4  0E0A               	movlw	10
  2856  0009E6  6E0D               	movwf	___awdiv@divisor,c
  2857  0009E8  EC8C  F003         	call	___awdiv	;wreg free
  2858  0009EC  380B               	swapf	?___awdiv,w,c
  2859  0009EE  0BF0               	andlw	240
  2860  0009F0  1013               	iorwf	??_SetMonth,w,c
  2861  0009F2  6E15               	movwf	SetMonth@BCD_Data,c
  2862                           
  2863                           ;DS3231.c: 53:         I2C_Mem_Transmit( 0xD0, 0x05, BCD_Data);
  2864  0009F4  0E05               	movlw	5
  2865  0009F6  6E10               	movwf	I2C_Mem_Transmit@MemAddress,c
  2866  0009F8  C015  F011         	movff	SetMonth@BCD_Data,I2C_Mem_Transmit@data
  2867  0009FC  0ED0               	movlw	208
  2868  0009FE  EC47  F007         	call	_I2C_Mem_Transmit
  2869  000A02  0012               	return		;funcret
  2870  000A04                     __end_of_SetMonth:
  2871                           	opt callstack 0
  2872                           
  2873 ;; *************** function _SetMin *****************
  2874 ;; Defined at:
  2875 ;;		line 17 in file "DS3231.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;  data            1    wreg     unsigned char 
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;  data            1   21[COMRAM] unsigned char 
  2880 ;;  BCD_Data        1   20[COMRAM] unsigned char 
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		wreg, status,2, status,0, cstack
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2890 ;;      Params:         0       0       0       0       0       0       0       0       0
  2891 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2892 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2893 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2894 ;;Total ram usage:        4 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    5
  2897 ;; This function calls:
  2898 ;;		_I2C_Mem_Transmit
  2899 ;;		___awdiv
  2900 ;;		___awmod
  2901 ;; This function is called by:
  2902 ;;		_TimeSet
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text21
  2907  000B8E                     __ptext21:
  2908                           	opt callstack 0
  2909  000B8E                     _SetMin:
  2910                           	opt callstack 23
  2911                           
  2912                           ;incstack = 0
  2913                           ;SetMin@data stored from wreg
  2914  000B8E  6E16               	movwf	SetMin@data,c
  2915                           
  2916                           ;DS3231.c: 19:     if(data>=0 && data<60) {
  2917  000B90  0E3C               	movlw	60
  2918  000B92  6016               	cpfslt	SetMin@data,c
  2919  000B94  0012               	return	
  2920                           
  2921                           ;DS3231.c: 20:         BCD_Data = ((data/10)<<4)|(data%10);
  2922  000B96  C016  F00B         	movff	SetMin@data,___awmod@dividend
  2923  000B9A  6A0C               	clrf	___awmod@dividend+1,c
  2924  000B9C  0E00               	movlw	0
  2925  000B9E  6E0E               	movwf	___awmod@divisor+1,c
  2926  000BA0  0E0A               	movlw	10
  2927  000BA2  6E0D               	movwf	___awmod@divisor,c
  2928  000BA4  EC0A  F004         	call	___awmod	;wreg free
  2929  000BA8  C00B  F013         	movff	?___awmod,??_SetMin
  2930  000BAC  C00C  F014         	movff	?___awmod+1,??_SetMin+1
  2931  000BB0  C016  F00B         	movff	SetMin@data,___awdiv@dividend
  2932  000BB4  6A0C               	clrf	___awdiv@dividend+1,c
  2933  000BB6  0E00               	movlw	0
  2934  000BB8  6E0E               	movwf	___awdiv@divisor+1,c
  2935  000BBA  0E0A               	movlw	10
  2936  000BBC  6E0D               	movwf	___awdiv@divisor,c
  2937  000BBE  EC8C  F003         	call	___awdiv	;wreg free
  2938  000BC2  380B               	swapf	?___awdiv,w,c
  2939  000BC4  0BF0               	andlw	240
  2940  000BC6  1013               	iorwf	??_SetMin,w,c
  2941  000BC8  6E15               	movwf	SetMin@BCD_Data,c
  2942                           
  2943                           ;DS3231.c: 21:         I2C_Mem_Transmit( 0xD0, 0x01, BCD_Data);
  2944  000BCA  0E01               	movlw	1
  2945  000BCC  6E10               	movwf	I2C_Mem_Transmit@MemAddress,c
  2946  000BCE  C015  F011         	movff	SetMin@BCD_Data,I2C_Mem_Transmit@data
  2947  000BD2  0ED0               	movlw	208
  2948  000BD4  EC47  F007         	call	_I2C_Mem_Transmit
  2949  000BD8  0012               	return		;funcret
  2950  000BDA                     __end_of_SetMin:
  2951                           	opt callstack 0
  2952                           
  2953 ;; *************** function _SetHour *****************
  2954 ;; Defined at:
  2955 ;;		line 25 in file "DS3231.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;  data            1    wreg     unsigned char 
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;  data            1   21[COMRAM] unsigned char 
  2960 ;;  BCD_Data        1   20[COMRAM] unsigned char 
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  1    wreg      void 
  2963 ;; Registers used:
  2964 ;;		wreg, status,2, status,0, cstack
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2970 ;;      Params:         0       0       0       0       0       0       0       0       0
  2971 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2972 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2973 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2974 ;;Total ram usage:        4 bytes
  2975 ;; Hardware stack levels used:    1
  2976 ;; Hardware stack levels required when called:    5
  2977 ;; This function calls:
  2978 ;;		_I2C_Mem_Transmit
  2979 ;;		___awdiv
  2980 ;;		___awmod
  2981 ;; This function is called by:
  2982 ;;		_TimeSet
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           	psect	text22
  2987  000AA8                     __ptext22:
  2988                           	opt callstack 0
  2989  000AA8                     _SetHour:
  2990                           	opt callstack 23
  2991                           
  2992                           ;incstack = 0
  2993                           ;SetHour@data stored from wreg
  2994  000AA8  6E16               	movwf	SetHour@data,c
  2995                           
  2996                           ;DS3231.c: 27:     if(data>=0 && data<24) {
  2997  000AAA  0E18               	movlw	24
  2998  000AAC  6016               	cpfslt	SetHour@data,c
  2999  000AAE  0012               	return	
  3000                           
  3001                           ;DS3231.c: 28:         BCD_Data = (((data/10)<<4)|(data%10))&0x3F;
  3002  000AB0  C016  F00B         	movff	SetHour@data,___awmod@dividend
  3003  000AB4  6A0C               	clrf	___awmod@dividend+1,c
  3004  000AB6  0E00               	movlw	0
  3005  000AB8  6E0E               	movwf	___awmod@divisor+1,c
  3006  000ABA  0E0A               	movlw	10
  3007  000ABC  6E0D               	movwf	___awmod@divisor,c
  3008  000ABE  EC0A  F004         	call	___awmod	;wreg free
  3009  000AC2  C00B  F013         	movff	?___awmod,??_SetHour
  3010  000AC6  C00C  F014         	movff	?___awmod+1,??_SetHour+1
  3011  000ACA  C016  F00B         	movff	SetHour@data,___awdiv@dividend
  3012  000ACE  6A0C               	clrf	___awdiv@dividend+1,c
  3013  000AD0  0E00               	movlw	0
  3014  000AD2  6E0E               	movwf	___awdiv@divisor+1,c
  3015  000AD4  0E0A               	movlw	10
  3016  000AD6  6E0D               	movwf	___awdiv@divisor,c
  3017  000AD8  EC8C  F003         	call	___awdiv	;wreg free
  3018  000ADC  380B               	swapf	?___awdiv,w,c
  3019  000ADE  0BF0               	andlw	240
  3020  000AE0  1013               	iorwf	??_SetHour,w,c
  3021  000AE2  0B3F               	andlw	63
  3022  000AE4  6E15               	movwf	SetHour@BCD_Data,c
  3023                           
  3024                           ;DS3231.c: 29:         I2C_Mem_Transmit( 0xD0,0x02, BCD_Data);
  3025  000AE6  0E02               	movlw	2
  3026  000AE8  6E10               	movwf	I2C_Mem_Transmit@MemAddress,c
  3027  000AEA  C015  F011         	movff	SetHour@BCD_Data,I2C_Mem_Transmit@data
  3028  000AEE  0ED0               	movlw	208
  3029  000AF0  EC47  F007         	call	_I2C_Mem_Transmit
  3030  000AF4  0012               	return		;funcret
  3031  000AF6                     __end_of_SetHour:
  3032                           	opt callstack 0
  3033                           
  3034 ;; *************** function _SetDate *****************
  3035 ;; Defined at:
  3036 ;;		line 33 in file "DS3231.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;  data            1    wreg     unsigned char 
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;  data            1   21[COMRAM] unsigned char 
  3041 ;;  BCD_Data        1   20[COMRAM] unsigned char 
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      void 
  3044 ;; Registers used:
  3045 ;;		wreg, status,2, status,0, cstack
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3051 ;;      Params:         0       0       0       0       0       0       0       0       0
  3052 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3053 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3054 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3055 ;;Total ram usage:        4 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:    5
  3058 ;; This function calls:
  3059 ;;		_I2C_Mem_Transmit
  3060 ;;		___awdiv
  3061 ;;		___awmod
  3062 ;; This function is called by:
  3063 ;;		_TimeSet
  3064 ;; This function uses a non-reentrant model
  3065 ;;
  3066                           
  3067                           	psect	text23
  3068  000A04                     __ptext23:
  3069                           	opt callstack 0
  3070  000A04                     _SetDate:
  3071                           	opt callstack 23
  3072                           
  3073                           ;incstack = 0
  3074                           ;SetDate@data stored from wreg
  3075  000A04  6E16               	movwf	SetDate@data,c
  3076                           
  3077                           ;DS3231.c: 35:     if(data>=1 && data<32){
  3078  000A06  5016               	movf	SetDate@data,w,c
  3079  000A08  B4D8               	btfsc	status,2,c
  3080  000A0A  0012               	return	
  3081  000A0C  0E20               	movlw	32
  3082  000A0E  6016               	cpfslt	SetDate@data,c
  3083  000A10  0012               	return	
  3084                           
  3085                           ;DS3231.c: 36:         BCD_Data = ((data/10)<<4)|(data%10);
  3086  000A12  C016  F00B         	movff	SetDate@data,___awmod@dividend
  3087  000A16  6A0C               	clrf	___awmod@dividend+1,c
  3088  000A18  0E00               	movlw	0
  3089  000A1A  6E0E               	movwf	___awmod@divisor+1,c
  3090  000A1C  0E0A               	movlw	10
  3091  000A1E  6E0D               	movwf	___awmod@divisor,c
  3092  000A20  EC0A  F004         	call	___awmod	;wreg free
  3093  000A24  C00B  F013         	movff	?___awmod,??_SetDate
  3094  000A28  C00C  F014         	movff	?___awmod+1,??_SetDate+1
  3095  000A2C  C016  F00B         	movff	SetDate@data,___awdiv@dividend
  3096  000A30  6A0C               	clrf	___awdiv@dividend+1,c
  3097  000A32  0E00               	movlw	0
  3098  000A34  6E0E               	movwf	___awdiv@divisor+1,c
  3099  000A36  0E0A               	movlw	10
  3100  000A38  6E0D               	movwf	___awdiv@divisor,c
  3101  000A3A  EC8C  F003         	call	___awdiv	;wreg free
  3102  000A3E  380B               	swapf	?___awdiv,w,c
  3103  000A40  0BF0               	andlw	240
  3104  000A42  1013               	iorwf	??_SetDate,w,c
  3105  000A44  6E15               	movwf	SetDate@BCD_Data,c
  3106                           
  3107                           ;DS3231.c: 37:         I2C_Mem_Transmit( 0xD0, 0x04, BCD_Data);
  3108  000A46  0E04               	movlw	4
  3109  000A48  6E10               	movwf	I2C_Mem_Transmit@MemAddress,c
  3110  000A4A  C015  F011         	movff	SetDate@BCD_Data,I2C_Mem_Transmit@data
  3111  000A4E  0ED0               	movlw	208
  3112  000A50  EC47  F007         	call	_I2C_Mem_Transmit
  3113  000A54  0012               	return		;funcret
  3114  000A56                     __end_of_SetDate:
  3115                           	opt callstack 0
  3116                           
  3117 ;; *************** function ___awmod *****************
  3118 ;; Defined at:
  3119 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;  dividend        2   10[COMRAM] int 
  3122 ;;  divisor         2   12[COMRAM] int 
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;  sign            1   15[COMRAM] unsigned char 
  3125 ;;  counter         1   14[COMRAM] unsigned char 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  2   10[COMRAM] int 
  3128 ;; Registers used:
  3129 ;;		wreg, status,2, status,0
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3135 ;;      Params:         4       0       0       0       0       0       0       0       0
  3136 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3137 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3138 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3139 ;;Total ram usage:        6 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    2
  3142 ;; This function calls:
  3143 ;;		Nothing
  3144 ;; This function is called by:
  3145 ;;		_SetRTC
  3146 ;;		_ShowWeek
  3147 ;;		_ShowDate
  3148 ;;		_ShowTime
  3149 ;;		_SetSec
  3150 ;;		_SetMin
  3151 ;;		_SetHour
  3152 ;;		_SetDate
  3153 ;;		_SetMonth
  3154 ;;		_SetYear
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           	psect	text24
  3159  000814                     __ptext24:
  3160                           	opt callstack 0
  3161  000814                     ___awmod:
  3162                           	opt callstack 27
  3163                           
  3164                           ;incstack = 0
  3165  000814  0E00               	movlw	0
  3166  000816  6E10               	movwf	___awmod@sign,c
  3167  000818  AE0C               	btfss	___awmod@dividend+1,7,c
  3168  00081A  D006               	goto	l1847
  3169  00081C  6C0B               	negf	___awmod@dividend,c
  3170  00081E  1E0C               	comf	___awmod@dividend+1,f,c
  3171  000820  B0D8               	btfsc	status,0,c
  3172  000822  2A0C               	incf	___awmod@dividend+1,f,c
  3173  000824  0E01               	movlw	1
  3174  000826  6E10               	movwf	___awmod@sign,c
  3175  000828                     l1847:
  3176  000828  AE0E               	btfss	___awmod@divisor+1,7,c
  3177  00082A  D004               	goto	l1851
  3178  00082C  6C0D               	negf	___awmod@divisor,c
  3179  00082E  1E0E               	comf	___awmod@divisor+1,f,c
  3180  000830  B0D8               	btfsc	status,0,c
  3181  000832  2A0E               	incf	___awmod@divisor+1,f,c
  3182  000834                     l1851:
  3183  000834  500D               	movf	___awmod@divisor,w,c
  3184  000836  100E               	iorwf	___awmod@divisor+1,w,c
  3185  000838  B4D8               	btfsc	status,2,c
  3186  00083A  D018               	goto	l1867
  3187  00083C  0E01               	movlw	1
  3188  00083E  6E0F               	movwf	___awmod@counter,c
  3189  000840  D004               	goto	l1857
  3190  000842                     l1855:
  3191  000842  90D8               	bcf	status,0,c
  3192  000844  360D               	rlcf	___awmod@divisor,f,c
  3193  000846  360E               	rlcf	___awmod@divisor+1,f,c
  3194  000848  2A0F               	incf	___awmod@counter,f,c
  3195  00084A                     l1857:
  3196  00084A  AE0E               	btfss	___awmod@divisor+1,7,c
  3197  00084C  D7FA               	goto	l1855
  3198  00084E                     u1190:
  3199  00084E  500D               	movf	___awmod@divisor,w,c
  3200  000850  5C0B               	subwf	___awmod@dividend,w,c
  3201  000852  500E               	movf	___awmod@divisor+1,w,c
  3202  000854  580C               	subwfb	___awmod@dividend+1,w,c
  3203  000856  A0D8               	btfss	status,0,c
  3204  000858  D004               	goto	l1863
  3205  00085A  500D               	movf	___awmod@divisor,w,c
  3206  00085C  5E0B               	subwf	___awmod@dividend,f,c
  3207  00085E  500E               	movf	___awmod@divisor+1,w,c
  3208  000860  5A0C               	subwfb	___awmod@dividend+1,f,c
  3209  000862                     l1863:
  3210  000862  90D8               	bcf	status,0,c
  3211  000864  320E               	rrcf	___awmod@divisor+1,f,c
  3212  000866  320D               	rrcf	___awmod@divisor,f,c
  3213  000868  2E0F               	decfsz	___awmod@counter,f,c
  3214  00086A  D7F1               	goto	u1190
  3215  00086C                     l1867:
  3216  00086C  5010               	movf	___awmod@sign,w,c
  3217  00086E  B4D8               	btfsc	status,2,c
  3218  000870  D004               	goto	l1871
  3219  000872  6C0B               	negf	___awmod@dividend,c
  3220  000874  1E0C               	comf	___awmod@dividend+1,f,c
  3221  000876  B0D8               	btfsc	status,0,c
  3222  000878  2A0C               	incf	___awmod@dividend+1,f,c
  3223  00087A                     l1871:
  3224  00087A  C00B  F00B         	movff	___awmod@dividend,?___awmod
  3225  00087E  C00C  F00C         	movff	___awmod@dividend+1,?___awmod+1
  3226  000882  0012               	return		;funcret
  3227  000884                     __end_of___awmod:
  3228                           	opt callstack 0
  3229                           
  3230 ;; *************** function ___awdiv *****************
  3231 ;; Defined at:
  3232 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3233 ;; Parameters:    Size  Location     Type
  3234 ;;  dividend        2   10[COMRAM] int 
  3235 ;;  divisor         2   12[COMRAM] int 
  3236 ;; Auto vars:     Size  Location     Type
  3237 ;;  quotient        2   16[COMRAM] int 
  3238 ;;  sign            1   15[COMRAM] unsigned char 
  3239 ;;  counter         1   14[COMRAM] unsigned char 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  2   10[COMRAM] int 
  3242 ;; Registers used:
  3243 ;;		wreg, status,2, status,0
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3249 ;;      Params:         4       0       0       0       0       0       0       0       0
  3250 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3252 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3253 ;;Total ram usage:        8 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    2
  3256 ;; This function calls:
  3257 ;;		Nothing
  3258 ;; This function is called by:
  3259 ;;		_SetRTC
  3260 ;;		_ShowDate
  3261 ;;		_ShowTime
  3262 ;;		_SetSec
  3263 ;;		_SetMin
  3264 ;;		_SetHour
  3265 ;;		_SetDate
  3266 ;;		_SetMonth
  3267 ;;		_SetYear
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           	psect	text25
  3272  000718                     __ptext25:
  3273                           	opt callstack 0
  3274  000718                     ___awdiv:
  3275                           	opt callstack 27
  3276                           
  3277                           ;incstack = 0
  3278  000718  0E00               	movlw	0
  3279  00071A  6E10               	movwf	___awdiv@sign,c
  3280  00071C  AE0E               	btfss	___awdiv@divisor+1,7,c
  3281  00071E  D006               	goto	l1803
  3282  000720  6C0D               	negf	___awdiv@divisor,c
  3283  000722  1E0E               	comf	___awdiv@divisor+1,f,c
  3284  000724  B0D8               	btfsc	status,0,c
  3285  000726  2A0E               	incf	___awdiv@divisor+1,f,c
  3286  000728  0E01               	movlw	1
  3287  00072A  6E10               	movwf	___awdiv@sign,c
  3288  00072C                     l1803:
  3289  00072C  AE0C               	btfss	___awdiv@dividend+1,7,c
  3290  00072E  D006               	goto	l1809
  3291  000730  6C0B               	negf	___awdiv@dividend,c
  3292  000732  1E0C               	comf	___awdiv@dividend+1,f,c
  3293  000734  B0D8               	btfsc	status,0,c
  3294  000736  2A0C               	incf	___awdiv@dividend+1,f,c
  3295  000738  0E01               	movlw	1
  3296  00073A  1A10               	xorwf	___awdiv@sign,f,c
  3297  00073C                     l1809:
  3298  00073C  0E00               	movlw	0
  3299  00073E  6E12               	movwf	___awdiv@quotient+1,c
  3300  000740  0E00               	movlw	0
  3301  000742  6E11               	movwf	___awdiv@quotient,c
  3302  000744  500D               	movf	___awdiv@divisor,w,c
  3303  000746  100E               	iorwf	___awdiv@divisor+1,w,c
  3304  000748  B4D8               	btfsc	status,2,c
  3305  00074A  D01C               	goto	l1831
  3306  00074C  0E01               	movlw	1
  3307  00074E  6E0F               	movwf	___awdiv@counter,c
  3308  000750  D004               	goto	l1817
  3309  000752                     l1815:
  3310  000752  90D8               	bcf	status,0,c
  3311  000754  360D               	rlcf	___awdiv@divisor,f,c
  3312  000756  360E               	rlcf	___awdiv@divisor+1,f,c
  3313  000758  2A0F               	incf	___awdiv@counter,f,c
  3314  00075A                     l1817:
  3315  00075A  AE0E               	btfss	___awdiv@divisor+1,7,c
  3316  00075C  D7FA               	goto	l1815
  3317  00075E                     u1130:
  3318  00075E  90D8               	bcf	status,0,c
  3319  000760  3611               	rlcf	___awdiv@quotient,f,c
  3320  000762  3612               	rlcf	___awdiv@quotient+1,f,c
  3321  000764  500D               	movf	___awdiv@divisor,w,c
  3322  000766  5C0B               	subwf	___awdiv@dividend,w,c
  3323  000768  500E               	movf	___awdiv@divisor+1,w,c
  3324  00076A  580C               	subwfb	___awdiv@dividend+1,w,c
  3325  00076C  A0D8               	btfss	status,0,c
  3326  00076E  D005               	goto	l1827
  3327  000770  500D               	movf	___awdiv@divisor,w,c
  3328  000772  5E0B               	subwf	___awdiv@dividend,f,c
  3329  000774  500E               	movf	___awdiv@divisor+1,w,c
  3330  000776  5A0C               	subwfb	___awdiv@dividend+1,f,c
  3331  000778  8011               	bsf	___awdiv@quotient,0,c
  3332  00077A                     l1827:
  3333  00077A  90D8               	bcf	status,0,c
  3334  00077C  320E               	rrcf	___awdiv@divisor+1,f,c
  3335  00077E  320D               	rrcf	___awdiv@divisor,f,c
  3336  000780  2E0F               	decfsz	___awdiv@counter,f,c
  3337  000782  D7ED               	goto	u1130
  3338  000784                     l1831:
  3339  000784  5010               	movf	___awdiv@sign,w,c
  3340  000786  B4D8               	btfsc	status,2,c
  3341  000788  D004               	goto	l1835
  3342  00078A  6C11               	negf	___awdiv@quotient,c
  3343  00078C  1E12               	comf	___awdiv@quotient+1,f,c
  3344  00078E  B0D8               	btfsc	status,0,c
  3345  000790  2A12               	incf	___awdiv@quotient+1,f,c
  3346  000792                     l1835:
  3347  000792  C011  F00B         	movff	___awdiv@quotient,?___awdiv
  3348  000796  C012  F00C         	movff	___awdiv@quotient+1,?___awdiv+1
  3349  00079A  0012               	return		;funcret
  3350  00079C                     __end_of___awdiv:
  3351                           	opt callstack 0
  3352                           
  3353 ;; *************** function _I2C_Mem_Transmit *****************
  3354 ;; Defined at:
  3355 ;;		line 55 in file "I2C.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;  addr            1    wreg     unsigned char 
  3358 ;;  MemAddress      1   15[COMRAM] unsigned char 
  3359 ;;  data            1   16[COMRAM] unsigned char 
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;  addr            1   17[COMRAM] unsigned char 
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		wreg, status,2, status,0, cstack
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3371 ;;      Params:         2       0       0       0       0       0       0       0       0
  3372 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3373 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3374 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3375 ;;Total ram usage:        3 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    4
  3378 ;; This function calls:
  3379 ;;		_I2C_Start
  3380 ;;		_I2C_Stop
  3381 ;;		_I2C_Write
  3382 ;; This function is called by:
  3383 ;;		_SetSec
  3384 ;;		_SetMin
  3385 ;;		_SetHour
  3386 ;;		_SetDate
  3387 ;;		_SetMonth
  3388 ;;		_SetYear
  3389 ;;		_SetWeek
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text26
  3394  000E8E                     __ptext26:
  3395                           	opt callstack 0
  3396  000E8E                     _I2C_Mem_Transmit:
  3397                           	opt callstack 23
  3398                           
  3399                           ;incstack = 0
  3400                           ;I2C_Mem_Transmit@addr stored from wreg
  3401  000E8E  6E12               	movwf	I2C_Mem_Transmit@addr,c
  3402                           
  3403                           ;I2C.c: 56:     I2C_Start();
  3404  000E90  ECB1  F007         	call	_I2C_Start	;wreg free
  3405                           
  3406                           ;I2C.c: 57:     I2C_Write(addr&0xFE);
  3407  000E94  5012               	movf	I2C_Mem_Transmit@addr,w,c
  3408  000E96  0BFE               	andlw	254
  3409  000E98  EC8B  F007         	call	_I2C_Write
  3410                           
  3411                           ;I2C.c: 58:     I2C_Write(MemAddress);
  3412  000E9C  5010               	movf	I2C_Mem_Transmit@MemAddress,w,c
  3413  000E9E  EC8B  F007         	call	_I2C_Write
  3414                           
  3415                           ;I2C.c: 59:     I2C_Write(data);
  3416  000EA2  5011               	movf	I2C_Mem_Transmit@data,w,c
  3417  000EA4  EC8B  F007         	call	_I2C_Write
  3418                           
  3419                           ;I2C.c: 60:     I2C_Stop();
  3420  000EA8  ECAD  F007         	call	_I2C_Stop	;wreg free
  3421  000EAC  0012               	return		;funcret
  3422  000EAE                     __end_of_I2C_Mem_Transmit:
  3423                           	opt callstack 0
  3424                           
  3425 ;; *************** function _I2C_Write *****************
  3426 ;; Defined at:
  3427 ;;		line 38 in file "I2C.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;  data            1    wreg     unsigned char 
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;  data            1   14[COMRAM] unsigned char 
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  1    wreg      void 
  3434 ;; Registers used:
  3435 ;;		wreg, status,2, status,0, cstack
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3441 ;;      Params:         0       0       0       0       0       0       0       0       0
  3442 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3443 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3444 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3445 ;;Total ram usage:        1 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    3
  3448 ;; This function calls:
  3449 ;;		_I2C_is_idle
  3450 ;; This function is called by:
  3451 ;;		_I2C_Mem_Transmit
  3452 ;;		_I2C_Mem_Read
  3453 ;;		_I2C_Master_Receive
  3454 ;;		_I2C_Master_Transmit
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           	psect	text27
  3459  000F16                     __ptext27:
  3460                           	opt callstack 0
  3461  000F16                     _I2C_Write:
  3462                           	opt callstack 24
  3463                           
  3464                           ;incstack = 0
  3465                           ;I2C_Write@data stored from wreg
  3466  000F16  6E0F               	movwf	I2C_Write@data,c
  3467                           
  3468                           ;I2C.c: 39:     I2C_is_idle();
  3469  000F18  ECED  F005         	call	_I2C_is_idle	;wreg free
  3470                           
  3471                           ;I2C.c: 40:     SSPBUF = data;
  3472  000F1C  C00F  FFC9         	movff	I2C_Write@data,4041	;volatile
  3473  000F20                     l276:
  3474  000F20  B0C7               	btfsc	4039,0,c	;volatile
  3475  000F22  D7FE               	goto	l276
  3476  000F24                     u1060:
  3477  000F24  ACC5               	btfss	4037,6,c	;volatile
  3478  000F26  0012               	return	
  3479  000F28  D7FD               	goto	u1060
  3480  000F2A                     __end_of_I2C_Write:
  3481                           	opt callstack 0
  3482                           
  3483 ;; *************** function _I2C_Stop *****************
  3484 ;; Defined at:
  3485 ;;		line 33 in file "I2C.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;		None
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;		None
  3490 ;; Return value:  Size  Location     Type
  3491 ;;                  1    wreg      void 
  3492 ;; Registers used:
  3493 ;;		wreg, status,2, status,0, cstack
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3499 ;;      Params:         0       0       0       0       0       0       0       0       0
  3500 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3501 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3502 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3503 ;;Total ram usage:        0 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    3
  3506 ;; This function calls:
  3507 ;;		_I2C_is_idle
  3508 ;; This function is called by:
  3509 ;;		_I2C_Mem_Transmit
  3510 ;;		_I2C_Mem_Read
  3511 ;;		_I2C_Master_Receive
  3512 ;;		_I2C_Master_Transmit
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text28
  3517  000F5A                     __ptext28:
  3518                           	opt callstack 0
  3519  000F5A                     _I2C_Stop:
  3520                           	opt callstack 24
  3521                           
  3522                           ;I2C.c: 34:     I2C_is_idle();
  3523                           
  3524                           ;incstack = 0
  3525  000F5A  ECED  F005         	call	_I2C_is_idle	;wreg free
  3526                           
  3527                           ;I2C.c: 35:     SSPCON2bits.PEN = 1;
  3528  000F5E  84C5               	bsf	4037,2,c	;volatile
  3529  000F60  0012               	return		;funcret
  3530  000F62                     __end_of_I2C_Stop:
  3531                           	opt callstack 0
  3532                           
  3533 ;; *************** function _I2C_Start *****************
  3534 ;; Defined at:
  3535 ;;		line 23 in file "I2C.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;		None
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;		None
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      void 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0, cstack
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3549 ;;      Params:         0       0       0       0       0       0       0       0       0
  3550 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3551 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3552 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3553 ;;Total ram usage:        0 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    3
  3556 ;; This function calls:
  3557 ;;		_I2C_is_idle
  3558 ;; This function is called by:
  3559 ;;		_I2C_Mem_Transmit
  3560 ;;		_I2C_Mem_Read
  3561 ;;		_I2C_Master_Receive
  3562 ;;		_I2C_Master_Transmit
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           	psect	text29
  3567  000F62                     __ptext29:
  3568                           	opt callstack 0
  3569  000F62                     _I2C_Start:
  3570                           	opt callstack 24
  3571                           
  3572                           ;I2C.c: 24:     I2C_is_idle();
  3573                           
  3574                           ;incstack = 0
  3575  000F62  ECED  F005         	call	_I2C_is_idle	;wreg free
  3576                           
  3577                           ;I2C.c: 25:     SSPCON2bits.SEN = 1;
  3578  000F66  80C5               	bsf	4037,0,c	;volatile
  3579  000F68  0012               	return		;funcret
  3580  000F6A                     __end_of_I2C_Start:
  3581                           	opt callstack 0
  3582                           
  3583 ;; *************** function _I2C_is_idle *****************
  3584 ;; Defined at:
  3585 ;;		line 13 in file "I2C.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;		None
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;  TimeOut         2   12[COMRAM] unsigned short 
  3590 ;; Return value:  Size  Location     Type
  3591 ;;                  1    wreg      void 
  3592 ;; Registers used:
  3593 ;;		wreg, status,2, status,0
  3594 ;; Tracked objects:
  3595 ;;		On entry : 0/0
  3596 ;;		On exit  : 0/0
  3597 ;;		Unchanged: 0/0
  3598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3599 ;;      Params:         0       0       0       0       0       0       0       0       0
  3600 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3601 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3602 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3603 ;;Total ram usage:        4 bytes
  3604 ;; Hardware stack levels used:    1
  3605 ;; Hardware stack levels required when called:    2
  3606 ;; This function calls:
  3607 ;;		Nothing
  3608 ;; This function is called by:
  3609 ;;		_I2C_Start
  3610 ;;		_I2C_RepStart
  3611 ;;		_I2C_Stop
  3612 ;;		_I2C_Write
  3613 ;;		_I2C_Read
  3614 ;; This function uses a non-reentrant model
  3615 ;;
  3616                           
  3617                           	psect	text30
  3618  000BDA                     __ptext30:
  3619                           	opt callstack 0
  3620  000BDA                     _I2C_is_idle:
  3621                           	opt callstack 24
  3622                           
  3623                           ;I2C.c: 14:     uint16_t TimeOut = 0;
  3624                           
  3625                           ;incstack = 0
  3626  000BDA  0E00               	movlw	0
  3627  000BDC  6E0E               	movwf	I2C_is_idle@TimeOut+1,c
  3628  000BDE  0E00               	movlw	0
  3629  000BE0  6E0D               	movwf	I2C_is_idle@TimeOut,c
  3630                           
  3631                           ;I2C.c: 15:     while((SSPCON2 & 0x1F) || (SSPSTAT & 0x04) ){
  3632  000BE2  D014               	goto	l1763
  3633  000BE4                     l1757:
  3634                           
  3635                           ;I2C.c: 16:         if(TimeOut++>=100) {
  3636  000BE4  500D               	movf	I2C_is_idle@TimeOut,w,c
  3637  000BE6  6E0B               	movwf	??_I2C_is_idle& (0+255),c
  3638  000BE8  500E               	movf	I2C_is_idle@TimeOut+1,w,c
  3639  000BEA  6E0C               	movwf	(??_I2C_is_idle+1)& (0+255),c
  3640  000BEC  4A0D               	infsnz	I2C_is_idle@TimeOut,f,c
  3641  000BEE  2A0E               	incf	I2C_is_idle@TimeOut+1,f,c
  3642  000BF0  500C               	movf	??_I2C_is_idle+1,w,c
  3643  000BF2  E115               	bnz	l264
  3644  000BF4  0E64               	movlw	100
  3645  000BF6  5C0B               	subwf	??_I2C_is_idle,w,c
  3646  000BF8  B0D8               	btfsc	status,0,c
  3647  000BFA  0012               	return	
  3648                           
  3649                           ;I2C.c: 19:         _delay((unsigned long)((1)*(48000000/4000.0)));
  3650  000BFC  0E10               	movlw	16
  3651  000BFE  6E0B               	movwf	??_I2C_is_idle& (0+255),c
  3652  000C00  0E94               	movlw	148
  3653  000C02                     u2127:
  3654  000C02  2EE8               	decfsz	wreg,f,c
  3655  000C04  D7FE               	bra	u2127
  3656  000C06  2E0B               	decfsz	??_I2C_is_idle& (0+255),f,c
  3657  000C08  D7FC               	bra	u2127
  3658  000C0A  D000               	nop2	
  3659  000C0C                     l1763:
  3660                           
  3661                           ;I2C.c: 15:     while((SSPCON2 & 0x1F) || (SSPSTAT & 0x04) ){
  3662  000C0C  CFC5 F00B          	movff	4037,??_I2C_is_idle	;volatile
  3663  000C10  0E1F               	movlw	31
  3664  000C12  160B               	andwf	??_I2C_is_idle,f,c
  3665  000C14  A4D8               	btfss	status,2,c
  3666  000C16  D7E6               	goto	l1757
  3667  000C18  A4C7               	btfss	4039,2,c	;volatile
  3668  000C1A  0012               	return	
  3669  000C1C  D7E3               	goto	l1757
  3670  000C1E                     l264:
  3671  000C1E  0012               	return		;funcret
  3672  000C20                     __end_of_I2C_is_idle:
  3673                           	opt callstack 0
  3674                           
  3675 ;; *************** function _GetRisingEdge_SW2 *****************
  3676 ;; Defined at:
  3677 ;;		line 237 in file "main.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;		None
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;		None
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      _Bool 
  3684 ;; Registers used:
  3685 ;;		wreg, status,2
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3691 ;;      Params:         0       0       0       0       0       0       0       0       0
  3692 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3693 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3694 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3695 ;;Total ram usage:        2 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    2
  3698 ;; This function calls:
  3699 ;;		Nothing
  3700 ;; This function is called by:
  3701 ;;		_main
  3702 ;;		_SetRTC
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           	psect	text31
  3707  000C62                     __ptext31:
  3708                           	opt callstack 0
  3709  000C62                     _GetRisingEdge_SW2:
  3710                           	opt callstack 27
  3711                           
  3712                           ;main.c: 238:     static _Bool flag = 0;;main.c: 239:     if(PORTEbits.RE1 == 0) {
  3713                           
  3714                           ;incstack = 0
  3715  000C62  B284               	btfsc	3972,1,c	;volatile
  3716  000C64  D003               	goto	l198
  3717                           
  3718                           ;main.c: 240:         flag = 1;
  3719  000C66  0E01               	movlw	1
  3720  000C68  6E37               	movwf	GetRisingEdge_SW2@flag,c
  3721                           
  3722                           ;main.c: 241:     }
  3723  000C6A  D015               	goto	l1935
  3724  000C6C                     l198:
  3725  000C6C  A284               	btfss	3972,1,c	;volatile
  3726  000C6E  D013               	goto	l1935
  3727  000C70  5037               	movf	GetRisingEdge_SW2@flag,w,c
  3728  000C72  B4D8               	btfsc	status,2,c
  3729  000C74  D010               	goto	l1935
  3730                           
  3731                           ;main.c: 243:         flag = 0;
  3732  000C76  0E00               	movlw	0
  3733  000C78  6E37               	movwf	GetRisingEdge_SW2@flag,c
  3734                           
  3735                           ;main.c: 244:         _delay((unsigned long)((300)*(48000000/4000.0)));
  3736  000C7A  0E13               	movlw	19
  3737  000C7C  6E0C               	movwf	(??_GetRisingEdge_SW2+1)& (0+255),c
  3738  000C7E  0E44               	movlw	68
  3739  000C80  6E0B               	movwf	??_GetRisingEdge_SW2& (0+255),c
  3740  000C82  0E44               	movlw	68
  3741  000C84                     u2137:
  3742  000C84  2EE8               	decfsz	wreg,f,c
  3743  000C86  D7FE               	bra	u2137
  3744  000C88  2E0B               	decfsz	??_GetRisingEdge_SW2& (0+255),f,c
  3745  000C8A  D7FC               	bra	u2137
  3746  000C8C  2E0C               	decfsz	(??_GetRisingEdge_SW2+1)& (0+255),f,c
  3747  000C8E  D7FA               	bra	u2137
  3748  000C90  D000               	nop2	
  3749                           
  3750                           ;main.c: 245:         return 1;
  3751  000C92  0E01               	movlw	1
  3752  000C94  0012               	return	
  3753  000C96                     l1935:
  3754                           
  3755                           ;main.c: 247:     return 0;
  3756  000C96  0E00               	movlw	0
  3757  000C98  0012               	return		;funcret
  3758  000C9A                     __end_of_GetRisingEdge_SW2:
  3759                           	opt callstack 0
  3760                           
  3761 ;; *************** function _SetBrightness *****************
  3762 ;; Defined at:
  3763 ;;		line 84 in file "main.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;		None
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;		None
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  1    wreg      void 
  3770 ;; Registers used:
  3771 ;;		wreg, status,2, status,0, cstack
  3772 ;; Tracked objects:
  3773 ;;		On entry : 0/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3777 ;;      Params:         0       0       0       0       0       0       0       0       0
  3778 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3779 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3780 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3781 ;;Total ram usage:        2 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:    3
  3784 ;; This function calls:
  3785 ;;		_GetRisingEdge_SW1
  3786 ;;		___lwdiv
  3787 ;;		___lwmod
  3788 ;; This function is called by:
  3789 ;;		_main
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           	psect	text32
  3794  00068C                     __ptext32:
  3795                           	opt callstack 0
  3796  00068C                     _SetBrightness:
  3797                           	opt callstack 27
  3798                           
  3799                           ;main.c: 85:     if(GetRisingEdge_SW1()) {
  3800                           
  3801                           ;incstack = 0
  3802  00068C  EC4D  F006         	call	_GetRisingEdge_SW1	;wreg free
  3803  000690  0900               	iorlw	0
  3804  000692  B4D8               	btfsc	status,2,c
  3805  000694  D010               	goto	l2339
  3806                           
  3807                           ;main.c: 86:         if(Brightness[0]++ >= 10) {
  3808  000696  5049               	movf	_Brightness,w,c
  3809  000698  6E12               	movwf	??_SetBrightness& (0+255),c
  3810  00069A  504A               	movf	_Brightness+1,w,c
  3811  00069C  6E13               	movwf	(??_SetBrightness+1)& (0+255),c
  3812  00069E  4A49               	infsnz	_Brightness,f,c
  3813  0006A0  2A4A               	incf	_Brightness+1,f,c
  3814  0006A2  5013               	movf	??_SetBrightness+1,w,c
  3815  0006A4  E104               	bnz	u1930
  3816  0006A6  0E0A               	movlw	10
  3817  0006A8  5C12               	subwf	??_SetBrightness,w,c
  3818  0006AA  A0D8               	btfss	status,0,c
  3819  0006AC  D004               	goto	l2339
  3820  0006AE                     u1930:
  3821                           
  3822                           ;main.c: 87:             Brightness[0] = 0;
  3823  0006AE  0E00               	movlw	0
  3824  0006B0  6E4A               	movwf	_Brightness+1,c
  3825  0006B2  0E00               	movlw	0
  3826  0006B4  6E49               	movwf	_Brightness,c
  3827  0006B6                     l2339:
  3828                           
  3829                           ;main.c: 90:     Brightness[1] = Brightness[0];
  3830  0006B6  C049  F04B         	movff	_Brightness,_Brightness+2
  3831  0006BA  C04A  F04C         	movff	_Brightness+1,_Brightness+3
  3832                           
  3833                           ;main.c: 91:     Brightness[2] = Brightness[0];
  3834  0006BE  C049  F04D         	movff	_Brightness,_Brightness+4
  3835  0006C2  C04A  F04E         	movff	_Brightness+1,_Brightness+5
  3836                           
  3837                           ;main.c: 92:     Brightness[3] = Brightness[0];
  3838  0006C6  C049  F04F         	movff	_Brightness,_Brightness+6
  3839  0006CA  C04A  F050         	movff	_Brightness+1,_Brightness+7
  3840                           
  3841                           ;main.c: 93:     NumBuf[0] = 12;
  3842  0006CE  0E0C               	movlw	12
  3843  0006D0  6E51               	movwf	_NumBuf,c
  3844                           
  3845                           ;main.c: 94:     NumBuf[1] = 10;
  3846  0006D2  0E0A               	movlw	10
  3847  0006D4  6E52               	movwf	_NumBuf+1,c
  3848                           
  3849                           ;main.c: 95:     NumBuf[2] = Brightness[0] / 10;
  3850  0006D6  C049  F00B         	movff	_Brightness,___lwdiv@dividend
  3851  0006DA  C04A  F00C         	movff	_Brightness+1,___lwdiv@dividend+1
  3852  0006DE  0E00               	movlw	0
  3853  0006E0  6E0E               	movwf	___lwdiv@divisor+1,c
  3854  0006E2  0E0A               	movlw	10
  3855  0006E4  6E0D               	movwf	___lwdiv@divisor,c
  3856  0006E6  EC2B  F005         	call	___lwdiv	;wreg free
  3857  0006EA  500B               	movf	?___lwdiv,w,c
  3858  0006EC  6E53               	movwf	_NumBuf+2,c
  3859                           
  3860                           ;main.c: 96:     NumBuf[3] = Brightness[0] % 10;
  3861  0006EE  C049  F00B         	movff	_Brightness,___lwmod@dividend
  3862  0006F2  C04A  F00C         	movff	_Brightness+1,___lwmod@dividend+1
  3863  0006F6  0E00               	movlw	0
  3864  0006F8  6E0E               	movwf	___lwmod@divisor+1,c
  3865  0006FA  0E0A               	movlw	10
  3866  0006FC  6E0D               	movwf	___lwmod@divisor,c
  3867  0006FE  EC10  F006         	call	___lwmod	;wreg free
  3868  000702  500B               	movf	?___lwmod,w,c
  3869  000704  6E54               	movwf	_NumBuf+3,c
  3870                           
  3871                           ;main.c: 97:     PointBuf[1] = 0;
  3872  000706  0E00               	movlw	0
  3873  000708  6E2F               	movwf	_PointBuf+1,c
  3874                           
  3875                           ;main.c: 98:     PointBuf[0] = 0;
  3876  00070A  0E00               	movlw	0
  3877  00070C  6E2E               	movwf	_PointBuf,c
  3878                           
  3879                           ;main.c: 99:     PointBuf[2] = 0;
  3880  00070E  0E00               	movlw	0
  3881  000710  6E30               	movwf	_PointBuf+2,c
  3882                           
  3883                           ;main.c: 100:     PointBuf[3] = 0;
  3884  000712  0E00               	movlw	0
  3885  000714  6E31               	movwf	_PointBuf+3,c
  3886  000716  0012               	return		;funcret
  3887  000718                     __end_of_SetBrightness:
  3888                           	opt callstack 0
  3889                           
  3890 ;; *************** function ___lwmod *****************
  3891 ;; Defined at:
  3892 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lwmod.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;  dividend        2   10[COMRAM] unsigned int 
  3895 ;;  divisor         2   12[COMRAM] unsigned int 
  3896 ;; Auto vars:     Size  Location     Type
  3897 ;;  counter         1   14[COMRAM] unsigned char 
  3898 ;; Return value:  Size  Location     Type
  3899 ;;                  2   10[COMRAM] unsigned int 
  3900 ;; Registers used:
  3901 ;;		wreg, status,2, status,0
  3902 ;; Tracked objects:
  3903 ;;		On entry : 0/0
  3904 ;;		On exit  : 0/0
  3905 ;;		Unchanged: 0/0
  3906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3907 ;;      Params:         4       0       0       0       0       0       0       0       0
  3908 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3909 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3910 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3911 ;;Total ram usage:        5 bytes
  3912 ;; Hardware stack levels used:    1
  3913 ;; Hardware stack levels required when called:    2
  3914 ;; This function calls:
  3915 ;;		Nothing
  3916 ;; This function is called by:
  3917 ;;		_SetBrightness
  3918 ;; This function uses a non-reentrant model
  3919 ;;
  3920                           
  3921                           	psect	text33
  3922  000C20                     __ptext33:
  3923                           	opt callstack 0
  3924  000C20                     ___lwmod:
  3925                           	opt callstack 27
  3926                           
  3927                           ;incstack = 0
  3928  000C20  500D               	movf	___lwmod@divisor,w,c
  3929  000C22  100E               	iorwf	___lwmod@divisor+1,w,c
  3930  000C24  B4D8               	btfsc	status,2,c
  3931  000C26  D018               	goto	l875
  3932  000C28  0E01               	movlw	1
  3933  000C2A  6E0F               	movwf	___lwmod@counter,c
  3934  000C2C  D004               	goto	l2055
  3935  000C2E                     l2053:
  3936  000C2E  90D8               	bcf	status,0,c
  3937  000C30  360D               	rlcf	___lwmod@divisor,f,c
  3938  000C32  360E               	rlcf	___lwmod@divisor+1,f,c
  3939  000C34  2A0F               	incf	___lwmod@counter,f,c
  3940  000C36                     l2055:
  3941  000C36  AE0E               	btfss	___lwmod@divisor+1,7,c
  3942  000C38  D7FA               	goto	l2053
  3943  000C3A                     u1400:
  3944  000C3A  500D               	movf	___lwmod@divisor,w,c
  3945  000C3C  5C0B               	subwf	___lwmod@dividend,w,c
  3946  000C3E  500E               	movf	___lwmod@divisor+1,w,c
  3947  000C40  580C               	subwfb	___lwmod@dividend+1,w,c
  3948  000C42  A0D8               	btfss	status,0,c
  3949  000C44  D004               	goto	l2061
  3950  000C46  500D               	movf	___lwmod@divisor,w,c
  3951  000C48  5E0B               	subwf	___lwmod@dividend,f,c
  3952  000C4A  500E               	movf	___lwmod@divisor+1,w,c
  3953  000C4C  5A0C               	subwfb	___lwmod@dividend+1,f,c
  3954  000C4E                     l2061:
  3955  000C4E  90D8               	bcf	status,0,c
  3956  000C50  320E               	rrcf	___lwmod@divisor+1,f,c
  3957  000C52  320D               	rrcf	___lwmod@divisor,f,c
  3958  000C54  2E0F               	decfsz	___lwmod@counter,f,c
  3959  000C56  D7F1               	goto	u1400
  3960  000C58                     l875:
  3961  000C58  C00B  F00B         	movff	___lwmod@dividend,?___lwmod
  3962  000C5C  C00C  F00C         	movff	___lwmod@dividend+1,?___lwmod+1
  3963  000C60  0012               	return		;funcret
  3964  000C62                     __end_of___lwmod:
  3965                           	opt callstack 0
  3966                           
  3967 ;; *************** function ___lwdiv *****************
  3968 ;; Defined at:
  3969 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lwdiv.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;  dividend        2   10[COMRAM] unsigned int 
  3972 ;;  divisor         2   12[COMRAM] unsigned int 
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;  quotient        2   14[COMRAM] unsigned int 
  3975 ;;  counter         1   16[COMRAM] unsigned char 
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  2   10[COMRAM] unsigned int 
  3978 ;; Registers used:
  3979 ;;		wreg, status,2, status,0
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3985 ;;      Params:         4       0       0       0       0       0       0       0       0
  3986 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3987 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3988 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3989 ;;Total ram usage:        7 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    2
  3992 ;; This function calls:
  3993 ;;		Nothing
  3994 ;; This function is called by:
  3995 ;;		_SetBrightness
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           	psect	text34
  4000  000A56                     __ptext34:
  4001                           	opt callstack 0
  4002  000A56                     ___lwdiv:
  4003                           	opt callstack 27
  4004                           
  4005                           ;incstack = 0
  4006  000A56  0E00               	movlw	0
  4007  000A58  6E10               	movwf	___lwdiv@quotient+1,c
  4008  000A5A  0E00               	movlw	0
  4009  000A5C  6E0F               	movwf	___lwdiv@quotient,c
  4010  000A5E  500D               	movf	___lwdiv@divisor,w,c
  4011  000A60  100E               	iorwf	___lwdiv@divisor+1,w,c
  4012  000A62  B4D8               	btfsc	status,2,c
  4013  000A64  D01C               	goto	l865
  4014  000A66  0E01               	movlw	1
  4015  000A68  6E11               	movwf	___lwdiv@counter,c
  4016  000A6A  D004               	goto	l2035
  4017  000A6C                     l2033:
  4018  000A6C  90D8               	bcf	status,0,c
  4019  000A6E  360D               	rlcf	___lwdiv@divisor,f,c
  4020  000A70  360E               	rlcf	___lwdiv@divisor+1,f,c
  4021  000A72  2A11               	incf	___lwdiv@counter,f,c
  4022  000A74                     l2035:
  4023  000A74  AE0E               	btfss	___lwdiv@divisor+1,7,c
  4024  000A76  D7FA               	goto	l2033
  4025  000A78                     u1370:
  4026  000A78  90D8               	bcf	status,0,c
  4027  000A7A  360F               	rlcf	___lwdiv@quotient,f,c
  4028  000A7C  3610               	rlcf	___lwdiv@quotient+1,f,c
  4029  000A7E  500D               	movf	___lwdiv@divisor,w,c
  4030  000A80  5C0B               	subwf	___lwdiv@dividend,w,c
  4031  000A82  500E               	movf	___lwdiv@divisor+1,w,c
  4032  000A84  580C               	subwfb	___lwdiv@dividend+1,w,c
  4033  000A86  A0D8               	btfss	status,0,c
  4034  000A88  D005               	goto	l2045
  4035  000A8A  500D               	movf	___lwdiv@divisor,w,c
  4036  000A8C  5E0B               	subwf	___lwdiv@dividend,f,c
  4037  000A8E  500E               	movf	___lwdiv@divisor+1,w,c
  4038  000A90  5A0C               	subwfb	___lwdiv@dividend+1,f,c
  4039  000A92  800F               	bsf	___lwdiv@quotient,0,c
  4040  000A94                     l2045:
  4041  000A94  90D8               	bcf	status,0,c
  4042  000A96  320E               	rrcf	___lwdiv@divisor+1,f,c
  4043  000A98  320D               	rrcf	___lwdiv@divisor,f,c
  4044  000A9A  2E11               	decfsz	___lwdiv@counter,f,c
  4045  000A9C  D7ED               	goto	u1370
  4046  000A9E                     l865:
  4047  000A9E  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  4048  000AA2  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4049  000AA6  0012               	return		;funcret
  4050  000AA8                     __end_of___lwdiv:
  4051                           	opt callstack 0
  4052                           
  4053 ;; *************** function _GetRisingEdge_SW1 *****************
  4054 ;; Defined at:
  4055 ;;		line 250 in file "main.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;		None
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;		None
  4060 ;; Return value:  Size  Location     Type
  4061 ;;                  1    wreg      _Bool 
  4062 ;; Registers used:
  4063 ;;		wreg, status,2
  4064 ;; Tracked objects:
  4065 ;;		On entry : 0/0
  4066 ;;		On exit  : 0/0
  4067 ;;		Unchanged: 0/0
  4068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4069 ;;      Params:         0       0       0       0       0       0       0       0       0
  4070 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4071 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4072 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4073 ;;Total ram usage:        2 bytes
  4074 ;; Hardware stack levels used:    1
  4075 ;; Hardware stack levels required when called:    2
  4076 ;; This function calls:
  4077 ;;		Nothing
  4078 ;; This function is called by:
  4079 ;;		_main
  4080 ;;		_SetBrightness
  4081 ;;		_SetRTC
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text35
  4086  000C9A                     __ptext35:
  4087                           	opt callstack 0
  4088  000C9A                     _GetRisingEdge_SW1:
  4089                           	opt callstack 27
  4090                           
  4091                           ;main.c: 251:     static _Bool flag = 0;;main.c: 252:     if(PORTEbits.RE0 == 0) {
  4092                           
  4093                           ;incstack = 0
  4094  000C9A  B084               	btfsc	3972,0,c	;volatile
  4095  000C9C  D003               	goto	l206
  4096                           
  4097                           ;main.c: 253:         flag = 1;
  4098  000C9E  0E01               	movlw	1
  4099  000CA0  6E36               	movwf	GetRisingEdge_SW1@flag,c
  4100                           
  4101                           ;main.c: 254:     }
  4102  000CA2  D015               	goto	l1953
  4103  000CA4                     l206:
  4104  000CA4  A084               	btfss	3972,0,c	;volatile
  4105  000CA6  D013               	goto	l1953
  4106  000CA8  5036               	movf	GetRisingEdge_SW1@flag,w,c
  4107  000CAA  B4D8               	btfsc	status,2,c
  4108  000CAC  D010               	goto	l1953
  4109                           
  4110                           ;main.c: 256:         flag = 0;
  4111  000CAE  0E00               	movlw	0
  4112  000CB0  6E36               	movwf	GetRisingEdge_SW1@flag,c
  4113                           
  4114                           ;main.c: 257:         _delay((unsigned long)((100)*(48000000/4000.0)));
  4115  000CB2  0E07               	movlw	7
  4116  000CB4  6E0C               	movwf	(??_GetRisingEdge_SW1+1)& (0+255),c
  4117  000CB6  0E17               	movlw	23
  4118  000CB8  6E0B               	movwf	??_GetRisingEdge_SW1& (0+255),c
  4119  000CBA  0E6A               	movlw	106
  4120  000CBC                     u2147:
  4121  000CBC  2EE8               	decfsz	wreg,f,c
  4122  000CBE  D7FE               	bra	u2147
  4123  000CC0  2E0B               	decfsz	??_GetRisingEdge_SW1& (0+255),f,c
  4124  000CC2  D7FC               	bra	u2147
  4125  000CC4  2E0C               	decfsz	(??_GetRisingEdge_SW1+1)& (0+255),f,c
  4126  000CC6  D7FA               	bra	u2147
  4127  000CC8  D000               	nop2	
  4128                           
  4129                           ;main.c: 258:         return 1;
  4130  000CCA  0E01               	movlw	1
  4131  000CCC  0012               	return	
  4132  000CCE                     l1953:
  4133                           
  4134                           ;main.c: 260:     return 0;
  4135  000CCE  0E00               	movlw	0
  4136  000CD0  0012               	return		;funcret
  4137  000CD2                     __end_of_GetRisingEdge_SW1:
  4138                           	opt callstack 0
  4139                           
  4140 ;; *************** function _Interrupt_Init *****************
  4141 ;; Defined at:
  4142 ;;		line 295 in file "main.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;		None
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;		None
  4147 ;; Return value:  Size  Location     Type
  4148 ;;                  1    wreg      void 
  4149 ;; Registers used:
  4150 ;;		None
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4156 ;;      Params:         0       0       0       0       0       0       0       0       0
  4157 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4158 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4159 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4160 ;;Total ram usage:        0 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; Hardware stack levels required when called:    2
  4163 ;; This function calls:
  4164 ;;		Nothing
  4165 ;; This function is called by:
  4166 ;;		_main
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           	psect	text36
  4171  000F2A                     __ptext36:
  4172                           	opt callstack 0
  4173  000F2A                     _Interrupt_Init:
  4174                           	opt callstack 28
  4175                           
  4176                           ;main.c: 296:     INTCONbits.PEIE = 1;
  4177                           
  4178                           ;incstack = 0
  4179  000F2A  8CF2               	bsf	4082,6,c	;volatile
  4180                           
  4181                           ;main.c: 297:     INTCONbits.GIE = 1;
  4182  000F2C  8EF2               	bsf	4082,7,c	;volatile
  4183                           
  4184                           ;main.c: 298:     RCONbits.IPEN = 1;
  4185  000F2E  8ED0               	bsf	4048,7,c	;volatile
  4186                           
  4187                           ;main.c: 299:     INTCON2bits.TMR0IP = 1;
  4188  000F30  84F1               	bsf	4081,2,c	;volatile
  4189                           
  4190                           ;main.c: 300:     INTCONbits.TMR0IF = 0;
  4191  000F32  94F2               	bcf	4082,2,c	;volatile
  4192                           
  4193                           ;main.c: 301:     INTCONbits.TMR0IE = 1;
  4194  000F34  8AF2               	bsf	4082,5,c	;volatile
  4195  000F36  0012               	return		;funcret
  4196  000F38                     __end_of_Interrupt_Init:
  4197                           	opt callstack 0
  4198                           
  4199 ;; *************** function _DS3231_Init *****************
  4200 ;; Defined at:
  4201 ;;		line 5 in file "DS3231.c"
  4202 ;; Parameters:    Size  Location     Type
  4203 ;;		None
  4204 ;; Auto vars:     Size  Location     Type
  4205 ;;		None
  4206 ;; Return value:  Size  Location     Type
  4207 ;;                  1    wreg      void 
  4208 ;; Registers used:
  4209 ;;		wreg, status,2, cstack
  4210 ;; Tracked objects:
  4211 ;;		On entry : 0/0
  4212 ;;		On exit  : 0/0
  4213 ;;		Unchanged: 0/0
  4214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4215 ;;      Params:         0       0       0       0       0       0       0       0       0
  4216 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4217 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4218 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4219 ;;Total ram usage:        0 bytes
  4220 ;; Hardware stack levels used:    1
  4221 ;; Hardware stack levels required when called:    3
  4222 ;; This function calls:
  4223 ;;		_I2C_Init
  4224 ;; This function is called by:
  4225 ;;		_main
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           	psect	text37
  4230  000F6A                     __ptext37:
  4231                           	opt callstack 0
  4232  000F6A                     _DS3231_Init:
  4233                           	opt callstack 27
  4234                           
  4235                           ;DS3231.c: 6:     I2C_Init();
  4236                           
  4237                           ;incstack = 0
  4238  000F6A  EC7F  F007         	call	_I2C_Init	;wreg free
  4239  000F6E  0012               	return		;funcret
  4240  000F70                     __end_of_DS3231_Init:
  4241                           	opt callstack 0
  4242                           
  4243 ;; *************** function _I2C_Init *****************
  4244 ;; Defined at:
  4245 ;;		line 3 in file "I2C.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;		None
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;		None
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, status,2
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4259 ;;      Params:         0       0       0       0       0       0       0       0       0
  4260 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4261 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4262 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4263 ;;Total ram usage:        0 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    2
  4266 ;; This function calls:
  4267 ;;		Nothing
  4268 ;; This function is called by:
  4269 ;;		_DS3231_Init
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	text38
  4274  000EFE                     __ptext38:
  4275                           	opt callstack 0
  4276  000EFE                     _I2C_Init:
  4277                           	opt callstack 27
  4278                           
  4279                           ;I2C.c: 4:     TRISBbits.RB1 = 1;
  4280                           
  4281                           ;incstack = 0
  4282  000EFE  8293               	bsf	3987,1,c	;volatile
  4283                           
  4284                           ;I2C.c: 5:     TRISBbits.RB0 = 1;
  4285  000F00  8093               	bsf	3987,0,c	;volatile
  4286                           
  4287                           ;I2C.c: 6:     SSPSTATbits.SMP = 1;
  4288  000F02  8EC7               	bsf	4039,7,c	;volatile
  4289                           
  4290                           ;I2C.c: 7:     SSPSTATbits.CKE = 0;
  4291  000F04  9CC7               	bcf	4039,6,c	;volatile
  4292                           
  4293                           ;I2C.c: 8:     SSPCON1bits.SSPM = 0x08;
  4294  000F06  50C6               	movf	4038,w,c	;volatile
  4295  000F08  0BF0               	andlw	-16
  4296  000F0A  0908               	iorlw	8
  4297  000F0C  6EC6               	movwf	4038,c	;volatile
  4298                           
  4299                           ;I2C.c: 9:     SSPADD = 119;
  4300  000F0E  0E77               	movlw	119
  4301  000F10  6EC8               	movwf	4040,c	;volatile
  4302                           
  4303                           ;I2C.c: 10:     SSPCON1bits.SSPEN = 1;
  4304  000F12  8AC6               	bsf	4038,5,c	;volatile
  4305  000F14  0012               	return		;funcret
  4306  000F16                     __end_of_I2C_Init:
  4307                           	opt callstack 0
  4308                           
  4309 ;; *************** function _ISR *****************
  4310 ;; Defined at:
  4311 ;;		line 30 in file "main.c"
  4312 ;; Parameters:    Size  Location     Type
  4313 ;;		None
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;		None
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  1    wreg      void 
  4318 ;; Registers used:
  4319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4325 ;;      Params:         0       0       0       0       0       0       0       0       0
  4326 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4327 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4328 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4329 ;;Total ram usage:        4 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; Hardware stack levels required when called:    1
  4332 ;; This function calls:
  4333 ;;		_Display_ISR
  4334 ;; This function is called by:
  4335 ;;		Interrupt level 2
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           	psect	intcode
  4340  000008                     __pintcode:
  4341                           	opt callstack 0
  4342  000008                     _ISR:
  4343                           	opt callstack 23
  4344                           
  4345                           ;incstack = 0
  4346  000008  8255               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4347  00000A  ED69  F006         	call	int_func,f	;refresh shadow registers
  4348                           
  4349                           	psect	intcode_body
  4350  000CD2                     __pintcode_body:
  4351                           	opt callstack 23
  4352  000CD2                     int_func:
  4353                           	opt callstack 23
  4354  000CD2  0006               	pop		; remove dummy address from shadow register refresh
  4355  000CD4  CFD9 F007          	movff	fsr2l,??_ISR
  4356  000CD8  CFDA F008          	movff	fsr2h,??_ISR+1
  4357  000CDC  CFF3 F009          	movff	prodl,??_ISR+2
  4358  000CE0  CFF4 F00A          	movff	prodh,??_ISR+3
  4359                           
  4360                           ;main.c: 31:     if(INTCONbits.TMR0IF) {
  4361  000CE4  A4F2               	btfss	4082,2,c	;volatile
  4362  000CE6  D007               	goto	i2l74
  4363                           
  4364                           ;main.c: 32:         Display_ISR();
  4365  000CE8  EC08  F002         	call	_Display_ISR	;wreg free
  4366                           
  4367                           ;main.c: 33:         TMR0 = 65535-1000;
  4368  000CEC  0EFC               	movlw	252
  4369  000CEE  6ED7               	movwf	4055,c	;volatile
  4370  000CF0  0E17               	movlw	23
  4371  000CF2  6ED6               	movwf	4054,c	;volatile
  4372                           
  4373                           ;main.c: 34:         INTCONbits.TMR0IF = 0;
  4374  000CF4  94F2               	bcf	4082,2,c	;volatile
  4375  000CF6                     i2l74:
  4376  000CF6  C00A  FFF4         	movff	??_ISR+3,prodh
  4377  000CFA  C009  FFF3         	movff	??_ISR+2,prodl
  4378  000CFE  C008  FFDA         	movff	??_ISR+1,fsr2h
  4379  000D02  C007  FFD9         	movff	??_ISR,fsr2l
  4380  000D06  9255               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4381  000D08  0011               	retfie		f
  4382  000D0A                     __end_of_ISR:
  4383                           	opt callstack 0
  4384                           
  4385 ;; *************** function _Display_ISR *****************
  4386 ;; Defined at:
  4387 ;;		line 263 in file "main.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;		None
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;		None
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  1    wreg      void 
  4394 ;; Registers used:
  4395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4401 ;;      Params:         0       0       0       0       0       0       0       0       0
  4402 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4403 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4404 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4405 ;;Total ram usage:        6 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; This function calls:
  4408 ;;		Nothing
  4409 ;; This function is called by:
  4410 ;;		_ISR
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           	psect	text40
  4415  000410                     __ptext40:
  4416                           	opt callstack 0
  4417  000410                     _Display_ISR:
  4418                           	opt callstack 23
  4419                           
  4420                           ;main.c: 264:     static uint8_t digit = 0, BrightCnt = 0;;main.c: 265:     if(BrightCnt
      +                           >= 10) {
  4421                           
  4422                           ;incstack = 0
  4423  000410  0E09               	movlw	9
  4424  000412  6434               	cpfsgt	Display_ISR@BrightCnt,c
  4425  000414  D06B               	goto	i2l2097
  4426                           
  4427                           ;main.c: 266:         BrightCnt = 0;
  4428  000416  0E00               	movlw	0
  4429  000418  6E34               	movwf	Display_ISR@BrightCnt,c
  4430                           
  4431                           ;main.c: 267:         if(digit++ >= 3) {
  4432  00041A  2A35               	incf	Display_ISR@digit,f,c
  4433  00041C  0435               	decf	Display_ISR@digit,w,c
  4434  00041E  6E01               	movwf	??_Display_ISR& (0+255),c
  4435  000420  0E02               	movlw	2
  4436  000422  6401               	cpfsgt	??_Display_ISR,c
  4437  000424  D002               	goto	i2l2073
  4438                           
  4439                           ;main.c: 268:             digit = 0;
  4440  000426  0E00               	movlw	0
  4441  000428  6E35               	movwf	Display_ISR@digit,c
  4442  00042A                     i2l2073:
  4443                           
  4444                           ;main.c: 271:         LATBbits.LATB2 = 1;
  4445  00042A  848A               	bsf	3978,2,c	;volatile
  4446                           
  4447                           ;main.c: 272:         LATBbits.LATB3 = 1;
  4448  00042C  868A               	bsf	3978,3,c	;volatile
  4449                           
  4450                           ;main.c: 273:         LATBbits.LATB4 = 1;
  4451  00042E  888A               	bsf	3978,4,c	;volatile
  4452                           
  4453                           ;main.c: 274:         LATBbits.LATB5 = 1;
  4454  000430  8A8A               	bsf	3978,5,c	;volatile
  4455                           
  4456                           ;main.c: 276:         LATD = NumOut_Table[NumBuf[digit]] & ((PointBuf[digit]==1)?0x7f:0x
      +                          ff);
  4457  000432  0E2E               	movlw	low _PointBuf
  4458  000434  2435               	addwf	Display_ISR@digit,w,c
  4459  000436  6ED9               	movwf	fsr2l,c
  4460  000438  6ADA               	clrf	fsr2h,c
  4461  00043A  0E00               	movlw	high _PointBuf
  4462  00043C  22DA               	addwfc	fsr2h,f,c
  4463  00043E  04DE               	decf	postinc2,w,c
  4464  000440  B4D8               	btfsc	status,2,c
  4465  000442  D004               	goto	i2l2085
  4466  000444  0E00               	movlw	0
  4467  000446  6E06               	movwf	_Display_ISR$482+1,c
  4468  000448  6805               	setf	_Display_ISR$482,c
  4469  00044A  D004               	goto	i2l2087
  4470  00044C                     i2l2085:
  4471  00044C  0E00               	movlw	0
  4472  00044E  6E06               	movwf	_Display_ISR$482+1,c
  4473  000450  0E7F               	movlw	127
  4474  000452  6E05               	movwf	_Display_ISR$482,c
  4475  000454                     i2l2087:
  4476  000454  0E51               	movlw	low _NumBuf
  4477  000456  2435               	addwf	Display_ISR@digit,w,c
  4478  000458  6ED9               	movwf	fsr2l,c
  4479  00045A  6ADA               	clrf	fsr2h,c
  4480  00045C  0E00               	movlw	high _NumBuf
  4481  00045E  22DA               	addwfc	fsr2h,f,c
  4482  000460  50DF               	movf	indf2,w,c
  4483  000462  6E01               	movwf	??_Display_ISR& (0+255),c
  4484  000464  6A02               	clrf	(??_Display_ISR+1)& (0+255),c
  4485  000466  0E60               	movlw	low _NumOut_Table
  4486  000468  2401               	addwf	??_Display_ISR,w,c
  4487  00046A  6ED9               	movwf	fsr2l,c
  4488  00046C  0E00               	movlw	high _NumOut_Table
  4489  00046E  2002               	addwfc	??_Display_ISR+1,w,c
  4490  000470  6EDA               	movwf	fsr2h,c
  4491  000472  50DF               	movf	indf2,w,c
  4492  000474  1405               	andwf	_Display_ISR$482,w,c
  4493  000476  6E8C               	movwf	3980,c	;volatile
  4494                           
  4495                           ;main.c: 278:         LATBbits.LATB2 = ((digit==3)?0:1);
  4496  000478  0E03               	movlw	3
  4497  00047A  1835               	xorwf	Display_ISR@digit,w,c
  4498  00047C  B4D8               	btfsc	status,2,c
  4499  00047E  D003               	goto	i2u145_40
  4500  000480  6A01               	clrf	??_Display_ISR& (0+255),c
  4501  000482  2A01               	incf	??_Display_ISR& (0+255),f,c
  4502  000484  D001               	goto	i2u146_48
  4503  000486                     i2u145_40:
  4504  000486  6A01               	clrf	??_Display_ISR& (0+255),c
  4505  000488                     i2u146_48:
  4506  000488  4601               	rlncf	??_Display_ISR,f,c
  4507  00048A  4601               	rlncf	??_Display_ISR,f,c
  4508  00048C  508A               	movf	3978,w,c	;volatile
  4509  00048E  1801               	xorwf	??_Display_ISR,w,c
  4510  000490  0BFB               	andlw	-5
  4511  000492  1801               	xorwf	??_Display_ISR,w,c
  4512  000494  6E8A               	movwf	3978,c	;volatile
  4513                           
  4514                           ;main.c: 279:         LATBbits.LATB3 = ((digit==2)?0:1);
  4515  000496  0E02               	movlw	2
  4516  000498  1835               	xorwf	Display_ISR@digit,w,c
  4517  00049A  B4D8               	btfsc	status,2,c
  4518  00049C  D003               	goto	i2u147_40
  4519  00049E  6A01               	clrf	??_Display_ISR& (0+255),c
  4520  0004A0  2A01               	incf	??_Display_ISR& (0+255),f,c
  4521  0004A2  D001               	goto	i2u148_48
  4522  0004A4                     i2u147_40:
  4523  0004A4  6A01               	clrf	??_Display_ISR& (0+255),c
  4524  0004A6                     i2u148_48:
  4525  0004A6  4601               	rlncf	??_Display_ISR,f,c
  4526  0004A8  4601               	rlncf	??_Display_ISR,f,c
  4527  0004AA  4601               	rlncf	??_Display_ISR,f,c
  4528  0004AC  508A               	movf	3978,w,c	;volatile
  4529  0004AE  1801               	xorwf	??_Display_ISR,w,c
  4530  0004B0  0BF7               	andlw	-9
  4531  0004B2  1801               	xorwf	??_Display_ISR,w,c
  4532  0004B4  6E8A               	movwf	3978,c	;volatile
  4533                           
  4534                           ;main.c: 280:         LATBbits.LATB4 = ((digit==1)?0:1);
  4535  0004B6  0435               	decf	Display_ISR@digit,w,c
  4536  0004B8  B4D8               	btfsc	status,2,c
  4537  0004BA  D003               	goto	i2u149_40
  4538  0004BC  6A01               	clrf	??_Display_ISR& (0+255),c
  4539  0004BE  2A01               	incf	??_Display_ISR& (0+255),f,c
  4540  0004C0  D001               	goto	i2u150_48
  4541  0004C2                     i2u149_40:
  4542  0004C2  6A01               	clrf	??_Display_ISR& (0+255),c
  4543  0004C4                     i2u150_48:
  4544  0004C4  3A01               	swapf	??_Display_ISR,f,c
  4545  0004C6  508A               	movf	3978,w,c	;volatile
  4546  0004C8  1801               	xorwf	??_Display_ISR,w,c
  4547  0004CA  0BEF               	andlw	-17
  4548  0004CC  1801               	xorwf	??_Display_ISR,w,c
  4549  0004CE  6E8A               	movwf	3978,c	;volatile
  4550                           
  4551                           ;main.c: 281:         LATBbits.LATB5 = ((digit==0)?0:1);
  4552  0004D0  5035               	movf	Display_ISR@digit,w,c
  4553  0004D2  B4D8               	btfsc	status,2,c
  4554  0004D4  D003               	goto	i2u151_40
  4555  0004D6  6A01               	clrf	??_Display_ISR& (0+255),c
  4556  0004D8  2A01               	incf	??_Display_ISR& (0+255),f,c
  4557  0004DA  D001               	goto	i2u152_48
  4558  0004DC                     i2u151_40:
  4559  0004DC  6A01               	clrf	??_Display_ISR& (0+255),c
  4560  0004DE                     i2u152_48:
  4561  0004DE  3A01               	swapf	??_Display_ISR,f,c
  4562  0004E0  4601               	rlncf	??_Display_ISR,f,c
  4563  0004E2  508A               	movf	3978,w,c	;volatile
  4564  0004E4  1801               	xorwf	??_Display_ISR,w,c
  4565  0004E6  0BDF               	andlw	-33
  4566  0004E8  1801               	xorwf	??_Display_ISR,w,c
  4567  0004EA  6E8A               	movwf	3978,c	;volatile
  4568  0004EC                     i2l2097:
  4569                           
  4570                           ;main.c: 285:     if(Brightness[digit] <= BrightCnt) {
  4571  0004EC  5035               	movf	Display_ISR@digit,w,c
  4572  0004EE  0D02               	mullw	2
  4573  0004F0  0E49               	movlw	low _Brightness
  4574  0004F2  24F3               	addwf	prodl,w,c
  4575  0004F4  6ED9               	movwf	fsr2l,c
  4576  0004F6  0E00               	movlw	high _Brightness
  4577  0004F8  20F4               	addwfc	prodh,w,c
  4578  0004FA  6EDA               	movwf	fsr2h,c
  4579  0004FC  5034               	movf	Display_ISR@BrightCnt,w,c
  4580  0004FE  6E03               	movwf	(??_Display_ISR+2)& (0+255),c
  4581  000500  6A04               	clrf	(??_Display_ISR+3)& (0+255),c
  4582  000502  50DE               	movf	postinc2,w,c
  4583  000504  5C03               	subwf	??_Display_ISR+2,w,c
  4584  000506  50DE               	movf	postinc2,w,c
  4585  000508  5804               	subwfb	??_Display_ISR+3,w,c
  4586  00050A  A0D8               	btfss	status,0,c
  4587  00050C  D014               	goto	i2l224
  4588                           
  4589                           ;main.c: 286:         if(digit==0) LATBbits.LATB5 = 1;
  4590  00050E  5035               	movf	Display_ISR@digit,w,c
  4591  000510  A4D8               	btfss	status,2,c
  4592  000512  D002               	goto	i2l2103
  4593  000514  8A8A               	bsf	3978,5,c	;volatile
  4594  000516  D00F               	goto	i2l224
  4595  000518                     i2l2103:
  4596  000518  0435               	decf	Display_ISR@digit,w,c
  4597  00051A  A4D8               	btfss	status,2,c
  4598  00051C  D002               	goto	i2l2107
  4599  00051E  888A               	bsf	3978,4,c	;volatile
  4600  000520  D00A               	goto	i2l224
  4601  000522                     i2l2107:
  4602  000522  0E02               	movlw	2
  4603  000524  1835               	xorwf	Display_ISR@digit,w,c
  4604  000526  A4D8               	btfss	status,2,c
  4605  000528  D002               	goto	i2l2111
  4606  00052A  868A               	bsf	3978,3,c	;volatile
  4607  00052C  D004               	goto	i2l224
  4608  00052E                     i2l2111:
  4609  00052E  0E03               	movlw	3
  4610  000530  1835               	xorwf	Display_ISR@digit,w,c
  4611  000532  B4D8               	btfsc	status,2,c
  4612  000534  848A               	bsf	3978,2,c	;volatile
  4613  000536                     i2l224:
  4614                           
  4615                           ;main.c: 291:     BrightCnt++;
  4616  000536  2A34               	incf	Display_ISR@BrightCnt,f,c
  4617  000538  0012               	return		;funcret
  4618  00053A                     __end_of_Display_ISR:
  4619                           	opt callstack 0
  4620  0000                     
  4621                           	psect	rparam
  4622  0000                     
  4623                           	psect	temp
  4624  000055                     btemp:
  4625                           	opt callstack 0
  4626  000055                     	ds	1
  4627  0000                     int$flags	set	btemp
  4628  0000                     wtemp8	set	btemp+1
  4629  0000                     ttemp5	set	btemp+1
  4630  0000                     ttemp6	set	btemp+4
  4631  0000                     ttemp7	set	btemp+8
  4632                           tosu	equ	0xFFF
  4633                           tosh	equ	0xFFE
  4634                           tosl	equ	0xFFD
  4635                           stkptr	equ	0xFFC
  4636                           pclatu	equ	0xFFB
  4637                           pclath	equ	0xFFA
  4638                           pcl	equ	0xFF9
  4639                           tblptru	equ	0xFF8
  4640                           tblptrh	equ	0xFF7
  4641                           tblptrl	equ	0xFF6
  4642                           tablat	equ	0xFF5
  4643                           prodh	equ	0xFF4
  4644                           prodl	equ	0xFF3
  4645                           indf0	equ	0xFEF
  4646                           postinc0	equ	0xFEE
  4647                           postdec0	equ	0xFED
  4648                           preinc0	equ	0xFEC
  4649                           plusw0	equ	0xFEB
  4650                           fsr0h	equ	0xFEA
  4651                           fsr0l	equ	0xFE9
  4652                           wreg	equ	0xFE8
  4653                           indf1	equ	0xFE7
  4654                           postinc1	equ	0xFE6
  4655                           postdec1	equ	0xFE5
  4656                           preinc1	equ	0xFE4
  4657                           plusw1	equ	0xFE3
  4658                           fsr1h	equ	0xFE2
  4659                           fsr1l	equ	0xFE1
  4660                           bsr	equ	0xFE0
  4661                           indf2	equ	0xFDF
  4662                           postinc2	equ	0xFDE
  4663                           postdec2	equ	0xFDD
  4664                           preinc2	equ	0xFDC
  4665                           plusw2	equ	0xFDB
  4666                           fsr2h	equ	0xFDA
  4667                           fsr2l	equ	0xFD9
  4668                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        25
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      84
    BANK0           160      2      15
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    TimeSet@time	PTR struct Time size(2) Largest target is 7
		 -> Set(COMRAM[7]), 

    TimeRead@time	PTR struct Time size(2) Largest target is 7
		 -> RTC(COMRAM[7]), 

    I2C_Mem_Read@data	PTR unsigned char  size(2) Largest target is 1
		 -> TemperureRead@DATA_H(COMRAM[1]), TemperureRead@DATA_L(COMRAM[1]), YearRead@BCD_Data(COMRAM[1]), MonthRead@BCD_Data(COMRAM[1]), 
		 -> DateRead@BCD_Data(COMRAM[1]), WeekRead@data(COMRAM[1]), HourRead@BCD_Data(COMRAM[1]), MinRead@BCD_Data(COMRAM[1]), 
		 -> SecRead@BCD_Data(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_SetRTC
    _TimeRead->_DateRead
    _TimeRead->_HourRead
    _TimeRead->_MinRead
    _TimeRead->_MonthRead
    _TimeRead->_SecRead
    _TimeRead->_YearRead
    _YearRead->_I2C_Mem_Read
    _WeekRead->_I2C_Mem_Read
    _SecRead->_I2C_Mem_Read
    _MonthRead->_I2C_Mem_Read
    _MinRead->_I2C_Mem_Read
    _HourRead->_I2C_Mem_Read
    _DateRead->_I2C_Mem_Read
    _I2C_Mem_Read->_I2C_Read
    _I2C_RepStart->_I2C_is_idle
    _I2C_Read->_I2C_is_idle
    _ShowWeek->___awmod
    _ShowTime->___awdiv
    _ShowDate->___awdiv
    _SetRTC->_TimeSet
    _TimeSet->_SetDate
    _TimeSet->_SetHour
    _TimeSet->_SetMin
    _TimeSet->_SetMonth
    _TimeSet->_SetSec
    _TimeSet->_SetYear
    _SetYear->_I2C_Mem_Transmit
    _SetYear->___awdiv
    _SetSec->_I2C_Mem_Transmit
    _SetSec->___awdiv
    _SetMonth->_I2C_Mem_Transmit
    _SetMonth->___awdiv
    _SetMin->_I2C_Mem_Transmit
    _SetMin->___awdiv
    _SetHour->_I2C_Mem_Transmit
    _SetHour->___awdiv
    _SetDate->_I2C_Mem_Transmit
    _SetDate->___awdiv
    _I2C_Mem_Transmit->_I2C_Write
    _I2C_Write->_I2C_is_idle
    _I2C_Stop->_I2C_is_idle
    _I2C_Start->_I2C_is_idle
    _SetBrightness->___lwdiv

Critical Paths under _ISR in COMRAM

    _ISR->_Display_ISR

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   82129
                                              0 BANK0      2     2      0
                        _DS3231_Init
                  _GetRisingEdge_SW1
                  _GetRisingEdge_SW2
                     _Interrupt_Init
                      _SetBrightness
                             _SetRTC
                           _ShowDate
                           _ShowTime
                           _ShowWeek
                           _TimeRead
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TimeRead                                             3     1      2   12308
                                             23 COMRAM     3     1      2
                           _DateRead
                           _HourRead
                            _MinRead
                          _MonthRead
                            _SecRead
                           _WeekRead
                           _YearRead
 ---------------------------------------------------------------------------------
 (2) _YearRead                                             3     3      0    1732
                                             20 COMRAM     3     3      0
                       _I2C_Mem_Read
 ---------------------------------------------------------------------------------
 (2) _WeekRead                                             1     1      0    1686
                                             20 COMRAM     1     1      0
                       _I2C_Mem_Read
 ---------------------------------------------------------------------------------
 (2) _SecRead                                              3     3      0    1732
                                             20 COMRAM     3     3      0
                       _I2C_Mem_Read
 ---------------------------------------------------------------------------------
 (2) _MonthRead                                            3     3      0    1732
                                             20 COMRAM     3     3      0
                       _I2C_Mem_Read
 ---------------------------------------------------------------------------------
 (2) _MinRead                                              3     3      0    1732
                                             20 COMRAM     3     3      0
                       _I2C_Mem_Read
 ---------------------------------------------------------------------------------
 (2) _HourRead                                             3     3      0    1732
                                             20 COMRAM     3     3      0
                       _I2C_Mem_Read
 ---------------------------------------------------------------------------------
 (2) _DateRead                                             3     3      0    1732
                                             20 COMRAM     3     3      0
                       _I2C_Mem_Read
 ---------------------------------------------------------------------------------
 (3) _I2C_Mem_Read                                         4     1      3    1639
                                             16 COMRAM     4     1      3
                           _I2C_Read
                       _I2C_RepStart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_RepStart                                         0     0      0      23
                        _I2C_is_idle
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             2     2      0      69
                                             14 COMRAM     2     2      0
                        _I2C_is_idle
 ---------------------------------------------------------------------------------
 (1) _ShowWeek                                             0     0      0    3336
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _ShowTime                                             0     0      0    6372
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _ShowDate                                             0     0      0    6372
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _SetRTC                                              21    21      0   53116
                                             24 COMRAM    21    21      0
                  _GetRisingEdge_SW1
                  _GetRisingEdge_SW2
                            _TimeSet
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _TimeSet                                              2     0      2   46350
                                             22 COMRAM     2     0      2
                            _SetDate
                            _SetHour
                             _SetMin
                           _SetMonth
                             _SetSec
                            _SetYear
 ---------------------------------------------------------------------------------
 (3) _SetYear                                              4     4      0    7683
                                             18 COMRAM     4     4      0
                   _I2C_Mem_Transmit
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _SetSec                                               4     4      0    7683
                                             18 COMRAM     4     4      0
                   _I2C_Mem_Transmit
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _SetMonth                                             4     4      0    7705
                                             18 COMRAM     4     4      0
                   _I2C_Mem_Transmit
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _SetMin                                               4     4      0    7683
                                             18 COMRAM     4     4      0
                   _I2C_Mem_Transmit
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _SetHour                                              4     4      0    7683
                                             18 COMRAM     4     4      0
                   _I2C_Mem_Transmit
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _SetDate                                              4     4      0    7705
                                             18 COMRAM     4     4      0
                   _I2C_Mem_Transmit
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3336
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    3036
                                             10 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _I2C_Mem_Transmit                                     3     1      2    1221
                                             15 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            1     1      0      45
                                             14 COMRAM     1     1      0
                        _I2C_is_idle
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0      23
                        _I2C_is_idle
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0      23
                        _I2C_is_idle
 ---------------------------------------------------------------------------------
 (5) _I2C_is_idle                                          4     4      0      23
                                             10 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _GetRisingEdge_SW2                                    2     2      0       0
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SetBrightness                                        2     2      0     625
                                             17 COMRAM     2     2      0
                  _GetRisingEdge_SW1
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             10 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             10 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _GetRisingEdge_SW1                                    2     2      0       0
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Interrupt_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Init                                          0     0      0       0
                           _I2C_Init
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  4     4      0      24
                                              6 COMRAM     4     4      0
                        _Display_ISR
 ---------------------------------------------------------------------------------
 (8) _Display_ISR                                          6     6      0      24
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS3231_Init
     _I2C_Init
   _GetRisingEdge_SW1
   _GetRisingEdge_SW2
   _Interrupt_Init
   _SetBrightness
     _GetRisingEdge_SW1
     ___lwdiv
     ___lwmod
   _SetRTC
     _GetRisingEdge_SW1
     _GetRisingEdge_SW2
     _TimeSet
       _SetDate
         _I2C_Mem_Transmit
           _I2C_Start
             _I2C_is_idle
           _I2C_Stop
             _I2C_is_idle
           _I2C_Write
             _I2C_is_idle
         ___awdiv
         ___awmod
       _SetHour
         _I2C_Mem_Transmit
           _I2C_Start
             _I2C_is_idle
           _I2C_Stop
             _I2C_is_idle
           _I2C_Write
             _I2C_is_idle
         ___awdiv
         ___awmod
       _SetMin
         _I2C_Mem_Transmit
           _I2C_Start
             _I2C_is_idle
           _I2C_Stop
             _I2C_is_idle
           _I2C_Write
             _I2C_is_idle
         ___awdiv
         ___awmod
       _SetMonth
         _I2C_Mem_Transmit
           _I2C_Start
             _I2C_is_idle
           _I2C_Stop
             _I2C_is_idle
           _I2C_Write
             _I2C_is_idle
         ___awdiv
         ___awmod
       _SetSec
         _I2C_Mem_Transmit
           _I2C_Start
             _I2C_is_idle
           _I2C_Stop
             _I2C_is_idle
           _I2C_Write
             _I2C_is_idle
         ___awdiv
         ___awmod
       _SetYear
         _I2C_Mem_Transmit
           _I2C_Start
             _I2C_is_idle
           _I2C_Stop
             _I2C_is_idle
           _I2C_Write
             _I2C_is_idle
         ___awdiv
         ___awmod
     ___awdiv
     ___awmod
   _ShowDate
     ___awdiv
     ___awmod
   _ShowTime
     ___awdiv
     ___awmod
   _ShowWeek
     ___awmod
   _TimeRead
     _DateRead
       _I2C_Mem_Read
         _I2C_Read
           _I2C_is_idle
         _I2C_RepStart
           _I2C_is_idle
         _I2C_Start
           _I2C_is_idle
         _I2C_Stop
           _I2C_is_idle
         _I2C_Write
           _I2C_is_idle
     _HourRead
       _I2C_Mem_Read
         _I2C_Read
           _I2C_is_idle
         _I2C_RepStart
           _I2C_is_idle
         _I2C_Start
           _I2C_is_idle
         _I2C_Stop
           _I2C_is_idle
         _I2C_Write
           _I2C_is_idle
     _MinRead
       _I2C_Mem_Read
         _I2C_Read
           _I2C_is_idle
         _I2C_RepStart
           _I2C_is_idle
         _I2C_Start
           _I2C_is_idle
         _I2C_Stop
           _I2C_is_idle
         _I2C_Write
           _I2C_is_idle
     _MonthRead
       _I2C_Mem_Read
         _I2C_Read
           _I2C_is_idle
         _I2C_RepStart
           _I2C_is_idle
         _I2C_Start
           _I2C_is_idle
         _I2C_Stop
           _I2C_is_idle
         _I2C_Write
           _I2C_is_idle
     _SecRead
       _I2C_Mem_Read
         _I2C_Read
           _I2C_is_idle
         _I2C_RepStart
           _I2C_is_idle
         _I2C_Start
           _I2C_is_idle
         _I2C_Stop
           _I2C_is_idle
         _I2C_Write
           _I2C_is_idle
     _WeekRead
       _I2C_Mem_Read
         _I2C_Read
           _I2C_is_idle
         _I2C_RepStart
           _I2C_is_idle
         _I2C_Start
           _I2C_is_idle
         _I2C_Stop
           _I2C_is_idle
         _I2C_Write
           _I2C_is_idle
     _YearRead
       _I2C_Mem_Read
         _I2C_Read
           _I2C_is_idle
         _I2C_RepStart
           _I2C_is_idle
         _I2C_Start
           _I2C_is_idle
         _I2C_Stop
           _I2C_is_idle
         _I2C_Write
           _I2C_is_idle
   _Timer0_Init

 _ISR (ROOT)
   _Display_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      2       F       5        9.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      54       1       89.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      63      20        0.0%
DATA                 0      0      63       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 01 17:16:27 2021

          ??_Interrupt_Init 000B          __size_of_I2C_Start 0008                 _SSPSTATbits 000FC7  
        __size_of_I2C_Write 0014                ___awdiv@sign 0010                 __CFG_BORV$3 000000  
              __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000  
              __CFG_CP3$OFF 000000                         l112 0060                         l206 0CA4  
                       l264 0C1E                         l276 0F20                         l285 0EB6  
                       l198 0C6C                         l865 0A9E                         l875 0C58  
              __CFG_CPB$OFF 000000                __CFG_CPD$OFF 000000                         _ISR 0008  
                       _RTC 0042                         _Set 003B                __CFG_BOR$OFF 000000  
              ___awmod@sign 0010                         prod 000FF3                         wreg 000FE8  
              __CFG_LVP$OFF 000000                        ?_ISR 0001                __CFG_WDT$OFF 000000  
                      l2033 0A6C                        l2035 0A74                        l2045 0A94  
                      l2061 0C4E                        l2053 0C2E                        l2205 0166  
                      l2055 0C36                        l2311 03A2                        l2207 0180  
                      l2305 0380                        l2321 03F2                        l2209 0184  
                      l2217 0196                        l2235 01EC                        l2227 01BE  
                      l2253 02A2                        l2245 0274                        l2237 0206  
                      l2229 01D8                        l2181 009C                        l2325 03FC  
                      l2271 02E4                        l2255 02BC                        l2247 028E  
                      l2239 0238                        l2319 03C4                        l2191 00FC  
                      l2167 0032                        l2273 02FE                        l2257 02C0  
                      l2265 02CC                        l2339 06B6                        l1803 072C  
                      l2187 00B0                        l2179 0082                        l2293 033C  
                      l2197 0138                        l2189 00CA                        l1815 0752  
                      l1831 0784                        l2287 0320                        l2199 0152  
                      l2463 0576                        l2455 0558                        l1817 075A  
                      l1809 073C                        l2481 05B0                        l2473 059A  
                      l2465 057A                        l1763 0C0C                        l1835 0792  
                      l1827 077A                        l1851 0834                        l2299 035E  
                      l2483 05B6                        l2475 05A0                        l2491 05C6  
                      l1757 0BE4                        l2485 05BA                        l2477 05A6  
                      l1935 0C96                        l1871 087A                        l1863 0862  
                      l1855 0842                        l1847 0828                        l2479 05AC  
                      l1953 0CCE                        l1857 084A                        l1867 086C  
                      u1130 075E                        u1060 0F24                        u1400 0C3A  
                      u2117 0318                        u1190 084E                        u2127 0C02  
                      u1095 0EC6                        u1600 0808                        u1096 0EC8  
                      _LATD 000F8C                        u2137 0C84                        u1370 0A78  
                      u2147 0CBC                        u1611 0020                        u1630 005C  
                      u1640 005E                        u1730 01A6                        u1660 006C  
                      u1590 0806                        u1930 06AE                        i2l74 0CF6  
                      _TMR0 000FD6       __size_of_I2C_Mem_Read 0036                        _Mode 003A  
                      _main 053A            __end_of_I2C_Init 0F16            __end_of_I2C_Read 0ECC  
                      fsr2h 000FDA                        indf2 000FDF                        fsr1l 000FE1  
                      fsr2l 000FD9                        btemp 0055            __end_of_I2C_Stop 0F62  
                      prodh 000FF4                        prodl 000FF3        __size_of_I2C_is_idle 0046  
                      start 000E       __size_of_I2C_RepStart 0008               __CFG_IESO$OFF 000000  
    I2C_Mem_Read@MemAddress 0011           ?_I2C_Mem_Transmit 0010               __CFG_MCLRE$ON 000000  
              ___param_bank 000000             MinRead@BCD_Data 0017             __end_of_MinRead 0E8E  
        ??_I2C_Mem_Transmit 0012             __end_of_SecRead 0E60                       ??_ISR 0007  
           __end_of_SetDate 0A56             __end_of_SetHour 0AF6             __end_of_SetYear 0B42  
           __end_of_TimeSet 0958               __CFG_PLLDIV$4 000000         __end_of_Display_ISR 053A  
            __CFG_CCP2MX$ON 000000                       ?_main 0001             __end_of___awdiv 079C  
           __end_of___awmod 0884             ___awdiv@divisor 000D             __end_of___lwdiv 0AA8  
           __end_of___lwmod 0C62                       i2l224 0536             ___awdiv@counter 000F  
        I2C_is_idle@TimeOut 000D                  SetRTC@flag 0039               __CFG_USBDIV$2 000000  
                     _TRISB 000F93                       _TRISC 000F94                       _TRISD 000F95  
                     _TRISE 000F96                  _Brightness 0049               __CFG_PWRT$OFF 000000  
              _I2C_Mem_Read 0D0A               __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000  
             __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000                _I2C_RepStart 0F52  
         __end_of_I2C_Start 0F6A           __end_of_I2C_Write 0F2A                       tablat 000FF5  
                     plusw1 000FE3                       plusw2 000FDB                       ttemp5 0056  
                     ttemp6 0059                       ttemp7 005D                       status 000FD8  
                     wtemp8 0056            __end_of_DateRead 0E04            SetMonth@BCD_Data 0015  
            __CFG_ICPRT$OFF 000000             MinRead@Dec_Data 0016                  SetMin@data 0016  
            __CFG_PBADEN$ON 000000                  SetSec@data 0016             __initialization 0958  
              __end_of_main 05F8                  _SetRTC$460 0027                  _SetRTC$461 0029  
                _SetRTC$462 002B                  _SetRTC$454 001B                  _SetRTC$455 001D  
                _SetRTC$456 001F                  _SetRTC$457 0021                  _SetRTC$458 0023  
                _SetRTC$459 0025            __end_of_HourRead 0DD4                      ??_main 006D  
          __end_of_SetMonth 0A04               __activetblptr 000002            __end_of_WeekRead 0EE6  
          __end_of_TimeRead 068C            __end_of_ShowDate 08EE            __end_of_YearRead 0E32  
          __end_of_ShowWeek 0D74            __end_of_ShowTime 0814             SetHour@BCD_Data 0015  
                    _ADCON1 000FC1            ___awdiv@dividend 000B                      i2l2111 052E  
                    i2l2103 0518                      i2l2107 0522                      i2l2073 042A  
                    i2l2085 044C                      i2l2087 0454                      i2l2097 04EC  
                    _SSPADD 000FC8                      _SSPBUF 000FC9                   ??_MinRead 0015  
           _Display_ISR$482 0005                   ??_SecRead 0015               ??_Timer0_Init 000B  
                 ??_SetDate 0013                   ??_SetHour 0013                      _SetRTC 0012  
            __CFG_XINST$OFF 000000                   ??_SetYear 0013                      _SetMin 0B8E  
                    _SetSec 0B42                      _NumBuf 0051                   ??_TimeSet 0019  
               _Display_ISR 0410           MonthRead@BCD_Data 0017                   ??___awdiv 000F  
                 ??___awmod 000F                   ??___lwdiv 000F                   ??___lwmod 000F  
        __size_of_MonthRead 0030                 SetDate@data 0016                      clear_0 099E  
          ___awdiv@quotient 0011             ___awmod@divisor 000D             ___awmod@counter 000F  
          I2C_Mem_Read@addr 0014            I2C_Mem_Read@data 0012                __pdataCOMRAM 0049  
                 ?_I2C_Init 0001                   ?_I2C_Read 0001                   ?_I2C_Stop 0001  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                __accesstop 0060     __end_of__initialization 09A4      __size_of_SetBrightness 008C  
       I2C_Read@GenerateAck 000F               ___rparam_used 000001           MonthRead@Dec_Data 0016  
            __pcstackCOMRAM 0001                 SetHour@data 0016                __pidataBANK0 0F38  
       __end_of_Timer0_Init 0EFE            HourRead@BCD_Data 0017                  ??_I2C_Init 000B  
                ??_I2C_Read 000F                   ?_DateRead 0001             SetDate@BCD_Data 0015  
                ??_I2C_Stop 000F                 SetYear@data 0016           __end_of_MonthRead 0DA4  
             ??_DS3231_Init 000B                   ?_HourRead 0001                   ?_SetMonth 0001  
                   ?_SetRTC 0001                     ?_SetMin 0001                     ?_SetSec 0001  
                 ?_WeekRead 0001            DateRead@BCD_Data 0017                   ?_TimeRead 0018  
                 ?_ShowDate 0001                I2C_Read@data 0010                   ?_YearRead 0001  
                 ?_ShowWeek 0001                   ?_ShowTime 0001            HourRead@Dec_Data 0016  
             _SetBrightness 068C        Display_ISR@BrightCnt 0034   __size_of_I2C_Mem_Transmit 0020  
                ??_DateRead 0015                 TimeSet@time 0017                     _SSPCON2 000FC5  
                   _SSPSTAT 000FC7               ??_I2C_is_idle 000B             __CFG_VREGEN$OFF 000000  
                ??_HourRead 0015            DateRead@Dec_Data 0016                   _I2C_Start 0F62  
                   _MinRead 0E60                   _I2C_Write 0F16                     _SecRead 0E32  
                ??_SetMonth 0013                     _SetDate 0A04                     __Hparam 0000  
               _Timer0_Init 0EE6                     _SetHour 0AA8                     _SetYear 0AF6  
                   __Lparam 0000                  ??_WeekRead 0015                  ??_TimeRead 001A  
           __size_of_SetRTC 03FE                     _TimeSet 08EE                  ??_ShowDate 0013  
           __size_of_SetMin 004C             __size_of_SetSec 004C                  ??_YearRead 0015  
                ??_ShowWeek 0011                  ??_ShowTime 0013         __end_of_DS3231_Init 0F70  
                   ___awdiv 0718                     ___awmod 0814                     ___lwdiv 0A56  
                   ___lwmod 0C20             __CFG_STVREN$OFF 000000                     __pcinit 0958  
                   __ramtop 0800              ?_SetBrightness 0001                     __ptext0 053A  
                   __ptext1 0EE6                     __ptext2 05F8                     __ptext3 0E04  
                   __ptext4 0ECC                     __ptext5 0E32                     __ptext6 0D74  
                   __ptext7 0E60                     __ptext8 0DA4                     __ptext9 0DD4  
                 _T0CONbits 000FD5                __size_of_ISR 0D02     __size_of_Interrupt_Init 000E  
          ___awmod@dividend 000B              __pintcode_body 0CD2        end_of_initialization 09A4  
             __Lmediumconst 0000                     int_func 0CD2                  ?_I2C_Start 0001  
                ?_I2C_Write 0001                ?_Display_ISR 0001        I2C_Mem_Transmit@addr 0012  
       __end_of_I2C_is_idle 0C20        I2C_Mem_Transmit@data 0011                     postdec1 000FE5  
                   postinc0 000FEE                     postinc2 000FDE                   _PORTEbits 000F84  
         _GetRisingEdge_SW1 0C9A           _GetRisingEdge_SW2 0C62                   _TRISBbits 000F93  
        ?_GetRisingEdge_SW1 0001          ?_GetRisingEdge_SW2 0001           __size_of_I2C_Init 0018  
         __size_of_I2C_Read 001E           __size_of_I2C_Stop 0008         ??_GetRisingEdge_SW1 000B  
       ??_GetRisingEdge_SW2 000B                 _DS3231_Init 0F6A              __end_of_SetRTC 0410  
            __end_of_SetMin 0BDA              __end_of_SetSec 0B8E             ??_SetBrightness 0012  
                 SetRTC@cnt 002D               __pidataCOMRAM 0F45             ShowTime@old_sec 0038  
 __end_of_GetRisingEdge_SW1 0CD2   __end_of_GetRisingEdge_SW2 0C9A            _I2C_Mem_Transmit 0E8E  
       start_initialization 0958                 __end_of_ISR 0D0A           __size_of_DateRead 0030  
              SetMonth@data 0016                 _I2C_is_idle 0BDA                 ??_I2C_Start 000F  
               ??_I2C_Write 000F                   _MonthRead 0D74           __size_of_HourRead 0030  
                  ??_SetRTC 0019                    ??_SetMin 0013                    ??_SetSec 0013  
         __size_of_SetMonth 0052           __size_of_WeekRead 001A           __size_of_TimeRead 0094  
         __size_of_ShowDate 006A                 __pdataBANK0 0060            __CFG_LPT1OSC$OFF 000000  
         __size_of_YearRead 002E           __size_of_ShowWeek 0034           __size_of_ShowTime 0078  
            _Interrupt_Init 0F2A               ?_I2C_Mem_Read 0011                 __pbssCOMRAM 002E  
             __pcstackBANK0 006D             SetYear@BCD_Data 0015               ?_I2C_RepStart 0001  
                  ?_MinRead 0001                    ?_SecRead 0001                  ?_MonthRead 0001  
                  ?_SetDate 0001                ?_Timer0_Init 0001                    ?_SetHour 0001  
          ___lwdiv@dividend 000B                    ?_SetYear 0001                    ?_TimeSet 0017  
                 __pintcode 0008                    ?___awdiv 000B                    ?___awmod 000B  
      __size_of_Display_ISR 012A                    ?___lwdiv 000B                    ?___lwmod 000B  
    __end_of_Interrupt_Init 0F38                WeekRead@data 0015  __size_of_GetRisingEdge_SW1 0038  
__size_of_GetRisingEdge_SW2 0038              ??_I2C_Mem_Read 0014                    _I2C_Init 0EFE  
                  _I2C_Read 0EAE                    _I2C_Stop 0F5A              ??_I2C_RepStart 000F  
              TimeRead@time 0018            ___lwdiv@quotient 000F                    _LATBbits 000F8A  
                  i2u151_40 04DC                    i2u150_48 04C4                    i2u152_48 04DE  
                  i2u145_40 0486                    i2u147_40 04A4                    i2u146_48 0488  
                  i2u149_40 04C2                    i2u148_48 04A6                    _RCONbits 000FD0  
          __CFG_WDTPS$32768 000000             SecRead@BCD_Data 0017             ?_Interrupt_Init 0001  
                  _DateRead 0DD4                 _INTCON2bits 000FF1                   copy_data0 096C  
                 copy_data1 098C                _NumOut_Table 0060                ?_DS3231_Init 0001  
                  _HourRead 0DA4                 ??_MonthRead 0015    __end_of_I2C_Mem_Transmit 0EAE  
                  _SetMonth 09B2            __size_of_MinRead 002E                    __Hrparam 0000  
          __size_of_SecRead 002E                    _WeekRead 0ECC                    _TimeRead 05F8  
          __size_of_SetDate 0052                    _PointBuf 002E                    __Lrparam 0000  
                  _ShowDate 0884            __size_of_SetHour 004E                    _YearRead 0E04  
           SecRead@Dec_Data 0016                    _ShowWeek 0D40            __size_of_SetYear 004C  
                  _ShowTime 079C            __size_of_TimeSet 006A               I2C_Write@data 000F  
          __size_of___awdiv 0084            __size_of___awmod 0070            __size_of___lwdiv 0052  
          __size_of___lwmod 0042             SetRTC@BlinkTime 0032  I2C_Mem_Transmit@MemAddress 0010  
           ___lwdiv@divisor 000D             ___lwdiv@counter 0011                    __ptext10 0D0A  
                  __ptext11 0F52                    __ptext20 09B2                    __ptext12 0EAE  
                  __ptext21 0B8E                    __ptext13 0D40                    __ptext30 0BDA  
                  __ptext22 0AA8                    __ptext14 079C                    __ptext31 0C62  
                  __ptext23 0A04                    __ptext15 0884                    __ptext40 0410  
                  __ptext32 068C                    __ptext24 0814                    __ptext16 0012  
                  __ptext33 0C20                    __ptext25 0718                    __ptext17 08EE  
                  __ptext34 0A56                    __ptext26 0E8E                    __ptext18 0AF6  
                  __ptext35 0C9A                    __ptext27 0F16                    __ptext19 0B42  
                  __ptext36 0F2A                    __ptext28 0F5A                    __ptext37 0F6A  
                  __ptext29 0F62                    __ptext38 0EFE                ?_I2C_is_idle 0001  
             __size_of_main 00BE        __end_of_I2C_Mem_Read 0D40            YearRead@BCD_Data 0017  
      __size_of_Timer0_Init 0018                    int$flags 0055        __end_of_I2C_RepStart 0F5A  
     __end_of_SetBrightness 0718       __CFG_CPUDIV$OSC1_PLL2 000000              SetMin@BCD_Data 0015  
                _INTCONbits 000FF2                    intlevel2 0000            ___lwmod@dividend 000B  
          YearRead@Dec_Data 0016              SetSec@BCD_Data 0015       GetRisingEdge_SW1@flag 0036  
     GetRisingEdge_SW2@flag 0037             ___lwmod@divisor 000D             ___lwmod@counter 000F  
          Display_ISR@digit 0035                 _SSPCON1bits 000FC6                 _SSPCON2bits 000FC5  
        __CFG_FOSC$HSPLL_HS 000000        __size_of_DS3231_Init 0006               ??_Display_ISR 0001  
